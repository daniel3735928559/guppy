(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Guppy = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
(function(e){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.katex=e()}})(function(){var e,t,r;return function e(t,r,a){function i(n,l){if(!r[n]){if(!t[n]){var o=typeof require=="function"&&require;if(!l&&o)return o(n,!0);if(s)return s(n,!0);var u=new Error("Cannot find module '"+n+"'");throw u.code="MODULE_NOT_FOUND",u}var p=r[n]={exports:{}};t[n][0].call(p.exports,function(e){var r=t[n][1][e];return i(r?r:e)},p,p.exports,e,t,r,a)}return r[n].exports}var s=typeof require=="function"&&require;for(var n=0;n<a.length;n++)i(a[n]);return i}({1:[function(e,t,r){"use strict";var a=e("./src/ParseError");var i=e("./src/Settings");var s=e("./src/buildTree");var n=e("./src/parseTree");var l=e("./src/utils");var o=function e(t,r,a){l.clearNode(r);var o=new i(a);var u=n(t,o);var p=s(u,t,o).toNode();r.appendChild(p)};if(typeof document!=="undefined"){if(document.compatMode!=="CSS1Compat"){typeof console!=="undefined"&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your "+"website has a suitable doctype.");o=function e(){throw new a("KaTeX doesn't work in quirks mode.")}}}var u=function e(t,r){var a=new i(r);var l=n(t,a);return s(l,t,a).toMarkup()};var p=function e(t,r){var a=new i(r);return n(t,a)};t.exports={render:o,renderToString:u,__parse:p,ParseError:a}},{"./src/ParseError":9,"./src/Settings":11,"./src/buildTree":16,"./src/parseTree":25,"./src/utils":28}],2:[function(e,t,r){t.exports={default:e("core-js/library/fn/json/stringify"),__esModule:true}},{"core-js/library/fn/json/stringify":3}],3:[function(e,t,r){var a=e("../../modules/_core"),i=a.JSON||(a.JSON={stringify:JSON.stringify});t.exports=function e(t){return i.stringify.apply(i,arguments)}},{"../../modules/_core":4}],4:[function(e,t,r){var a=t.exports={version:"2.4.0"};if(typeof __e=="number")__e=a},{}],5:[function(e,t,r){"use strict";function a(e){if(!e.__matchAtRelocatable){var t=e.source+"|()";var r="g"+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"");e.__matchAtRelocatable=new RegExp(t,r)}return e.__matchAtRelocatable}function i(e,t,r){if(e.global||e.sticky){throw new Error("matchAt(...): Only non-global regexes are supported")}var i=a(e);i.lastIndex=r;var s=i.exec(t);if(s[s.length-1]==null){s.length=s.length-1;return s}else{return null}}t.exports=i},{}],6:[function(e,t,r){"use strict";var a=e("match-at");var i=e("./ParseError");function s(e){this.input=e;this.pos=0}function n(e,t,r,a){this.text=e;this.start=t;this.end=r;this.lexer=a}n.prototype.range=function(e,t){if(e.lexer!==this.lexer){return new n(t)}return new n(t,this.start,e.end,this.lexer)};var l=new RegExp("([ \r\n\t]+)|"+"([!-\\[\\]-\u2027\u202a-\ud7ff\uf900-\uffff]"+"|[\ud800-\udbff][\udc00-\udfff]"+"|\\\\(?:[a-zA-Z]+|[^\ud800-\udfff])"+")");s.prototype.lex=function(){var e=this.input;var t=this.pos;if(t===e.length){return new n("EOF",t,t,this)}var r=a(l,e,t);if(r===null){throw new i("Unexpected character: '"+e[t]+"'",new n(e[t],t,t+1,this))}var s=r[2]||" ";var o=this.pos;this.pos+=r[0].length;var u=this.pos;return new n(s,o,u,this)};t.exports=s},{"./ParseError":9,"match-at":5}],7:[function(e,t,r){"use strict";var a=e("./Lexer");function i(e,t){this.lexer=new a(e);this.macros=t;this.stack=[];this.discardedWhiteSpace=[]}i.prototype.nextToken=function(){for(;;){if(this.stack.length===0){this.stack.push(this.lexer.lex())}var e=this.stack.pop();var t=e.text;if(!(t.charAt(0)==="\\"&&this.macros.hasOwnProperty(t))){return e}var r=this.macros[t];if(typeof r==="string"){var i=new a(r);r=[];var s=i.lex();while(s.text!=="EOF"){r.push(s);s=i.lex()}r.reverse();this.macros[t]=r}this.stack=this.stack.concat(r)}};i.prototype.get=function(e){this.discardedWhiteSpace=[];var t=this.nextToken();if(e){while(t.text===" "){this.discardedWhiteSpace.push(t);t=this.nextToken()}}return t};i.prototype.unget=function(e){this.stack.push(e);while(this.discardedWhiteSpace.length!==0){this.stack.push(this.discardedWhiteSpace.pop())}};t.exports=i},{"./Lexer":6}],8:[function(e,t,r){"use strict";function a(e){this.style=e.style;this.color=e.color;this.size=e.size;this.phantom=e.phantom;this.font=e.font;if(e.parentStyle===undefined){this.parentStyle=e.style}else{this.parentStyle=e.parentStyle}if(e.parentSize===undefined){this.parentSize=e.size}else{this.parentSize=e.parentSize}}a.prototype.extend=function(e){var t={style:this.style,size:this.size,color:this.color,parentStyle:this.style,parentSize:this.size,phantom:this.phantom,font:this.font};for(var r in e){if(e.hasOwnProperty(r)){t[r]=e[r]}}return new a(t)};a.prototype.withStyle=function(e){return this.extend({style:e})};a.prototype.withSize=function(e){return this.extend({size:e})};a.prototype.withColor=function(e){return this.extend({color:e})};a.prototype.withPhantom=function(){return this.extend({phantom:true})};a.prototype.withFont=function(e){return this.extend({font:e||this.font})};a.prototype.reset=function(){return this.extend({})};var i={"katex-blue":"#6495ed","katex-orange":"#ffa500","katex-pink":"#ff00af","katex-red":"#df0030","katex-green":"#28ae7b","katex-gray":"gray","katex-purple":"#9d38bd","katex-blueA":"#ccfaff","katex-blueB":"#80f6ff","katex-blueC":"#63d9ea","katex-blueD":"#11accd","katex-blueE":"#0c7f99","katex-tealA":"#94fff5","katex-tealB":"#26edd5","katex-tealC":"#01d1c1","katex-tealD":"#01a995","katex-tealE":"#208170","katex-greenA":"#b6ffb0","katex-greenB":"#8af281","katex-greenC":"#74cf70","katex-greenD":"#1fab54","katex-greenE":"#0d923f","katex-goldA":"#ffd0a9","katex-goldB":"#ffbb71","katex-goldC":"#ff9c39","katex-goldD":"#e07d10","katex-goldE":"#a75a05","katex-redA":"#fca9a9","katex-redB":"#ff8482","katex-redC":"#f9685d","katex-redD":"#e84d39","katex-redE":"#bc2612","katex-maroonA":"#ffbde0","katex-maroonB":"#ff92c6","katex-maroonC":"#ed5fa6","katex-maroonD":"#ca337c","katex-maroonE":"#9e034e","katex-purpleA":"#ddd7ff","katex-purpleB":"#c6b9fc","katex-purpleC":"#aa87ff","katex-purpleD":"#7854ab","katex-purpleE":"#543b78","katex-mintA":"#f5f9e8","katex-mintB":"#edf2df","katex-mintC":"#e0e5cc","katex-grayA":"#f6f7f7","katex-grayB":"#f0f1f2","katex-grayC":"#e3e5e6","katex-grayD":"#d6d8da","katex-grayE":"#babec2","katex-grayF":"#888d93","katex-grayG":"#626569","katex-grayH":"#3b3e40","katex-grayI":"#21242c","katex-kaBlue":"#314453","katex-kaGreen":"#71B307"};a.prototype.getColor=function(){if(this.phantom){return"transparent"}else{return i[this.color]||this.color}};t.exports=a},{}],9:[function(e,t,r){"use strict";function a(e,t){var r="KaTeX parse error: "+e;var i=void 0;var s=void 0;if(t&&t.lexer&&t.start<=t.end){var n=t.lexer.input;i=t.start;s=t.end;if(i===n.length){r+=" at end of input: "}else{r+=" at position "+(i+1)+": "}var l=n.slice(i,s).replace(/[^]/g,"$&\u0332");var o=void 0;if(i>15){o="\u2026"+n.slice(i-15,i)}else{o=n.slice(0,i)}var u=void 0;if(s+15<n.length){u=n.slice(s,s+15)+"\u2026"}else{u=n.slice(s)}r+=o+l+u}var p=new Error(r);p.name="ParseError";p.__proto__=a.prototype;p.position=i;return p}a.prototype.__proto__=Error.prototype;t.exports=a},{}],10:[function(e,t,r){"use strict";var a=e("./functions");var i=e("./environments");var s=e("./MacroExpander");var n=e("./symbols");var l=e("./utils");var o=e("./unicodeRegexes").cjkRegex;var u=e("./parseData");var p=e("./ParseError");function h(e,t){this.gullet=new s(e,t.macros);this.settings=t;this.leftrightDepth=0}var c=u.ParseNode;function v(e,t,r){this.result=e;this.isFunction=t;this.token=r}h.prototype.expect=function(e,t){if(this.nextToken.text!==e){throw new p("Expected '"+e+"', got '"+this.nextToken.text+"'",this.nextToken)}if(t!==false){this.consume()}};h.prototype.consume=function(){this.nextToken=this.gullet.get(this.mode==="math")};h.prototype.switchMode=function(e){this.gullet.unget(this.nextToken);this.mode=e;this.consume()};h.prototype.parse=function(){this.mode="math";this.consume();var e=this.parseInput();return e};h.prototype.parseInput=function(){var e=this.parseExpression(false);this.expect("EOF",false);return e};var m=["}","\\end","\\right","&","\\\\","\\cr"];h.prototype.parseExpression=function(e,t){var r=[];while(true){var i=this.nextToken;if(m.indexOf(i.text)!==-1){break}if(t&&i.text===t){break}if(e&&a[i.text]&&a[i.text].infix){break}var s=this.parseAtom();if(!s){if(!this.settings.throwOnError&&i.text[0]==="\\"){var n=this.handleUnsupportedCmd();r.push(n);continue}break}r.push(s)}return this.handleInfixNodes(r)};h.prototype.handleInfixNodes=function(e){var t=-1;var r=void 0;for(var a=0;a<e.length;a++){var i=e[a];if(i.type==="infix"){if(t!==-1){throw new p("only one infix operator per group",i.value.token)}t=a;r=i.value.replaceWith}}if(t!==-1){var s=void 0;var n=void 0;var l=e.slice(0,t);var o=e.slice(t+1);if(l.length===1&&l[0].type==="ordgroup"){s=l[0]}else{s=new c("ordgroup",l,this.mode)}if(o.length===1&&o[0].type==="ordgroup"){n=o[0]}else{n=new c("ordgroup",o,this.mode)}var u=this.callFunction(r,[s,n],null);return[new c(u.type,u,this.mode)]}else{return e}};var f=1;h.prototype.handleSupSubscript=function(e){var t=this.nextToken;var r=t.text;this.consume();var i=this.parseGroup();if(!i){if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){return this.handleUnsupportedCmd()}else{throw new p("Expected group after '"+r+"'",t)}}else if(i.isFunction){var s=a[i.result].greediness;if(s>f){return this.parseFunction(i)}else{throw new p("Got function '"+i.result+"' with no arguments "+"as "+e,t)}}else{return i.result}};h.prototype.handleUnsupportedCmd=function(){var e=this.nextToken.text;var t=[];for(var r=0;r<e.length;r++){t.push(new c("textord",e[r],"text"))}var a=new c("text",{body:t,type:"text"},this.mode);var i=new c("color",{color:this.settings.errorColor,value:[a],type:"color"},this.mode);this.consume();return i};h.prototype.parseAtom=function(){var e=this.parseImplicitGroup();if(this.mode==="text"){return e}var t=void 0;var r=void 0;while(true){var a=this.nextToken;if(a.text==="\\limits"||a.text==="\\nolimits"){if(!e||e.type!=="op"){throw new p("Limit controls must follow a math operator",a)}else{var i=a.text==="\\limits";e.value.limits=i;e.value.alwaysHandleSupSub=true}this.consume()}else if(a.text==="^"){if(t){throw new p("Double superscript",a)}t=this.handleSupSubscript("superscript")}else if(a.text==="_"){if(r){throw new p("Double subscript",a)}r=this.handleSupSubscript("subscript")}else if(a.text==="'"){if(t){throw new p("Double superscript",a)}var s=new c("textord","\\prime",this.mode);var n=[s];this.consume();while(this.nextToken.text==="'"){n.push(s);this.consume()}if(this.nextToken.text==="^"){n.push(this.handleSupSubscript("superscript"))}t=new c("ordgroup",n,this.mode)}else{break}}if(t||r){return new c("supsub",{base:e,sup:t,sub:r},this.mode)}else{return e}};var d=["\\tiny","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];var g=["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"];h.prototype.parseImplicitGroup=function(){var e=this.parseSymbol();if(e==null){return this.parseFunction()}var t=e.result;if(t==="\\left"){var r=this.parseFunction(e);++this.leftrightDepth;var a=this.parseExpression(false);--this.leftrightDepth;this.expect("\\right",false);var s=this.parseFunction();return new c("leftright",{body:a,left:r.value.value,right:s.value.value},this.mode)}else if(t==="\\begin"){var n=this.parseFunction(e);var o=n.value.name;if(!i.hasOwnProperty(o)){throw new p("No such environment: "+o,n.value.nameGroup)}var u=i[o];var h=this.parseArguments("\\begin{"+o+"}",u);var v={mode:this.mode,envName:o,parser:this,positions:h.pop()};var m=u.handler(v,h);this.expect("\\end",false);var f=this.nextToken;var y=this.parseFunction();if(y.value.name!==o){throw new p("Mismatch: \\begin{"+o+"} matched "+"by \\end{"+y.value.name+"}",f)}m.position=y.position;return m}else if(l.contains(d,t)){var x=this.parseExpression(false);return new c("sizing",{size:"size"+(l.indexOf(d,t)+1),value:x},this.mode)}else if(l.contains(g,t)){var b=this.parseExpression(true);return new c("styling",{style:t.slice(1,t.length-5),value:b},this.mode)}else{return this.parseFunction(e)}};h.prototype.parseFunction=function(e){if(!e){e=this.parseGroup()}if(e){if(e.isFunction){var t=e.result;var r=a[t];if(this.mode==="text"&&!r.allowedInText){throw new p("Can't use function '"+t+"' in text mode",e.token)}var i=this.parseArguments(t,r);var s=e.token;var n=this.callFunction(t,i,i.pop(),s);return new c(n.type,n,this.mode)}else{return e.result}}else{return null}};h.prototype.callFunction=function(e,t,r,i){var s={funcName:e,parser:this,positions:r,token:i};return a[e].handler(s,t)};h.prototype.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(r===0){return[[this.pos]]}var i=t.greediness;var s=[this.pos];var n=[];for(var l=0;l<r;l++){var o=this.nextToken;var u=t.argTypes&&t.argTypes[l];var h=void 0;if(l<t.numOptionalArgs){if(u){h=this.parseGroupOfType(u,true)}else{h=this.parseGroup(true)}if(!h){n.push(null);s.push(this.pos);continue}}else{if(u){h=this.parseGroupOfType(u)}else{h=this.parseGroup()}if(!h){if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){h=new v(this.handleUnsupportedCmd(this.nextToken.text),false)}else{throw new p("Expected group after '"+e+"'",o)}}}var c=void 0;if(h.isFunction){var m=a[h.result].greediness;if(m>i){c=this.parseFunction(h)}else{throw new p("Got function '"+h.result+"' as "+"argument to '"+e+"'",o)}}else{c=h.result}n.push(c);s.push(this.pos)}n.push(s);return n};h.prototype.parseGroupOfType=function(e,t){var r=this.mode;if(e==="original"){e=r}if(e==="color"){return this.parseColorGroup(t)}if(e==="size"){return this.parseSizeGroup(t)}if(e==="string"){var a=this.parseStringGroup("string",t);return new v(a.text,false)}this.switchMode(e);if(e==="text"){while(this.nextToken.text===" "){this.consume()}}var i=this.parseGroup(t);this.switchMode(r);return i};h.prototype.parseStringGroup=function(e,t){if(t&&this.nextToken.text!=="["){return null}var r=this.mode;this.mode="text";this.expect(t?"[":"{");var a="";var i=this.nextToken;var s=i;while(this.nextToken.text!==(t?"]":"}")){if(this.nextToken.text==="EOF"){throw new p("Unexpected end of input in "+e,i.range(this.nextToken,a))}s=this.nextToken;a+=s.text;this.consume()}this.mode=r;this.expect(t?"]":"}");return i.range(s,a)};h.prototype.parseRegexGroup=function(e,t){var r=this.mode;this.mode="text";var a=this.nextToken;var i=a;var s="";while(this.nextToken.text!=="EOF"&&e.test(s+this.nextToken.text)){i=this.nextToken;s+=i.text;this.consume()}if(s===""){throw new p("Invalid "+t+": '"+a.text+"'",a)}this.mode=r;return a.range(i,s)};h.prototype.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(!t){return null}var r=/^(#[a-z0-9]+|[a-z]+)$/i.exec(t.text);if(!r){throw new p("Invalid color: '"+t.text+"'",t)}return new v(new c("color",r[0],this.mode),false)};h.prototype.parseSizeGroup=function(e){var t=void 0;if(!e&&this.nextToken.text!=="{"){t=this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2}$/,"size")}else{t=this.parseStringGroup("size",e)}if(!t){return null}var r=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!r){throw new p("Invalid size: '"+t.text+"'",t)}var a={number:+(r[1]+r[2]),unit:r[3]};if(a.unit!=="em"&&a.unit!=="ex"&&a.unit!=="mu"){throw new p("Invalid unit: '"+a.unit+"'",t)}return new v(new c("color",a,this.mode),false)};h.prototype.parseGroup=function(e){var t=this.nextToken;if(this.nextToken.text===(e?"[":"{")){this.consume();var r=this.parseExpression(false,e?"]":null);var a=this.nextToken;this.expect(e?"]":"}");if(this.mode==="text"){this.formLigatures(r)}return new v(new c("ordgroup",r,this.mode,t,a),false)}else{return e?null:this.parseSymbol()}};h.prototype.formLigatures=function(e){var t=e.length-1;for(var r=0;r<t;++r){var a=e[r];var i=a.value;if(i==="-"&&e[r+1].value==="-"){if(r+1<t&&e[r+2].value==="-"){e.splice(r,3,new c("textord","---","text",a,e[r+2]));t-=2}else{e.splice(r,2,new c("textord","--","text",a,e[r+1]));t-=1}}if((i==="'"||i==="`")&&e[r+1].value===i){e.splice(r,2,new c("textord",i+i,"text",a,e[r+1]));t-=1}}};h.prototype.parseSymbol=function(){var e=this.nextToken;if(a[e.text]){this.consume();return new v(e.text,true,e)}else if(n[this.mode][e.text]){this.consume();return new v(new c(n[this.mode][e.text].group,e.text,this.mode,e),false,e)}else if(this.mode==="text"&&o.test(e.text)){this.consume();return new v(new c("textord",e.text,this.mode,e),false,e)}else{return null}};h.prototype.ParseNode=c;t.exports=h},{"./MacroExpander":7,"./ParseError":9,"./environments":19,"./functions":22,"./parseData":24,"./symbols":26,"./unicodeRegexes":27,"./utils":28}],11:[function(e,t,r){"use strict";var a=e("./utils");function i(e){e=e||{};this.displayMode=a.deflt(e.displayMode,false);this.throwOnError=a.deflt(e.throwOnError,true);this.errorColor=a.deflt(e.errorColor,"#cc0000");this.macros=e.macros||{}}t.exports=i},{"./utils":28}],12:[function(e,t,r){"use strict";var a=e("./fontMetrics.js").sigmas;var i=[{},{},{}];for(var s in a){if(a.hasOwnProperty(s)){for(var n=0;n<3;n++){i[n][s]=a[s][n]}}}for(var l=0;l<3;l++){i[l].emPerEx=a.xHeight[l]/a.quad[l]}function o(e,t,r,a){this.id=e;this.size=t;this.cramped=a;this.sizeMultiplier=r;this.metrics=i[t>0?t-1:0]}o.prototype.sup=function(){return x[b[this.id]]};o.prototype.sub=function(){return x[w[this.id]]};o.prototype.fracNum=function(){return x[k[this.id]]};o.prototype.fracDen=function(){return x[z[this.id]]};o.prototype.cramp=function(){return x[S[this.id]]};o.prototype.cls=function(){return g[this.size]+(this.cramped?" cramped":" uncramped")};o.prototype.reset=function(){return y[this.size]};o.prototype.isTight=function(){return this.size>=2};var u=0;var p=1;var h=2;var c=3;var v=4;var m=5;var f=6;var d=7;var g=["displaystyle textstyle","textstyle","scriptstyle","scriptscriptstyle"];var y=["reset-textstyle","reset-textstyle","reset-scriptstyle","reset-scriptscriptstyle"];var x=[new o(u,0,1,false),new o(p,0,1,true),new o(h,1,1,false),new o(c,1,1,true),new o(v,2,.7,false),new o(m,2,.7,true),new o(f,3,.5,false),new o(d,3,.5,true)];var b=[v,m,v,m,f,d,f,d];var w=[m,m,m,m,d,d,d,d];var k=[h,c,v,m,f,d,f,d];var z=[c,c,m,m,d,d,d,d];var S=[p,p,c,c,m,m,d,d];t.exports={DISPLAY:x[u],TEXT:x[h],SCRIPT:x[v],SCRIPTSCRIPT:x[f]}},{"./fontMetrics.js":20}],13:[function(e,t,r){"use strict";var a=e("./domTree");var i=e("./fontMetrics");var s=e("./symbols");var n=e("./utils");var l=["\\imath","\\jmath","\\pounds"];var o=function e(t,r,a){if(s[a][t]&&s[a][t].replace){t=s[a][t].replace}return{value:t,metrics:i.getCharacterMetrics(t,r)}};var u=function e(t,r,i,s,n){var l=o(t,r,i);var u=l.metrics;t=l.value;var p=void 0;if(u){var h=u.italic;if(i==="text"){h=0}p=new a.symbolNode(t,u.height,u.depth,h,u.skew,n)}else{typeof console!=="undefined"&&console.warn("No character metrics for '"+t+"' in style '"+r+"'");p=new a.symbolNode(t,0,0,0,0,n)}if(s){if(s.style.isTight()){p.classes.push("mtight")}if(s.getColor()){p.style.color=s.getColor()}}return p};var p=function e(t,r,a,i){if(t==="\\"||s[r][t].font==="main"){return u(t,"Main-Regular",r,a,i)}else{return u(t,"AMS-Regular",r,a,i.concat(["amsrm"]))}};var h=function e(t,r,a,i,n){if(n==="mathord"){var l=c(t,r,a,i);return u(t,l.fontName,r,a,i.concat([l.fontClass]))}else if(n==="textord"){var o=s[r][t]&&s[r][t].font;if(o==="ams"){return u(t,"AMS-Regular",r,a,i.concat(["amsrm"]))}else{return u(t,"Main-Regular",r,a,i.concat(["mathrm"]))}}else{throw new Error("unexpected type: "+n+" in mathDefault")}};var c=function e(t,r,a,i){if(/[0-9]/.test(t.charAt(0))||n.contains(l,t)){return{fontName:"Main-Italic",fontClass:"mainit"}}else{return{fontName:"Math-Italic",fontClass:"mathit"}}};var v=function e(t,r,a){var i=t.mode;var s=t.value;var p=["mord"];var v=r.font;if(v){var m=void 0;if(v==="mathit"||n.contains(l,s)){m=c(s,i,r,p)}else{m=k[v]}if(o(s,m.fontName,i).metrics){return u(s,m.fontName,i,r,p.concat([m.fontClass||v]))}else{return h(s,i,r,p,a)}}else{return h(s,i,r,p,a)}};var m=function e(t){var r=0;var a=0;var i=0;if(t.children){for(var s=0;s<t.children.length;s++){if(t.children[s].height>r){r=t.children[s].height}if(t.children[s].depth>a){a=t.children[s].depth}if(t.children[s].maxFontSize>i){i=t.children[s].maxFontSize}}}t.height=r;t.depth=a;t.maxFontSize=i};var f=function e(t,r,i){var s=new a.span(t,r,i);m(s);return s};var d=function e(t,r){t.children=r.concat(t.children);m(t)};var g=function e(t,r){var i=new a.documentFragment(t,r);m(i);return i};var y=function e(t,r){var i=f([],[new a.symbolNode("\u200b")]);i.style.fontSize=r/t.style.sizeMultiplier+"em";var s=f(["fontsize-ensurer","reset-"+t.size,"size5"],[i]);return s};var x=function e(t,r,i,s){var n=void 0;var l=void 0;var o=void 0;if(r==="individualShift"){var u=t;t=[u[0]];n=-u[0].shift-u[0].elem.depth;l=n;for(o=1;o<u.length;o++){var p=-u[o].shift-l-u[o].elem.depth;var h=p-(u[o-1].elem.height+u[o-1].elem.depth);l=l+p;t.push({type:"kern",size:h});t.push(u[o])}}else if(r==="top"){var c=i;for(o=0;o<t.length;o++){if(t[o].type==="kern"){c-=t[o].size}else{c-=t[o].elem.height+t[o].elem.depth}}n=c}else if(r==="bottom"){n=-i}else if(r==="shift"){n=-t[0].elem.depth-i}else if(r==="firstBaseline"){n=-t[0].elem.depth}else{n=0}var v=0;for(o=0;o<t.length;o++){if(t[o].type==="elem"){v=Math.max(v,t[o].elem.maxFontSize)}}var m=y(s,v);var d=[];l=n;for(o=0;o<t.length;o++){if(t[o].type==="kern"){l+=t[o].size}else{var g=t[o].elem;var x=-g.depth-l;l+=g.height+g.depth;var b=f([],[m,g]);b.height-=x;b.depth+=x;b.style.top=x+"em";d.push(b)}}var w=f(["baseline-fix"],[m,new a.symbolNode("\u200b")]);d.push(w);var k=f(["vlist"],d);k.height=Math.max(l,k.height);k.depth=Math.max(-n,k.depth);return k};var b={size1:.5,size2:.7,size3:.8,size4:.9,size5:1,size6:1.2,size7:1.44,size8:1.73,size9:2.07,size10:2.49};var w={"\\qquad":{size:"2em",className:"qquad"},"\\quad":{size:"1em",className:"quad"},"\\enspace":{size:"0.5em",className:"enspace"},"\\;":{size:"0.277778em",className:"thickspace"},"\\:":{size:"0.22222em",className:"mediumspace"},"\\,":{size:"0.16667em",className:"thinspace"},"\\!":{size:"-0.16667em",className:"negativethinspace"}};var k={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}};t.exports={fontMap:k,makeSymbol:u,mathsym:p,makeSpan:f,makeFragment:g,makeVList:x,makeOrd:v,prependChildren:d,sizingMultiplier:b,spacingFunctions:w}},{"./domTree":18,"./fontMetrics":20,"./symbols":26,"./utils":28}],14:[function(e,t,r){"use strict";var a=e("babel-runtime/core-js/json/stringify");var i=s(a);function s(e){return e&&e.__esModule?e:{default:e}}var n=e("./ParseError");var l=e("./Style");var o=e("./buildCommon");var u=e("./delimiter");var p=e("./domTree");var h=e("./fontMetrics");var c=e("./utils");var v=o.makeSpan;var m=function e(t){return t instanceof p.span&&t.classes[0]==="mspace"};var f=function e(t){return t&&t.classes[0]==="mbin"};var d=function e(t,r){if(t){return c.contains(["mbin","mopen","mrel","mop","mpunct"],t.classes[0])}else{return r}};var g=function e(t,r){if(t){return c.contains(["mrel","mclose","mpunct"],t.classes[0])}else{return r}};var y=function e(t,r,a){var i=[];for(var s=0;s<t.length;s++){var n=t[s];var l=T(n,r);if(l instanceof p.documentFragment){Array.prototype.push.apply(i,l.children)}else{i.push(l)}}var u=null;for(var h=0;h<i.length;h++){if(m(i[h])){u=u||[];u.push(i[h]);i.splice(h,1);h--}else if(u){if(i[h]instanceof p.symbolNode){i[h]=v([].concat(i[h].classes),[i[h]])}o.prependChildren(i[h],u);u=null}}if(u){Array.prototype.push.apply(i,u)}for(var c=0;c<i.length;c++){if(f(i[c])&&(d(i[c-1],a)||g(i[c+1],a))){i[c].classes[0]="mord"}}return i};var x=function e(t){if(t instanceof p.documentFragment){if(t.children.length){return e(t.children[t.children.length-1])}}else{if(c.contains(["mord","mop","mbin","mrel","mopen","mclose","mpunct","minner"],t.classes[0])){return t.classes[0]}}return null};var b=function e(t,r){if(!t){return false}else if(t.type==="op"){return t.value.limits&&(r.style.size===l.DISPLAY.size||t.value.alwaysHandleSupSub)}else if(t.type==="accent"){return k(t.value.base)}else{return null}};var w=function e(t){if(!t){return false}else if(t.type==="ordgroup"){if(t.value.length===1){return e(t.value[0])}else{return t}}else if(t.type==="color"){if(t.value.value.length===1){return e(t.value.value[0])}else{return t}}else if(t.type==="font"){return e(t.value.body)}else{return t}};var k=function e(t){var r=w(t);return r.type==="mathord"||r.type==="textord"||r.type==="bin"||r.type==="rel"||r.type==="inner"||r.type==="open"||r.type==="close"||r.type==="punct"};var z=function e(t,r){return v(r.concat(["sizing","reset-"+t.size,"size5",t.style.reset(),l.TEXT.cls(),"nulldelimiter"]))};var S={};S.mathord=function(e,t){return o.makeOrd(e,t,"mathord")};S.textord=function(e,t){return o.makeOrd(e,t,"textord")};S.bin=function(e,t,r){return o.mathsym(e.value,e.mode,t,["mbin"])};S.rel=function(e,t){return o.mathsym(e.value,e.mode,t,["mrel"])};S.open=function(e,t){return o.mathsym(e.value,e.mode,t,["mopen"])};S.close=function(e,t){return o.mathsym(e.value,e.mode,t,["mclose"])};S.inner=function(e,t){return o.mathsym(e.value,e.mode,t,["minner"])};S.punct=function(e,t){return o.mathsym(e.value,e.mode,t,["mpunct"])};S.ordgroup=function(e,t){return v(["mord",t.style.cls()],y(e.value,t.reset(),true),t)};S.text=function(e,t){var r=t.withFont(e.value.style);var a=y(e.value.body,r,true);for(var i=0;i<a.length-1;i++){if(a[i].tryCombine(a[i+1])){a.splice(i+1,1);i--}}return v(["mord","text",r.style.cls()],a,r)};S.xmlClass=function(e,t,r){var a=y(e.value.value,t.reset(),r);return new o.makeFragment(a,[e.value.cl])};S.color=function(e,t,r){var a=y(e.value.value,t.withColor(e.value.color),false);return new o.makeFragment(a)};S.supsub=function(e,t){if(b(e.value.base,t)){return S[e.value.base.type](e,t)}var r=T(e.value.base,t.reset());var a=void 0;var i=void 0;var s=void 0;var n=void 0;var u=t.style;var c=void 0;if(e.value.sup){c=t.withStyle(u.sup());s=T(e.value.sup,c);a=v([u.reset(),u.sup().cls()],[s],c)}if(e.value.sub){c=t.withStyle(u.sub());n=T(e.value.sub,c);i=v([u.reset(),u.sub().cls()],[n],c)}var m=void 0;var f=void 0;if(k(e.value.base)){m=0;f=0}else{m=r.height-u.metrics.supDrop;f=r.depth+u.metrics.subDrop}var d=void 0;if(u===l.DISPLAY){d=u.metrics.sup1}else if(u.cramped){d=u.metrics.sup3}else{d=u.metrics.sup2}var g=l.TEXT.sizeMultiplier*u.sizeMultiplier;var y=.5/h.metrics.ptPerEm/g+"em";var w=void 0;if(!e.value.sup){f=Math.max(f,u.metrics.sub1,n.height-.8*u.metrics.xHeight);w=o.makeVList([{type:"elem",elem:i}],"shift",f,t);w.children[0].style.marginRight=y;if(r instanceof p.symbolNode){w.children[0].style.marginLeft=-r.italic+"em"}}else if(!e.value.sub){m=Math.max(m,d,s.depth+.25*u.metrics.xHeight);w=o.makeVList([{type:"elem",elem:a}],"shift",-m,t);w.children[0].style.marginRight=y}else{m=Math.max(m,d,s.depth+.25*u.metrics.xHeight);f=Math.max(f,u.metrics.sub2);var z=h.metrics.defaultRuleThickness;if(m-s.depth-(n.height-f)<4*z){f=4*z-(m-s.depth)+n.height;var M=.8*u.metrics.xHeight-(m-s.depth);if(M>0){m+=M;f-=M}}w=o.makeVList([{type:"elem",elem:i,shift:f},{type:"elem",elem:a,shift:-m}],"individualShift",null,t);if(r instanceof p.symbolNode){w.children[0].style.marginLeft=-r.italic+"em"}w.children[0].style.marginRight=y;w.children[1].style.marginRight=y}var A=x(r)||"mord";return v([A],[r,v(["msupsub"],[w])],t)};S.genfrac=function(e,t){var r=t.style;if(e.value.size==="display"){r=l.DISPLAY}else if(e.value.size==="text"){r=l.TEXT}var a=r.fracNum();var i=r.fracDen();var s=void 0;s=t.withStyle(a);var n=T(e.value.numer,s);var p=v([r.reset(),a.cls()],[n],s);s=t.withStyle(i);var c=T(e.value.denom,s);var m=v([r.reset(),i.cls()],[c],s);var f=void 0;if(e.value.hasBarLine){f=h.metrics.defaultRuleThickness/t.style.sizeMultiplier}else{f=0}var d=void 0;var g=void 0;var y=void 0;if(r.size===l.DISPLAY.size){d=r.metrics.num1;if(f>0){g=3*f}else{g=7*h.metrics.defaultRuleThickness}y=r.metrics.denom1}else{if(f>0){d=r.metrics.num2;g=f}else{d=r.metrics.num3;g=3*h.metrics.defaultRuleThickness}y=r.metrics.denom2}var x=void 0;if(f===0){var b=d-n.depth-(c.height-y);if(b<g){d+=.5*(g-b);y+=.5*(g-b)}x=o.makeVList([{type:"elem",elem:m,shift:y},{type:"elem",elem:p,shift:-d}],"individualShift",null,t)}else{var w=r.metrics.axisHeight;if(d-n.depth-(w+.5*f)<g){d+=g-(d-n.depth-(w+.5*f))}if(w-.5*f-(c.height-y)<g){y+=g-(w-.5*f-(c.height-y))}var k=v([t.style.reset(),l.TEXT.cls(),"frac-line"]);k.height=f;var S=-(w-.5*f);x=o.makeVList([{type:"elem",elem:m,shift:y},{type:"elem",elem:k,shift:S},{type:"elem",elem:p,shift:-d}],"individualShift",null,t)}x.height*=r.sizeMultiplier/t.style.sizeMultiplier;x.depth*=r.sizeMultiplier/t.style.sizeMultiplier;var M=void 0;if(r.size===l.DISPLAY.size){M=r.metrics.delim1}else{M=r.metrics.delim2}var A=void 0;var N=void 0;if(e.value.leftDelim==null){A=z(t,["mopen"])}else{A=u.customSizedDelim(e.value.leftDelim,M,true,t.withStyle(r),e.mode,["mopen"])}if(e.value.rightDelim==null){N=z(t,["mclose"])}else{N=u.customSizedDelim(e.value.rightDelim,M,true,t.withStyle(r),e.mode,["mclose"])}return v(["mord",t.style.reset(),r.cls()],[A,v(["mfrac"],[x]),N],t)};var M=function e(t,r){var a=t.number;if(t.unit==="ex"){a*=r.metrics.emPerEx}else if(t.unit==="mu"){a/=18}return a};S.array=function(e,t){var r=void 0;var a=void 0;var i=e.value.body.length;var s=0;var l=new Array(i);var u=t.style;var p=1/h.metrics.ptPerEm;var m=5*p;var f=12*p;var d=c.deflt(e.value.arraystretch,1);var g=d*f;var y=.7*g;var x=.3*g;var b=0;for(r=0;r<e.value.body.length;++r){var w=e.value.body[r];var k=y;var z=x;if(s<w.length){s=w.length}var S=new Array(w.length);for(a=0;a<w.length;++a){var A=T(w[a],t);if(z<A.depth){z=A.depth}if(k<A.height){k=A.height}S[a]=A}var N=0;if(e.value.rowGaps[r]){N=M(e.value.rowGaps[r].value,u);if(N>0){N+=x;if(z<N){z=N}N=0}}S.height=k;S.depth=z;b+=k;S.pos=b;b+=z+N;l[r]=S}var q=b/2+u.metrics.axisHeight;var R=e.value.cols||[];var C=[];var E=void 0;var D=void 0;for(a=0,D=0;a<s||D<R.length;++a,++D){var O=R[D]||{};var P=true;while(O.type==="separator"){if(!P){E=v(["arraycolsep"],[]);E.style.width=h.metrics.doubleRuleSep+"em";C.push(E)}if(O.separator==="|"){var F=v(["vertical-separator"],[]);F.style.height=b+"em";F.style.verticalAlign=-(b-q)+"em";C.push(F)}else{throw new n("Invalid separator type: "+O.separator)}D++;O=R[D]||{};P=false}if(a>=s){continue}var I=void 0;if(a>0||e.value.hskipBeforeAndAfter){I=c.deflt(O.pregap,m);if(I!==0){E=v(["arraycolsep"],[]);E.style.width=I+"em";C.push(E)}}var L=[];for(r=0;r<i;++r){var B=l[r];var G=B[a];if(!G){continue}var _=B.pos-q;G.depth=B.depth;G.height=B.height;L.push({type:"elem",elem:G,shift:_})}L=o.makeVList(L,"individualShift",null,t);L=v(["col-align-"+(O.align||"c")],[L]);C.push(L);if(a<s-1||e.value.hskipBeforeAndAfter){I=c.deflt(O.postgap,m);if(I!==0){E=v(["arraycolsep"],[]);E.style.width=I+"em";C.push(E)}}}l=v(["mtable"],C);return v(["mord"],[l],t)};S.spacing=function(e,t){if(e.value==="\\ "||e.value==="\\space"||e.value===" "||e.value==="~"){if(e.mode==="text"){return o.makeOrd(e,t,"textord")}else{return v(["mspace"],[o.mathsym(e.value,e.mode,t)],t)}}else{return v(["mspace",o.spacingFunctions[e.value].className],[],t)}};S.llap=function(e,t){var r=v(["inner"],[T(e.value.body,t.reset())]);var a=v(["fix"],[]);return v(["mord","llap",t.style.cls()],[r,a],t)};S.rlap=function(e,t){var r=v(["inner"],[T(e.value.body,t.reset())]);var a=v(["fix"],[]);return v(["mord","rlap",t.style.cls()],[r,a],t)};S.op=function(e,t){var r=void 0;var a=void 0;var i=false;if(e.type==="supsub"){r=e.value.sup;a=e.value.sub;
e=e.value.base;i=true}var s=t.style;var n=["\\smallint"];var u=false;if(s.size===l.DISPLAY.size&&e.value.symbol&&!c.contains(n,e.value.body)){u=true}var p=void 0;var m=0;var f=0;if(e.value.symbol){var d=u?"Size2-Regular":"Size1-Regular";p=o.makeSymbol(e.value.body,d,"math",t,["mop","op-symbol",u?"large-op":"small-op"]);m=(p.height-p.depth)/2-s.metrics.axisHeight*s.sizeMultiplier;f=p.italic}else if(e.value.value){var g=y(e.value.value,t,true);p=v(["mop"],g,t)}else{var x=[];for(var b=1;b<e.value.body.length;b++){x.push(o.mathsym(e.value.body[b],e.mode))}p=v(["mop"],x,t)}if(i){p=v([],[p]);var w=void 0;var k=void 0;var z=void 0;var S=void 0;var M=void 0;if(r){M=t.withStyle(s.sup());var A=T(r,M);w=v([s.reset(),s.sup().cls()],[A],M);k=Math.max(h.metrics.bigOpSpacing1,h.metrics.bigOpSpacing3-A.depth)}if(a){M=t.withStyle(s.sub());var N=T(a,M);z=v([s.reset(),s.sub().cls()],[N],M);S=Math.max(h.metrics.bigOpSpacing2,h.metrics.bigOpSpacing4-N.height)}var q=void 0;var R=void 0;var C=void 0;if(!r){R=p.height-m;q=o.makeVList([{type:"kern",size:h.metrics.bigOpSpacing5},{type:"elem",elem:z},{type:"kern",size:S},{type:"elem",elem:p}],"top",R,t);q.children[0].style.marginLeft=-f+"em"}else if(!a){C=p.depth+m;q=o.makeVList([{type:"elem",elem:p},{type:"kern",size:k},{type:"elem",elem:w},{type:"kern",size:h.metrics.bigOpSpacing5}],"bottom",C,t);q.children[1].style.marginLeft=f+"em"}else if(!r&&!a){return p}else{C=h.metrics.bigOpSpacing5+z.height+z.depth+S+p.depth+m;q=o.makeVList([{type:"kern",size:h.metrics.bigOpSpacing5},{type:"elem",elem:z},{type:"kern",size:S},{type:"elem",elem:p},{type:"kern",size:k},{type:"elem",elem:w},{type:"kern",size:h.metrics.bigOpSpacing5}],"bottom",C,t);q.children[0].style.marginLeft=-f+"em";q.children[2].style.marginLeft=f+"em"}return v(["mop","op-limits"],[q],t)}else{if(e.value.symbol){p.style.top=m+"em"}return p}};S.mod=function(e,t){var r=[];if(e.value.modType==="bmod"){if(!t.style.isTight()){r.push(v(["mspace","negativemediumspace"],[],t))}r.push(v(["mspace","thickspace"],[],t))}else if(t.style.size===l.DISPLAY.size){r.push(v(["mspace","quad"],[],t))}else if(e.value.modType==="mod"){r.push(v(["mspace","twelvemuspace"],[],t))}else{r.push(v(["mspace","eightmuspace"],[],t))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(o.mathsym("(",e.mode))}if(e.value.modType!=="pod"){var a=[o.mathsym("m",e.mode),o.mathsym("o",e.mode),o.mathsym("d",e.mode)];if(e.value.modType==="bmod"){r.push(v(["mbin"],a,t));r.push(v(["mspace","thickspace"],[],t));if(!t.style.isTight()){r.push(v(["mspace","negativemediumspace"],[],t))}}else{Array.prototype.push.apply(r,a);r.push(v(["mspace","sixmuspace"],[],t))}}if(e.value.value){Array.prototype.push.apply(r,y(e.value.value,t,false))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(o.mathsym(")",e.mode))}return o.makeFragment(r)};S.katex=function(e,t){var r=v(["k"],[o.mathsym("K",e.mode)],t);var a=v(["a"],[o.mathsym("A",e.mode)],t);a.height=(a.height+.2)*.75;a.depth=(a.height-.2)*.75;var i=v(["t"],[o.mathsym("T",e.mode)],t);var s=v(["e"],[o.mathsym("E",e.mode)],t);s.height=s.height-.2155;s.depth=s.depth+.2155;var n=v(["x"],[o.mathsym("X",e.mode)],t);return v(["mord","katex-logo"],[r,a,i,s,n],t)};S.overline=function(e,t){var r=t.style;var a=T(e.value.body,t.withStyle(r.cramp()));var i=h.metrics.defaultRuleThickness/r.sizeMultiplier;var s=v([r.reset(),l.TEXT.cls(),"overline-line"]);s.height=i;s.maxFontSize=1;var n=o.makeVList([{type:"elem",elem:a},{type:"kern",size:3*i},{type:"elem",elem:s},{type:"kern",size:i}],"firstBaseline",null,t);return v(["mord","overline"],[n],t)};S.underline=function(e,t){var r=t.style;var a=T(e.value.body,t);var i=h.metrics.defaultRuleThickness/r.sizeMultiplier;var s=v([r.reset(),l.TEXT.cls(),"underline-line"]);s.height=i;s.maxFontSize=1;var n=o.makeVList([{type:"kern",size:i},{type:"elem",elem:s},{type:"kern",size:3*i},{type:"elem",elem:a}],"top",a.height,t);return v(["mord","underline"],[n],t)};S.sqrt=function(e,t){var r=t.style;var a=T(e.value.body,t.withStyle(r.cramp()));var i=h.metrics.defaultRuleThickness/r.sizeMultiplier;var s=v([r.reset(),l.TEXT.cls(),"sqrt-line"],[],t);s.height=i;s.maxFontSize=1;var n=i;if(r.id<l.TEXT.id){n=r.metrics.xHeight}var p=i+n/4;var c=(a.height+a.depth)*r.sizeMultiplier;var m=c+p+i;var f=v(["sqrt-sign"],[u.customSizedDelim("\\surd",m,false,t,e.mode)],t);var d=f.height+f.depth-i;if(d>a.height+a.depth+p){p=(p+d-a.height-a.depth)/2}var g=-(a.height+p+i)+f.height;f.style.top=g+"em";f.height-=g;f.depth+=g;var y=void 0;if(a.height===0&&a.depth===0){y=v()}else{y=o.makeVList([{type:"elem",elem:a},{type:"kern",size:p},{type:"elem",elem:s},{type:"kern",size:i}],"firstBaseline",null,t)}if(!e.value.index){return v(["mord","sqrt"],[f,y],t)}else{var x=t.withStyle(l.SCRIPTSCRIPT);var b=T(e.value.index,x);var w=v([r.reset(),l.SCRIPTSCRIPT.cls()],[b],x);var k=Math.max(f.height,y.height);var z=Math.max(f.depth,y.depth);var S=.6*(k-z);var M=o.makeVList([{type:"elem",elem:w}],"shift",-S,t);var A=v(["root"],[M]);return v(["mord","sqrt"],[A,f,y],t)}};S.sizing=function(e,t){var r=y(e.value.value,t.withSize(e.value.size),false);var a=t.style;var i=o.sizingMultiplier[e.value.size]*a.sizeMultiplier;for(var s=0;s<r.length;s++){var n=c.indexOf(r[s].classes,"sizing");if(n<0){r[s].classes.push("sizing","reset-"+t.size,e.value.size,a.cls());r[s].maxFontSize=i}else if(r[s].classes[n+1]==="reset-"+e.value.size){r[s].classes[n+1]="reset-"+t.size}}return o.makeFragment(r)};S.styling=function(e,t){var r={display:l.DISPLAY,text:l.TEXT,script:l.SCRIPT,scriptscript:l.SCRIPTSCRIPT};var a=r[e.value.style];var i=t.withStyle(a);var s=y(e.value.value,i,false);for(var n=0;n<s.length;n++){var u=c.indexOf(s[n].classes,a.reset());if(u<0){s[n].classes.push(t.style.reset(),a.cls())}else{s[n].classes[u]=t.style.reset()}}return new o.makeFragment(s)};S.font=function(e,t){var r=e.value.font;return T(e.value.body,t.withFont(r))};S.delimsizing=function(e,t){var r=e.value.value;if(r==="."){return v([e.value.mclass])}return u.sizedDelim(r,e.value.size,t,e.mode,[e.value.mclass])};S.leftright=function(e,t){var r=y(e.value.body,t.reset(),true);var a=0;var i=0;var s=false;for(var n=0;n<r.length;n++){if(r[n].isMiddle){s=true}else{a=Math.max(r[n].height,a);i=Math.max(r[n].depth,i)}}var l=t.style;a*=l.sizeMultiplier;i*=l.sizeMultiplier;var o=void 0;if(e.value.left==="."){o=z(t,["mopen"])}else{o=u.leftRightDelim(e.value.left,a,i,t,e.mode,["mopen"])}r.unshift(o);if(s){for(var p=1;p<r.length;p++){if(r[p].isMiddle){r[p]=u.leftRightDelim(r[p].isMiddle.value,a,i,r[p].isMiddle.options,e.mode,[])}}}var h=void 0;if(e.value.right==="."){h=z(t,["mclose"])}else{h=u.leftRightDelim(e.value.right,a,i,t,e.mode,["mclose"])}r.push(h);return v(["minner",l.cls()],r,t)};S.cursor=function(e,t,r){var a=v(["cursor"],[],t);var i=t.style;var s=0;if(e.value.shift){s=e.value.shift.number;if(e.value.shift.unit==="ex"){s*=i.metrics.xHeight}}var n=e.value.height.number;if(e.value.height.unit==="ex"){n*=i.metrics.xHeight}s/=t.style.sizeMultiplier;n/=t.style.sizeMultiplier;a.style.marginRight="-1px";a.style.borderRight="1px solid";a.style.marginBottom=s+"em";a.style.height=n+"em";a.width=1;a.height=n+s;a.depth=-s;e.value.previous=r;return a};S.middle=function(e,t){var r=void 0;if(e.value.value==="."){r=z(t,[])}else{r=u.sizedDelim(e.value.value,1,t,e.mode,[]);r.isMiddle={value:e.value.value,options:t}}return r};S.rule=function(e,t,r){var a=v(["mord","rule"],[],t);var i=t.style;var s=0;if(e.value.shift){s=M(e.value.shift,i)}var n=M(e.value.width,i);var l=M(e.value.height,i);s/=i.sizeMultiplier;n/=i.sizeMultiplier;l/=i.sizeMultiplier;a.style.borderRightWidth=n+"em";a.style.borderTopWidth=l+"em";a.style.bottom=s+"em";a.width=n;a.height=l+s;a.depth=-s;return a};S.kern=function(e,t){var r=v(["mord","rule"],[],t);var a=t.style;var i=0;if(e.value.dimension){i=M(e.value.dimension,a)}i/=a.sizeMultiplier;r.style.marginLeft=i+"em";return r};S.accent=function(e,t){var r=e.value.base;var a=t.style;var i=void 0;if(e.type==="supsub"){var s=e;e=s.value.base;r=e.value.base;s.value.base=r;i=T(s,t.reset())}var n=T(r,t.withStyle(a.cramp()));var l=0;if(k(r)){var u=w(r);var p=T(u,t.withStyle(a.cramp()));l=p.skew}var h=Math.min(n.height,a.metrics.xHeight);var c=o.makeSymbol(e.value.accent,"Main-Regular","math",t);c.italic=0;var m=e.value.accent==="\\vec"?"accent-vec":null;var f=v(["accent-body",m],[v([],[c])]);f=o.makeVList([{type:"elem",elem:n},{type:"kern",size:-h},{type:"elem",elem:f}],"firstBaseline",null,t);f.children[1].style.marginLeft=2*l+"em";var d=v(["mord","accent"],[f],t);if(i){i.children[0]=d;i.height=Math.max(d.height,i.height);i.classes[0]="mord";return i}else{return d}};S.phantom=function(e,t){var r=y(e.value.value,t.withPhantom(),false);return new o.makeFragment(r)};S.mclass=function(e,t){var r=y(e.value.value,t,true);return v([e.value.mclass],r,t)};var T=function e(t,r){if(!t){return v()}if(S[t.type]){var a=S[t.type](t,r);var i=void 0;if(r.style!==r.parentStyle){i=r.style.sizeMultiplier/r.parentStyle.sizeMultiplier;a.height*=i;a.depth*=i}if(r.size!==r.parentSize){i=o.sizingMultiplier[r.size]/o.sizingMultiplier[r.parentSize];a.height*=i;a.depth*=i}return a}else{throw new n("Got group of unknown type: '"+t.type+"'")}};var A=function e(t,r){t=JSON.parse((0,i.default)(t));var a=y(t,r,true);var s=v(["base",r.style.cls()],a,r);var n=v(["strut"]);var l=v(["strut","bottom"]);n.style.height=s.height+"em";l.style.height=s.height+s.depth+"em";l.style.verticalAlign=-s.depth+"em";var o=v(["katex-html"],[n,l,s]);o.setAttribute("aria-hidden","true");return o};t.exports=A},{"./ParseError":9,"./Style":12,"./buildCommon":13,"./delimiter":17,"./domTree":18,"./fontMetrics":20,"./utils":28,"babel-runtime/core-js/json/stringify":2}],15:[function(e,t,r){"use strict";var a=e("./buildCommon");var i=e("./fontMetrics");var s=e("./mathMLTree");var n=e("./ParseError");var l=e("./symbols");var o=e("./utils");var u=a.makeSpan;var p=a.fontMap;var h=function e(t,r){if(l[r][t]&&l[r][t].replace){t=l[r][t].replace}return new s.TextNode(t)};var c=function e(t,r){var a=r.font;if(!a){return null}var s=t.mode;if(a==="mathit"){return"italic"}var n=t.value;if(o.contains(["\\imath","\\jmath"],n)){return null}if(l[s][n]&&l[s][n].replace){n=l[s][n].replace}var u=p[a].fontName;if(i.getCharacterMetrics(n,u)){return p[r.font].variant}return null};var v={};v.mathord=function(e,t){var r=new s.MathNode("mi",[h(e.value,e.mode)]);var a=c(e,t);if(a){r.setAttribute("mathvariant",a)}return r};v.textord=function(e,t){var r=h(e.value,e.mode);var a=c(e,t)||"normal";var i=void 0;if(/[0-9]/.test(e.value)){i=new s.MathNode("mn",[r]);if(t.font){i.setAttribute("mathvariant",a)}}else{i=new s.MathNode("mi",[r]);i.setAttribute("mathvariant",a)}return i};v.bin=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);return t};v.rel=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);return t};v.open=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);return t};v.close=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);return t};v.inner=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);return t};v.punct=function(e){var t=new s.MathNode("mo",[h(e.value,e.mode)]);t.setAttribute("separator","true");return t};v.ordgroup=function(e,t){var r=m(e.value,t);var a=new s.MathNode("mrow",r);return a};v.text=function(e,t){var r=m(e.value.body,t);var a=new s.MathNode("mtext",r);return a};v.color=function(e,t){var r=m(e.value.value,t);var a=new s.MathNode("mstyle",r);a.setAttribute("mathcolor",e.value.color);return a};v.xmlClass=function(e,t){var r=m(e.value.value,t);var a=new s.MathNode("mstyle",r);a.setAttribute("class",e.value.cl);return a};v.supsub=function(e,t){var r=[f(e.value.base,t)];if(e.value.sub){r.push(f(e.value.sub,t))}if(e.value.sup){r.push(f(e.value.sup,t))}var a=void 0;if(!e.value.sub){a="msup"}else if(!e.value.sup){a="msub"}else{a="msubsup"}var i=new s.MathNode(a,r);return i};v.genfrac=function(e,t){var r=new s.MathNode("mfrac",[f(e.value.numer,t),f(e.value.denom,t)]);if(!e.value.hasBarLine){r.setAttribute("linethickness","0px")}if(e.value.leftDelim!=null||e.value.rightDelim!=null){var a=[];if(e.value.leftDelim!=null){var i=new s.MathNode("mo",[new s.TextNode(e.value.leftDelim)]);i.setAttribute("fence","true");a.push(i)}a.push(r);if(e.value.rightDelim!=null){var n=new s.MathNode("mo",[new s.TextNode(e.value.rightDelim)]);n.setAttribute("fence","true");a.push(n)}var l=new s.MathNode("mrow",a);return l}return r};v.array=function(e,t){return new s.MathNode("mtable",e.value.body.map(function(e){return new s.MathNode("mtr",e.map(function(e){return new s.MathNode("mtd",[f(e,t)])}))}))};v.sqrt=function(e,t){var r=void 0;if(e.value.index){r=new s.MathNode("mroot",[f(e.value.body,t),f(e.value.index,t)])}else{r=new s.MathNode("msqrt",[f(e.value.body,t)])}return r};v.leftright=function(e,t){var r=m(e.value.body,t);if(e.value.left!=="."){var a=new s.MathNode("mo",[h(e.value.left,e.mode)]);a.setAttribute("fence","true");r.unshift(a)}if(e.value.right!=="."){var i=new s.MathNode("mo",[h(e.value.right,e.mode)]);i.setAttribute("fence","true");r.push(i)}var n=new s.MathNode("mrow",r);return n};v.middle=function(e,t){var r=new s.MathNode("mo",[h(e.value.middle,e.mode)]);r.setAttribute("fence","true");return r};v.accent=function(e,t){var r=new s.MathNode("mo",[h(e.value.accent,e.mode)]);var a=new s.MathNode("mover",[f(e.value.base,t),r]);a.setAttribute("accent","true");return a};v.spacing=function(e){var t=void 0;if(e.value==="\\ "||e.value==="\\space"||e.value===" "||e.value==="~"){t=new s.MathNode("mtext",[new s.TextNode("\xa0")])}else{t=new s.MathNode("mspace");t.setAttribute("width",a.spacingFunctions[e.value].size)}return t};v.op=function(e,t){var r=void 0;if(e.value.symbol){r=new s.MathNode("mo",[h(e.value.body,e.mode)])}else if(e.value.value){r=new s.MathNode("mo",m(e.value.value,t))}else{r=new s.MathNode("mi",[new s.TextNode(e.value.body.slice(1))])}return r};v.cursor=function(e){var t=new s.MathNode("mtext",[new s.TextNode("|")]);return t};v.mod=function(e,t){var r=[];if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(new s.MathNode("mo",[h("(",e.mode)]))}if(e.value.modType!=="pod"){r.push(new s.MathNode("mo",[h("mod",e.mode)]))}if(e.value.value){var a=new s.MathNode("mspace");a.setAttribute("width","0.333333em");r.push(a);r=r.concat(m(e.value.value,t))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(new s.MathNode("mo",[h(")",e.mode)]))}return new s.MathNode("mo",r)};v.katex=function(e){var t=new s.MathNode("mtext",[new s.TextNode("KaTeX")]);return t};v.font=function(e,t){var r=e.value.font;return f(e.value.body,t.withFont(r))};v.delimsizing=function(e){var t=[];if(e.value.value!=="."){t.push(h(e.value.value,e.mode))}var r=new s.MathNode("mo",t);if(e.value.mclass==="mopen"||e.value.mclass==="mclose"){r.setAttribute("fence","true")}else{r.setAttribute("fence","false")}return r};v.styling=function(e,t){var r=m(e.value.value,t);var a=new s.MathNode("mstyle",r);var i={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]};var n=i[e.value.style];a.setAttribute("scriptlevel",n[0]);a.setAttribute("displaystyle",n[1]);return a};v.sizing=function(e,t){var r=m(e.value.value,t);var i=new s.MathNode("mstyle",r);i.setAttribute("mathsize",a.sizingMultiplier[e.value.size]+"em");return i};v.overline=function(e,t){var r=new s.MathNode("mo",[new s.TextNode("\u203e")]);r.setAttribute("stretchy","true");var a=new s.MathNode("mover",[f(e.value.body,t),r]);a.setAttribute("accent","true");return a};v.underline=function(e,t){var r=new s.MathNode("mo",[new s.TextNode("\u203e")]);r.setAttribute("stretchy","true");var a=new s.MathNode("munder",[f(e.value.body,t),r]);a.setAttribute("accentunder","true");return a};v.rule=function(e){var t=new s.MathNode("mrow");return t};v.kern=function(e){var t=new s.MathNode("mrow");return t};v.llap=function(e,t){var r=new s.MathNode("mpadded",[f(e.value.body,t)]);r.setAttribute("lspace","-1width");r.setAttribute("width","0px");return r};v.rlap=function(e,t){var r=new s.MathNode("mpadded",[f(e.value.body,t)]);r.setAttribute("width","0px");return r};v.phantom=function(e,t){var r=m(e.value.value,t);return new s.MathNode("mphantom",r)};v.mclass=function(e,t){var r=m(e.value.value,t);return new s.MathNode("mstyle",r)};var m=function e(t,r){var a=[];for(var i=0;i<t.length;i++){var s=t[i];a.push(f(s,r))}return a};var f=function e(t,r){if(!t){return new s.MathNode("mrow")}if(v[t.type]){return v[t.type](t,r)}else{throw new n("Got group of unknown type: '"+t.type+"'")}};var d=function e(t,r,a){var i=m(t,a);var n=new s.MathNode("mrow",i);var l=new s.MathNode("annotation",[new s.TextNode(r)]);l.setAttribute("encoding","application/x-tex");var o=new s.MathNode("semantics",[n,l]);var p=new s.MathNode("math",[o]);return u(["katex-mathml"],[p])};t.exports=d},{"./ParseError":9,"./buildCommon":13,"./fontMetrics":20,"./mathMLTree":23,"./symbols":26,"./utils":28}],16:[function(e,t,r){"use strict";var a=e("./buildHTML");var i=e("./buildMathML");var s=e("./buildCommon");var n=e("./Options");var l=e("./Settings");var o=e("./Style");var u=s.makeSpan;var p=function e(t,r,s){s=s||new l({});var p=o.TEXT;if(s.displayMode){p=o.DISPLAY}var h=new n({style:p,size:"size5"});var c=i(t,r,h);var v=a(t,h);var m=u(["katex"],[c,v]);if(s.displayMode){return u(["katex-display"],[m])}else{return m}};t.exports=p},{"./Options":8,"./Settings":11,"./Style":12,"./buildCommon":13,"./buildHTML":14,"./buildMathML":15}],17:[function(e,t,r){"use strict";var a=e("./ParseError");var i=e("./Style");var s=e("./buildCommon");var n=e("./fontMetrics");var l=e("./symbols");var o=e("./utils");var u=s.makeSpan;var p=function e(t,r){if(l.math[t]&&l.math[t].replace){return n.getCharacterMetrics(l.math[t].replace,r)}else{return n.getCharacterMetrics(t,r)}};var h=function e(t,r,a,i){return s.makeSymbol(t,"Size"+r+"-Regular",a,i)};var c=function e(t,r,a,i){i=i||[];var s=u(i.concat(["style-wrap",a.style.reset(),r.cls()]),[t],a);var n=r.sizeMultiplier/a.style.sizeMultiplier;s.height*=n;s.depth*=n;s.maxFontSize=r.sizeMultiplier;return s};var v=function e(t,r,a,i,n,l){var o=s.makeSymbol(t,"Main-Regular",n,i);var u=c(o,r,i,l);if(a){var p=(1-i.style.sizeMultiplier/r.sizeMultiplier)*i.style.metrics.axisHeight;u.style.top=p+"em";u.height-=p;u.depth+=p}return u};var m=function e(t,r,a,s,n,l){var o=h(t,r,n,s);var p=c(u(["delimsizing","size"+r],[o],s),i.TEXT,s,l);if(a){var v=(1-s.style.sizeMultiplier)*s.style.metrics.axisHeight;p.style.top=v+"em";p.height-=v;p.depth+=v}return p};var f=function e(t,r,a){var i=void 0;if(r==="Size1-Regular"){i="delim-size1"}else if(r==="Size4-Regular"){i="delim-size4"}var n=u(["delimsizinginner",i],[u([],[s.makeSymbol(t,r,a)])]);return{type:"elem",elem:n}};var d=function e(t,r,a,n,l,o){var h=void 0;var v=void 0;var m=void 0;var d=void 0;h=m=d=t;v=null;var g="Size1-Regular";if(t==="\\uparrow"){m=d="\u23d0"}else if(t==="\\Uparrow"){m=d="\u2016"}else if(t==="\\downarrow"){h=m="\u23d0"}else if(t==="\\Downarrow"){h=m="\u2016"}else if(t==="\\updownarrow"){h="\\uparrow";m="\u23d0";d="\\downarrow"}else if(t==="\\Updownarrow"){h="\\Uparrow";m="\u2016";d="\\Downarrow"}else if(t==="["||t==="\\lbrack"){h="\u23a1";m="\u23a2";d="\u23a3";g="Size4-Regular"}else if(t==="]"||t==="\\rbrack"){h="\u23a4";m="\u23a5";d="\u23a6";g="Size4-Regular"}else if(t==="\\lfloor"){m=h="\u23a2";d="\u23a3";g="Size4-Regular"}else if(t==="\\lceil"){h="\u23a1";m=d="\u23a2";g="Size4-Regular"}else if(t==="\\rfloor"){m=h="\u23a5";d="\u23a6";g="Size4-Regular"}else if(t==="\\rceil"){h="\u23a4";m=d="\u23a5";g="Size4-Regular"}else if(t==="("){h="\u239b";m="\u239c";d="\u239d";g="Size4-Regular"}else if(t===")"){h="\u239e";m="\u239f";d="\u23a0";g="Size4-Regular"}else if(t==="\\{"||t==="\\lbrace"){h="\u23a7";v="\u23a8";d="\u23a9";m="\u23aa";g="Size4-Regular"}else if(t==="\\}"||t==="\\rbrace"){h="\u23ab";v="\u23ac";d="\u23ad";m="\u23aa";g="Size4-Regular"}else if(t==="\\lgroup"){h="\u23a7";d="\u23a9";m="\u23aa";g="Size4-Regular"}else if(t==="\\rgroup"){h="\u23ab";d="\u23ad";m="\u23aa";g="Size4-Regular"}else if(t==="\\lmoustache"){h="\u23a7";d="\u23ad";m="\u23aa";g="Size4-Regular"}else if(t==="\\rmoustache"){h="\u23ab";d="\u23a9";m="\u23aa";g="Size4-Regular"}else if(t==="\\surd"){h="\ue001";d="\u23b7";m="\ue000";g="Size4-Regular"}var y=p(h,g);var x=y.height+y.depth;var b=p(m,g);var w=b.height+b.depth;var k=p(d,g);var z=k.height+k.depth;var S=0;var M=1;if(v!==null){var T=p(v,g);S=T.height+T.depth;M=2}var A=x+z+S;var N=Math.ceil((r-A)/(M*w));var q=A+N*M*w;var R=n.style.metrics.axisHeight;if(a){R*=n.style.sizeMultiplier}var C=q/2-R;var E=[];E.push(f(d,g,l));if(v===null){for(var D=0;D<N;D++){E.push(f(m,g,l))}}else{for(var O=0;O<N;O++){E.push(f(m,g,l))}E.push(f(v,g,l));for(var P=0;P<N;P++){E.push(f(m,g,l))}}E.push(f(h,g,l));var F=s.makeVList(E,"bottom",C,n);return c(u(["delimsizing","mult"],[F],n),i.TEXT,n,o)};var g=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","\\surd"];var y=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache"];var x=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"];var b=[0,1.2,1.8,2.4,3];var w=function e(t,r,i,s,n){if(t==="<"||t==="\\lt"){t="\\langle"}else if(t===">"||t==="\\gt"){t="\\rangle"}if(o.contains(g,t)||o.contains(x,t)){return m(t,r,false,i,s,n)}else if(o.contains(y,t)){return d(t,b[r],false,i,s,n)}else{throw new a("Illegal delimiter: '"+t+"'")}};var k=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}];var z=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"stack"}];var S=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}];var M=function e(t){if(t.type==="small"){return"Main-Regular"}else if(t.type==="large"){return"Size"+t.size+"-Regular"}else if(t.type==="stack"){return"Size4-Regular"}};var T=function e(t,r,a,i){var s=Math.min(2,3-i.style.size);for(var n=s;n<a.length;n++){if(a[n].type==="stack"){break}var l=p(t,M(a[n]));var o=l.height+l.depth;if(a[n].type==="small"){o*=a[n].style.sizeMultiplier}if(o>r){return a[n]}}return a[a.length-1]};var A=function e(t,r,a,i,s,n){if(t==="<"||t==="\\lt"){t="\\langle"}else if(t===">"||t==="\\gt"){t="\\rangle"}var l=void 0;if(o.contains(x,t)){l=k}else if(o.contains(g,t)){l=S}else{l=z}var u=T(t,r,l,i);if(u.type==="small"){return v(t,u.style,a,i,s,n)}else if(u.type==="large"){return m(t,u.size,a,i,s,n)}else if(u.type==="stack"){return d(t,r,a,i,s,n)}};var N=function e(t,r,a,i,s,l){var o=i.style.metrics.axisHeight*i.style.sizeMultiplier;var u=901;var p=5/n.metrics.ptPerEm;var h=Math.max(r-o,a+o);var c=Math.max(h/500*u,2*h-p);return A(t,c,true,i,s,l)};t.exports={sizedDelim:w,customSizedDelim:A,leftRightDelim:N}},{"./ParseError":9,"./Style":12,"./buildCommon":13,"./fontMetrics":20,"./symbols":26,"./utils":28}],18:[function(e,t,r){"use strict";var a=e("./unicodeRegexes");var i=e("./utils");var s=function e(t){t=t.slice();for(var r=t.length-1;r>=0;r--){if(!t[r]){t.splice(r,1)}}return t.join(" ")};function n(e,t,r){this.classes=e||[];this.children=t||[];this.height=0;this.depth=0;this.maxFontSize=0;this.style={};this.attributes={};if(r){if(r.style.isTight()){this.classes.push("mtight")}if(r.getColor()){this.style.color=r.getColor()}}}n.prototype.setAttribute=function(e,t){this.attributes[e]=t};n.prototype.tryCombine=function(e){return false};n.prototype.toNode=function(){var e=document.createElement("span");e.className=s(this.classes);for(var t in this.style){if(Object.prototype.hasOwnProperty.call(this.style,t)){e.style[t]=this.style[t]}}for(var r in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,r)){e.setAttribute(r,this.attributes[r])}}for(var a=0;a<this.children.length;a++){e.appendChild(this.children[a].toNode())}return e};n.prototype.toMarkup=function(){var e="<span";if(this.classes.length){e+=' class="';e+=i.escape(s(this.classes));e+='"'}var t="";for(var r in this.style){if(this.style.hasOwnProperty(r)){t+=i.hyphenate(r)+":"+this.style[r]+";"}}if(t){e+=' style="'+i.escape(t)+'"'}for(var a in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,a)){e+=" "+a+'="';e+=i.escape(this.attributes[a]);e+='"'}}e+=">";for(var n=0;n<this.children.length;n++){e+=this.children[n].toMarkup()}e+="</span>";return e};function l(e,t){this.children=e||[];this.height=0;this.depth=0;this.maxFontSize=0;if(t){for(var r=0;r<this.children.length;r++){for(var a=0;a<t.length;a++){this.children[r].classes.push(t[a])}}}this.classes=t||[]}l.prototype.toNode=function(){var e=document.createDocumentFragment();for(var t=0;t<this.children.length;t++){e.appendChild(this.children[t].toNode())}return e};l.prototype.toMarkup=function(){var e="";for(var t=0;t<this.children.length;t++){e+=this.children[t].toMarkup()}return e};var o={"\xee":"\u0131\u0302","\xef":"\u0131\u0308","\xed":"\u0131\u0301","\xec":"\u0131\u0300"};function u(e,t,r,i,s,n,l){this.value=e||"";this.height=t||0;this.depth=r||0;this.italic=i||0;this.skew=s||0;this.classes=n||[];this.style=l||{};this.maxFontSize=0;if(a.cjkRegex.test(e)){if(a.hangulRegex.test(e)){this.classes.push("hangul_fallback")}else{this.classes.push("cjk_fallback")}}if(/[\xee\xef\xed\xec]/.test(this.value)){this.value=o[this.value]}}u.prototype.tryCombine=function(e){if(!e||!(e instanceof u)||this.italic>0||s(this.classes)!==s(e.classes)||this.skew!==e.skew||this.maxFontSize!==e.maxFontSize){return false}for(var t in this.style){if(this.style.hasOwnProperty(t)&&this.style[t]!==e.style[t]){return false}}for(var r in e.style){if(e.style.hasOwnProperty(r)&&this.style[r]!==e.style[r]){return false}}this.value+=e.value;this.height=Math.max(this.height,e.height);this.depth=Math.max(this.depth,e.depth);this.italic=e.italic;return true};u.prototype.toNode=function(){var e=document.createTextNode(this.value);var t=null;if(this.italic>0){t=document.createElement("span");t.style.marginRight=this.italic+"em"}if(this.classes.length>0){t=t||document.createElement("span");t.className=s(this.classes)}for(var r in this.style){if(this.style.hasOwnProperty(r)){t=t||document.createElement("span");t.style[r]=this.style[r]}}if(t){t.appendChild(e);return t}else{return e}};u.prototype.toMarkup=function(){var e=false;var t="<span";if(this.classes.length){e=true;t+=' class="';t+=i.escape(s(this.classes));t+='"'}var r="";if(this.italic>0){r+="margin-right:"+this.italic+"em;"}for(var a in this.style){if(this.style.hasOwnProperty(a)){r+=i.hyphenate(a)+":"+this.style[a]+";"}}if(r){e=true;t+=' style="'+i.escape(r)+'"'}var n=i.escape(this.value);if(e){t+=">";t+=n;t+="</span>";return t}else{return n}};t.exports={span:n,documentFragment:l,symbolNode:u}},{"./unicodeRegexes":27,"./utils":28}],19:[function(e,t,r){"use strict";var a=e("./parseData");var i=e("./ParseError");var s=e("./Style");var n=a.ParseNode;function l(e,t,r){var a=[];var s=[a];var l=[];while(true){var o=e.parseExpression(false,null);o=new n("ordgroup",o,e.mode);if(r){o=new n("styling",{style:r,value:[o]},e.mode)}a.push(o);var u=e.nextToken.text;if(u==="&"){e.consume()}else if(u==="\\end"){break}else if(u==="\\\\"||u==="\\cr"){var p=e.parseFunction();l.push(p.value.size);a=[];s.push(a)}else{throw new i("Expected & or \\\\ or \\end",e.nextToken)}}t.body=s;t.rowGaps=l;return new n(t.type,t,e.mode)}function o(e,r,a){if(typeof e==="string"){e=[e]}if(typeof r==="number"){r={numArgs:r}}var i={numArgs:r.numArgs||0,argTypes:r.argTypes,greediness:1,allowedInText:!!r.allowedInText,numOptionalArgs:r.numOptionalArgs||0,handler:a};for(var s=0;s<e.length;++s){t.exports[e[s]]=i}}function u(e){if(e.substr(0,1)==="d"){return"display"}else{return"text"}}o(["array","darray"],{numArgs:1},function(e,t){var r=t[0];r=r.value.map?r.value:[r];var a=r.map(function(e){var t=e.value;if("lcr".indexOf(t)!==-1){return{type:"align",align:t}}else if(t==="|"){return{type:"separator",separator:"|"}}throw new i("Unknown column alignment: "+e.value,e)});var s={type:"array",cols:a,hskipBeforeAndAfter:true};s=l(e.parser,s,u(e.envName));return s});o(["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix"],{},function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName];var r={type:"array",hskipBeforeAndAfter:false};r=l(e.parser,r,u(e.envName));if(t){r=new n("leftright",{body:[r],left:t[0],right:t[1]},e.mode)}return r});o(["cases","dcases"],{},function(e){var t={type:"array",arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:s.TEXT.metrics.quad},{type:"align",align:"l",pregap:0,postgap:0}]};t=l(e.parser,t,u(e.envName));t=new n("leftright",{body:[t],left:"\\{",right:"."},e.mode);return t});o("aligned",{},function(e){var t={type:"array",cols:[]};t=l(e.parser,t);var r=new n("ordgroup",[],e.mode);var a=0;t.value.body.forEach(function(e){for(var t=1;t<e.length;t+=2){e[t].value.unshift(r)}if(a<e.length){a=e.length}});for(var i=0;i<a;++i){var s="r";var o=0;if(i%2===1){s="l"}else if(i>0){o=2}t.value.cols[i]={type:"align",align:s,pregap:o,postgap:0}}return t})},{"./ParseError":9,"./Style":12,"./parseData":24}],20:[function(e,t,r){"use strict";var a=e("./Style");var i=e("./unicodeRegexes").cjkRegex;var s={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25]};var n=0;var l=0;var o=0;var u=0;var p=.431;var h=1;var c=0;var v=.04;var m=.111;var f=.166;var d=.2;var g=.6;var y=.1;var x=10;var b=2/x;var w={defaultRuleThickness:v,bigOpSpacing1:m,bigOpSpacing2:f,bigOpSpacing3:d,bigOpSpacing4:g,bigOpSpacing5:y,ptPerEm:x,doubleRuleSep:b};var k=e("./fontMetricsData");var z={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xc6":"A","\xc7":"C","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xd0":"D","\xd1":"N","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xdd":"Y","\xde":"o","\xdf":"B","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xe6":"a","\xe7":"c","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xf0":"d","\xf1":"n","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xfd":"y","\xfe":"o","\xff":"y","\u0410":"A","\u0411":"B","\u0412":"B","\u0413":"F","\u0414":"A","\u0415":"E","\u0416":"K","\u0417":"3","\u0418":"N","\u0419":"N","\u041a":"K","\u041b":"N","\u041c":"M","\u041d":"H","\u041e":"O","\u041f":"N","\u0420":"P","\u0421":"C","\u0422":"T","\u0423":"y","\u0424":"O","\u0425":"X","\u0426":"U","\u0427":"h","\u0428":"W","\u0429":"W","\u042a":"B","\u042b":"X","\u042c":"B","\u042d":"3","\u042e":"X","\u042f":"R","\u0430":"a","\u0431":"b","\u0432":"a","\u0433":"r","\u0434":"y","\u0435":"e","\u0436":"m","\u0437":"e","\u0438":"n","\u0439":"n","\u043a":"n","\u043b":"n","\u043c":"m","\u043d":"n","\u043e":"o","\u043f":"n","\u0440":"p","\u0441":"c","\u0442":"o","\u0443":"y","\u0444":"b","\u0445":"x","\u0446":"n","\u0447":"n","\u0448":"w","\u0449":"w","\u044a":"a","\u044b":"m","\u044c":"a","\u044d":"e","\u044e":"m","\u044f":"r"};var S=function e(t,r){var a=t.charCodeAt(0);if(t[0]in z){a=z[t[0]].charCodeAt(0)}else if(i.test(t[0])){a="M".charCodeAt(0)}var s=k[r][a];if(s){return{depth:s[0],
height:s[1],italic:s[2],skew:s[3],width:s[4]}}};t.exports={metrics:w,sigmas:s,getCharacterMetrics:S}},{"./Style":12,"./fontMetricsData":21,"./unicodeRegexes":27}],21:[function(e,t,r){"use strict";t.exports={"AMS-Regular":{65:[0,.68889,0,0],66:[0,.68889,0,0],67:[0,.68889,0,0],68:[0,.68889,0,0],69:[0,.68889,0,0],70:[0,.68889,0,0],71:[0,.68889,0,0],72:[0,.68889,0,0],73:[0,.68889,0,0],74:[.16667,.68889,0,0],75:[0,.68889,0,0],76:[0,.68889,0,0],77:[0,.68889,0,0],78:[0,.68889,0,0],79:[.16667,.68889,0,0],80:[0,.68889,0,0],81:[.16667,.68889,0,0],82:[0,.68889,0,0],83:[0,.68889,0,0],84:[0,.68889,0,0],85:[0,.68889,0,0],86:[0,.68889,0,0],87:[0,.68889,0,0],88:[0,.68889,0,0],89:[0,.68889,0,0],90:[0,.68889,0,0],107:[0,.68889,0,0],165:[0,.675,.025,0],174:[.15559,.69224,0,0],240:[0,.68889,0,0],295:[0,.68889,0,0],710:[0,.825,0,0],732:[0,.9,0,0],770:[0,.825,0,0],771:[0,.9,0,0],989:[.08167,.58167,0,0],1008:[0,.43056,.04028,0],8245:[0,.54986,0,0],8463:[0,.68889,0,0],8487:[0,.68889,0,0],8498:[0,.68889,0,0],8502:[0,.68889,0,0],8503:[0,.68889,0,0],8504:[0,.68889,0,0],8513:[0,.68889,0,0],8592:[-.03598,.46402,0,0],8594:[-.03598,.46402,0,0],8602:[-.13313,.36687,0,0],8603:[-.13313,.36687,0,0],8606:[.01354,.52239,0,0],8608:[.01354,.52239,0,0],8610:[.01354,.52239,0,0],8611:[.01354,.52239,0,0],8619:[0,.54986,0,0],8620:[0,.54986,0,0],8621:[-.13313,.37788,0,0],8622:[-.13313,.36687,0,0],8624:[0,.69224,0,0],8625:[0,.69224,0,0],8630:[0,.43056,0,0],8631:[0,.43056,0,0],8634:[.08198,.58198,0,0],8635:[.08198,.58198,0,0],8638:[.19444,.69224,0,0],8639:[.19444,.69224,0,0],8642:[.19444,.69224,0,0],8643:[.19444,.69224,0,0],8644:[.1808,.675,0,0],8646:[.1808,.675,0,0],8647:[.1808,.675,0,0],8648:[.19444,.69224,0,0],8649:[.1808,.675,0,0],8650:[.19444,.69224,0,0],8651:[.01354,.52239,0,0],8652:[.01354,.52239,0,0],8653:[-.13313,.36687,0,0],8654:[-.13313,.36687,0,0],8655:[-.13313,.36687,0,0],8666:[.13667,.63667,0,0],8667:[.13667,.63667,0,0],8669:[-.13313,.37788,0,0],8672:[-.064,.437,0,0],8674:[-.064,.437,0,0],8705:[0,.825,0,0],8708:[0,.68889,0,0],8709:[.08167,.58167,0,0],8717:[0,.43056,0,0],8722:[-.03598,.46402,0,0],8724:[.08198,.69224,0,0],8726:[.08167,.58167,0,0],8733:[0,.69224,0,0],8736:[0,.69224,0,0],8737:[0,.69224,0,0],8738:[.03517,.52239,0,0],8739:[.08167,.58167,0,0],8740:[.25142,.74111,0,0],8741:[.08167,.58167,0,0],8742:[.25142,.74111,0,0],8756:[0,.69224,0,0],8757:[0,.69224,0,0],8764:[-.13313,.36687,0,0],8765:[-.13313,.37788,0,0],8769:[-.13313,.36687,0,0],8770:[-.03625,.46375,0,0],8774:[.30274,.79383,0,0],8776:[-.01688,.48312,0,0],8778:[.08167,.58167,0,0],8782:[.06062,.54986,0,0],8783:[.06062,.54986,0,0],8785:[.08198,.58198,0,0],8786:[.08198,.58198,0,0],8787:[.08198,.58198,0,0],8790:[0,.69224,0,0],8791:[.22958,.72958,0,0],8796:[.08198,.91667,0,0],8806:[.25583,.75583,0,0],8807:[.25583,.75583,0,0],8808:[.25142,.75726,0,0],8809:[.25142,.75726,0,0],8812:[.25583,.75583,0,0],8814:[.20576,.70576,0,0],8815:[.20576,.70576,0,0],8816:[.30274,.79383,0,0],8817:[.30274,.79383,0,0],8818:[.22958,.72958,0,0],8819:[.22958,.72958,0,0],8822:[.1808,.675,0,0],8823:[.1808,.675,0,0],8828:[.13667,.63667,0,0],8829:[.13667,.63667,0,0],8830:[.22958,.72958,0,0],8831:[.22958,.72958,0,0],8832:[.20576,.70576,0,0],8833:[.20576,.70576,0,0],8840:[.30274,.79383,0,0],8841:[.30274,.79383,0,0],8842:[.13597,.63597,0,0],8843:[.13597,.63597,0,0],8847:[.03517,.54986,0,0],8848:[.03517,.54986,0,0],8858:[.08198,.58198,0,0],8859:[.08198,.58198,0,0],8861:[.08198,.58198,0,0],8862:[0,.675,0,0],8863:[0,.675,0,0],8864:[0,.675,0,0],8865:[0,.675,0,0],8872:[0,.69224,0,0],8873:[0,.69224,0,0],8874:[0,.69224,0,0],8876:[0,.68889,0,0],8877:[0,.68889,0,0],8878:[0,.68889,0,0],8879:[0,.68889,0,0],8882:[.03517,.54986,0,0],8883:[.03517,.54986,0,0],8884:[.13667,.63667,0,0],8885:[.13667,.63667,0,0],8888:[0,.54986,0,0],8890:[.19444,.43056,0,0],8891:[.19444,.69224,0,0],8892:[.19444,.69224,0,0],8901:[0,.54986,0,0],8903:[.08167,.58167,0,0],8905:[.08167,.58167,0,0],8906:[.08167,.58167,0,0],8907:[0,.69224,0,0],8908:[0,.69224,0,0],8909:[-.03598,.46402,0,0],8910:[0,.54986,0,0],8911:[0,.54986,0,0],8912:[.03517,.54986,0,0],8913:[.03517,.54986,0,0],8914:[0,.54986,0,0],8915:[0,.54986,0,0],8916:[0,.69224,0,0],8918:[.0391,.5391,0,0],8919:[.0391,.5391,0,0],8920:[.03517,.54986,0,0],8921:[.03517,.54986,0,0],8922:[.38569,.88569,0,0],8923:[.38569,.88569,0,0],8926:[.13667,.63667,0,0],8927:[.13667,.63667,0,0],8928:[.30274,.79383,0,0],8929:[.30274,.79383,0,0],8934:[.23222,.74111,0,0],8935:[.23222,.74111,0,0],8936:[.23222,.74111,0,0],8937:[.23222,.74111,0,0],8938:[.20576,.70576,0,0],8939:[.20576,.70576,0,0],8940:[.30274,.79383,0,0],8941:[.30274,.79383,0,0],8994:[.19444,.69224,0,0],8995:[.19444,.69224,0,0],9416:[.15559,.69224,0,0],9484:[0,.69224,0,0],9488:[0,.69224,0,0],9492:[0,.37788,0,0],9496:[0,.37788,0,0],9585:[.19444,.68889,0,0],9586:[.19444,.74111,0,0],9632:[0,.675,0,0],9633:[0,.675,0,0],9650:[0,.54986,0,0],9651:[0,.54986,0,0],9654:[.03517,.54986,0,0],9660:[0,.54986,0,0],9661:[0,.54986,0,0],9664:[.03517,.54986,0,0],9674:[.11111,.69224,0,0],9733:[.19444,.69224,0,0],10003:[0,.69224,0,0],10016:[0,.69224,0,0],10731:[.11111,.69224,0,0],10846:[.19444,.75583,0,0],10877:[.13667,.63667,0,0],10878:[.13667,.63667,0,0],10885:[.25583,.75583,0,0],10886:[.25583,.75583,0,0],10887:[.13597,.63597,0,0],10888:[.13597,.63597,0,0],10889:[.26167,.75726,0,0],10890:[.26167,.75726,0,0],10891:[.48256,.98256,0,0],10892:[.48256,.98256,0,0],10901:[.13667,.63667,0,0],10902:[.13667,.63667,0,0],10933:[.25142,.75726,0,0],10934:[.25142,.75726,0,0],10935:[.26167,.75726,0,0],10936:[.26167,.75726,0,0],10937:[.26167,.75726,0,0],10938:[.26167,.75726,0,0],10949:[.25583,.75583,0,0],10950:[.25583,.75583,0,0],10955:[.28481,.79383,0,0],10956:[.28481,.79383,0,0],57350:[.08167,.58167,0,0],57351:[.08167,.58167,0,0],57352:[.08167,.58167,0,0],57353:[0,.43056,.04028,0],57356:[.25142,.75726,0,0],57357:[.25142,.75726,0,0],57358:[.41951,.91951,0,0],57359:[.30274,.79383,0,0],57360:[.30274,.79383,0,0],57361:[.41951,.91951,0,0],57366:[.25142,.75726,0,0],57367:[.25142,.75726,0,0],57368:[.25142,.75726,0,0],57369:[.25142,.75726,0,0],57370:[.13597,.63597,0,0],57371:[.13597,.63597,0,0]},"Caligraphic-Regular":{48:[0,.43056,0,0],49:[0,.43056,0,0],50:[0,.43056,0,0],51:[.19444,.43056,0,0],52:[.19444,.43056,0,0],53:[.19444,.43056,0,0],54:[0,.64444,0,0],55:[.19444,.43056,0,0],56:[0,.64444,0,0],57:[.19444,.43056,0,0],65:[0,.68333,0,.19445],66:[0,.68333,.03041,.13889],67:[0,.68333,.05834,.13889],68:[0,.68333,.02778,.08334],69:[0,.68333,.08944,.11111],70:[0,.68333,.09931,.11111],71:[.09722,.68333,.0593,.11111],72:[0,.68333,.00965,.11111],73:[0,.68333,.07382,0],74:[.09722,.68333,.18472,.16667],75:[0,.68333,.01445,.05556],76:[0,.68333,0,.13889],77:[0,.68333,0,.13889],78:[0,.68333,.14736,.08334],79:[0,.68333,.02778,.11111],80:[0,.68333,.08222,.08334],81:[.09722,.68333,0,.11111],82:[0,.68333,0,.08334],83:[0,.68333,.075,.13889],84:[0,.68333,.25417,0],85:[0,.68333,.09931,.08334],86:[0,.68333,.08222,0],87:[0,.68333,.08222,.08334],88:[0,.68333,.14643,.13889],89:[.09722,.68333,.08222,.08334],90:[0,.68333,.07944,.13889]},"Fraktur-Regular":{33:[0,.69141,0,0],34:[0,.69141,0,0],38:[0,.69141,0,0],39:[0,.69141,0,0],40:[.24982,.74947,0,0],41:[.24982,.74947,0,0],42:[0,.62119,0,0],43:[.08319,.58283,0,0],44:[0,.10803,0,0],45:[.08319,.58283,0,0],46:[0,.10803,0,0],47:[.24982,.74947,0,0],48:[0,.47534,0,0],49:[0,.47534,0,0],50:[0,.47534,0,0],51:[.18906,.47534,0,0],52:[.18906,.47534,0,0],53:[.18906,.47534,0,0],54:[0,.69141,0,0],55:[.18906,.47534,0,0],56:[0,.69141,0,0],57:[.18906,.47534,0,0],58:[0,.47534,0,0],59:[.12604,.47534,0,0],61:[-.13099,.36866,0,0],63:[0,.69141,0,0],65:[0,.69141,0,0],66:[0,.69141,0,0],67:[0,.69141,0,0],68:[0,.69141,0,0],69:[0,.69141,0,0],70:[.12604,.69141,0,0],71:[0,.69141,0,0],72:[.06302,.69141,0,0],73:[0,.69141,0,0],74:[.12604,.69141,0,0],75:[0,.69141,0,0],76:[0,.69141,0,0],77:[0,.69141,0,0],78:[0,.69141,0,0],79:[0,.69141,0,0],80:[.18906,.69141,0,0],81:[.03781,.69141,0,0],82:[0,.69141,0,0],83:[0,.69141,0,0],84:[0,.69141,0,0],85:[0,.69141,0,0],86:[0,.69141,0,0],87:[0,.69141,0,0],88:[0,.69141,0,0],89:[.18906,.69141,0,0],90:[.12604,.69141,0,0],91:[.24982,.74947,0,0],93:[.24982,.74947,0,0],94:[0,.69141,0,0],97:[0,.47534,0,0],98:[0,.69141,0,0],99:[0,.47534,0,0],100:[0,.62119,0,0],101:[0,.47534,0,0],102:[.18906,.69141,0,0],103:[.18906,.47534,0,0],104:[.18906,.69141,0,0],105:[0,.69141,0,0],106:[0,.69141,0,0],107:[0,.69141,0,0],108:[0,.69141,0,0],109:[0,.47534,0,0],110:[0,.47534,0,0],111:[0,.47534,0,0],112:[.18906,.52396,0,0],113:[.18906,.47534,0,0],114:[0,.47534,0,0],115:[0,.47534,0,0],116:[0,.62119,0,0],117:[0,.47534,0,0],118:[0,.52396,0,0],119:[0,.52396,0,0],120:[.18906,.47534,0,0],121:[.18906,.47534,0,0],122:[.18906,.47534,0,0],8216:[0,.69141,0,0],8217:[0,.69141,0,0],58112:[0,.62119,0,0],58113:[0,.62119,0,0],58114:[.18906,.69141,0,0],58115:[.18906,.69141,0,0],58116:[.18906,.47534,0,0],58117:[0,.69141,0,0],58118:[0,.62119,0,0],58119:[0,.47534,0,0]},"Main-Bold":{33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.13333,.63333,0,0],44:[.19444,.15556,0,0],45:[0,.44444,0,0],46:[0,.15556,0,0],47:[.25,.75,0,0],48:[0,.64444,0,0],49:[0,.64444,0,0],50:[0,.64444,0,0],51:[0,.64444,0,0],52:[0,.64444,0,0],53:[0,.64444,0,0],54:[0,.64444,0,0],55:[0,.64444,0,0],56:[0,.64444,0,0],57:[0,.64444,0,0],58:[0,.44444,0,0],59:[.19444,.44444,0,0],60:[.08556,.58556,0,0],61:[-.10889,.39111,0,0],62:[.08556,.58556,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.68611,0,0],66:[0,.68611,0,0],67:[0,.68611,0,0],68:[0,.68611,0,0],69:[0,.68611,0,0],70:[0,.68611,0,0],71:[0,.68611,0,0],72:[0,.68611,0,0],73:[0,.68611,0,0],74:[0,.68611,0,0],75:[0,.68611,0,0],76:[0,.68611,0,0],77:[0,.68611,0,0],78:[0,.68611,0,0],79:[0,.68611,0,0],80:[0,.68611,0,0],81:[.19444,.68611,0,0],82:[0,.68611,0,0],83:[0,.68611,0,0],84:[0,.68611,0,0],85:[0,.68611,0,0],86:[0,.68611,.01597,0],87:[0,.68611,.01597,0],88:[0,.68611,0,0],89:[0,.68611,.02875,0],90:[0,.68611,0,0],91:[.25,.75,0,0],92:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.31,.13444,.03194,0],96:[0,.69444,0,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[0,.69444,.10903,0],103:[.19444,.44444,.01597,0],104:[0,.69444,0,0],105:[0,.69444,0,0],106:[.19444,.69444,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,0,0],114:[0,.44444,0,0],115:[0,.44444,0,0],116:[0,.63492,0,0],117:[0,.44444,0,0],118:[0,.44444,.01597,0],119:[0,.44444,.01597,0],120:[0,.44444,0,0],121:[.19444,.44444,.01597,0],122:[0,.44444,0,0],123:[.25,.75,0,0],124:[.25,.75,0,0],125:[.25,.75,0,0],126:[.35,.34444,0,0],168:[0,.69444,0,0],172:[0,.44444,0,0],175:[0,.59611,0,0],176:[0,.69444,0,0],177:[.13333,.63333,0,0],180:[0,.69444,0,0],215:[.13333,.63333,0,0],247:[.13333,.63333,0,0],305:[0,.44444,0,0],567:[.19444,.44444,0,0],710:[0,.69444,0,0],711:[0,.63194,0,0],713:[0,.59611,0,0],714:[0,.69444,0,0],715:[0,.69444,0,0],728:[0,.69444,0,0],729:[0,.69444,0,0],730:[0,.69444,0,0],732:[0,.69444,0,0],768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.69444,0,0],772:[0,.59611,0,0],774:[0,.69444,0,0],775:[0,.69444,0,0],776:[0,.69444,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.63194,0,0],824:[.19444,.69444,0,0],915:[0,.68611,0,0],916:[0,.68611,0,0],920:[0,.68611,0,0],923:[0,.68611,0,0],926:[0,.68611,0,0],928:[0,.68611,0,0],931:[0,.68611,0,0],933:[0,.68611,0,0],934:[0,.68611,0,0],936:[0,.68611,0,0],937:[0,.68611,0,0],8211:[0,.44444,.03194,0],8212:[0,.44444,.03194,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0],8224:[.19444,.69444,0,0],8225:[.19444,.69444,0,0],8242:[0,.55556,0,0],8407:[0,.72444,.15486,0],8463:[0,.69444,0,0],8465:[0,.69444,0,0],8467:[0,.69444,0,0],8472:[.19444,.44444,0,0],8476:[0,.69444,0,0],8501:[0,.69444,0,0],8592:[-.10889,.39111,0,0],8593:[.19444,.69444,0,0],8594:[-.10889,.39111,0,0],8595:[.19444,.69444,0,0],8596:[-.10889,.39111,0,0],8597:[.25,.75,0,0],8598:[.19444,.69444,0,0],8599:[.19444,.69444,0,0],8600:[.19444,.69444,0,0],8601:[.19444,.69444,0,0],8636:[-.10889,.39111,0,0],8637:[-.10889,.39111,0,0],8640:[-.10889,.39111,0,0],8641:[-.10889,.39111,0,0],8656:[-.10889,.39111,0,0],8657:[.19444,.69444,0,0],8658:[-.10889,.39111,0,0],8659:[.19444,.69444,0,0],8660:[-.10889,.39111,0,0],8661:[.25,.75,0,0],8704:[0,.69444,0,0],8706:[0,.69444,.06389,0],8707:[0,.69444,0,0],8709:[.05556,.75,0,0],8711:[0,.68611,0,0],8712:[.08556,.58556,0,0],8715:[.08556,.58556,0,0],8722:[.13333,.63333,0,0],8723:[.13333,.63333,0,0],8725:[.25,.75,0,0],8726:[.25,.75,0,0],8727:[-.02778,.47222,0,0],8728:[-.02639,.47361,0,0],8729:[-.02639,.47361,0,0],8730:[.18,.82,0,0],8733:[0,.44444,0,0],8734:[0,.44444,0,0],8736:[0,.69224,0,0],8739:[.25,.75,0,0],8741:[.25,.75,0,0],8743:[0,.55556,0,0],8744:[0,.55556,0,0],8745:[0,.55556,0,0],8746:[0,.55556,0,0],8747:[.19444,.69444,.12778,0],8764:[-.10889,.39111,0,0],8768:[.19444,.69444,0,0],8771:[.00222,.50222,0,0],8776:[.02444,.52444,0,0],8781:[.00222,.50222,0,0],8801:[.00222,.50222,0,0],8804:[.19667,.69667,0,0],8805:[.19667,.69667,0,0],8810:[.08556,.58556,0,0],8811:[.08556,.58556,0,0],8826:[.08556,.58556,0,0],8827:[.08556,.58556,0,0],8834:[.08556,.58556,0,0],8835:[.08556,.58556,0,0],8838:[.19667,.69667,0,0],8839:[.19667,.69667,0,0],8846:[0,.55556,0,0],8849:[.19667,.69667,0,0],8850:[.19667,.69667,0,0],8851:[0,.55556,0,0],8852:[0,.55556,0,0],8853:[.13333,.63333,0,0],8854:[.13333,.63333,0,0],8855:[.13333,.63333,0,0],8856:[.13333,.63333,0,0],8857:[.13333,.63333,0,0],8866:[0,.69444,0,0],8867:[0,.69444,0,0],8868:[0,.69444,0,0],8869:[0,.69444,0,0],8900:[-.02639,.47361,0,0],8901:[-.02639,.47361,0,0],8902:[-.02778,.47222,0,0],8968:[.25,.75,0,0],8969:[.25,.75,0,0],8970:[.25,.75,0,0],8971:[.25,.75,0,0],8994:[-.13889,.36111,0,0],8995:[-.13889,.36111,0,0],9651:[.19444,.69444,0,0],9657:[-.02778,.47222,0,0],9661:[.19444,.69444,0,0],9667:[-.02778,.47222,0,0],9711:[.19444,.69444,0,0],9824:[.12963,.69444,0,0],9825:[.12963,.69444,0,0],9826:[.12963,.69444,0,0],9827:[.12963,.69444,0,0],9837:[0,.75,0,0],9838:[.19444,.69444,0,0],9839:[.19444,.69444,0,0],10216:[.25,.75,0,0],10217:[.25,.75,0,0],10815:[0,.68611,0,0],10927:[.19667,.69667,0,0],10928:[.19667,.69667,0,0]},"Main-Italic":{33:[0,.69444,.12417,0],34:[0,.69444,.06961,0],35:[.19444,.69444,.06616,0],37:[.05556,.75,.13639,0],38:[0,.69444,.09694,0],39:[0,.69444,.12417,0],40:[.25,.75,.16194,0],41:[.25,.75,.03694,0],42:[0,.75,.14917,0],43:[.05667,.56167,.03694,0],44:[.19444,.10556,0,0],45:[0,.43056,.02826,0],46:[0,.10556,0,0],47:[.25,.75,.16194,0],48:[0,.64444,.13556,0],49:[0,.64444,.13556,0],50:[0,.64444,.13556,0],51:[0,.64444,.13556,0],52:[.19444,.64444,.13556,0],53:[0,.64444,.13556,0],54:[0,.64444,.13556,0],55:[.19444,.64444,.13556,0],56:[0,.64444,.13556,0],57:[0,.64444,.13556,0],58:[0,.43056,.0582,0],59:[.19444,.43056,.0582,0],61:[-.13313,.36687,.06616,0],63:[0,.69444,.1225,0],64:[0,.69444,.09597,0],65:[0,.68333,0,0],66:[0,.68333,.10257,0],67:[0,.68333,.14528,0],68:[0,.68333,.09403,0],69:[0,.68333,.12028,0],70:[0,.68333,.13305,0],71:[0,.68333,.08722,0],72:[0,.68333,.16389,0],73:[0,.68333,.15806,0],74:[0,.68333,.14028,0],75:[0,.68333,.14528,0],76:[0,.68333,0,0],77:[0,.68333,.16389,0],78:[0,.68333,.16389,0],79:[0,.68333,.09403,0],80:[0,.68333,.10257,0],81:[.19444,.68333,.09403,0],82:[0,.68333,.03868,0],83:[0,.68333,.11972,0],84:[0,.68333,.13305,0],85:[0,.68333,.16389,0],86:[0,.68333,.18361,0],87:[0,.68333,.18361,0],88:[0,.68333,.15806,0],89:[0,.68333,.19383,0],90:[0,.68333,.14528,0],91:[.25,.75,.1875,0],93:[.25,.75,.10528,0],94:[0,.69444,.06646,0],95:[.31,.12056,.09208,0],97:[0,.43056,.07671,0],98:[0,.69444,.06312,0],99:[0,.43056,.05653,0],100:[0,.69444,.10333,0],101:[0,.43056,.07514,0],102:[.19444,.69444,.21194,0],103:[.19444,.43056,.08847,0],104:[0,.69444,.07671,0],105:[0,.65536,.1019,0],106:[.19444,.65536,.14467,0],107:[0,.69444,.10764,0],108:[0,.69444,.10333,0],109:[0,.43056,.07671,0],110:[0,.43056,.07671,0],111:[0,.43056,.06312,0],112:[.19444,.43056,.06312,0],113:[.19444,.43056,.08847,0],114:[0,.43056,.10764,0],115:[0,.43056,.08208,0],116:[0,.61508,.09486,0],117:[0,.43056,.07671,0],118:[0,.43056,.10764,0],119:[0,.43056,.10764,0],120:[0,.43056,.12042,0],121:[.19444,.43056,.08847,0],122:[0,.43056,.12292,0],126:[.35,.31786,.11585,0],163:[0,.69444,0,0],305:[0,.43056,0,.02778],567:[.19444,.43056,0,.08334],768:[0,.69444,0,0],769:[0,.69444,.09694,0],770:[0,.69444,.06646,0],771:[0,.66786,.11585,0],772:[0,.56167,.10333,0],774:[0,.69444,.10806,0],775:[0,.66786,.11752,0],776:[0,.66786,.10474,0],778:[0,.69444,0,0],779:[0,.69444,.1225,0],780:[0,.62847,.08295,0],915:[0,.68333,.13305,0],916:[0,.68333,0,0],920:[0,.68333,.09403,0],923:[0,.68333,0,0],926:[0,.68333,.15294,0],928:[0,.68333,.16389,0],931:[0,.68333,.12028,0],933:[0,.68333,.11111,0],934:[0,.68333,.05986,0],936:[0,.68333,.11111,0],937:[0,.68333,.10257,0],8211:[0,.43056,.09208,0],8212:[0,.43056,.09208,0],8216:[0,.69444,.12417,0],8217:[0,.69444,.12417,0],8220:[0,.69444,.1685,0],8221:[0,.69444,.06961,0],8463:[0,.68889,0,0]},"Main-Regular":{32:[0,0,0,0],33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.08333,.58333,0,0],44:[.19444,.10556,0,0],45:[0,.43056,0,0],46:[0,.10556,0,0],47:[.25,.75,0,0],48:[0,.64444,0,0],49:[0,.64444,0,0],50:[0,.64444,0,0],51:[0,.64444,0,0],52:[0,.64444,0,0],53:[0,.64444,0,0],54:[0,.64444,0,0],55:[0,.64444,0,0],56:[0,.64444,0,0],57:[0,.64444,0,0],58:[0,.43056,0,0],59:[.19444,.43056,0,0],60:[.0391,.5391,0,0],61:[-.13313,.36687,0,0],62:[.0391,.5391,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.68333,0,0],66:[0,.68333,0,0],67:[0,.68333,0,0],68:[0,.68333,0,0],69:[0,.68333,0,0],70:[0,.68333,0,0],71:[0,.68333,0,0],72:[0,.68333,0,0],73:[0,.68333,0,0],74:[0,.68333,0,0],75:[0,.68333,0,0],76:[0,.68333,0,0],77:[0,.68333,0,0],78:[0,.68333,0,0],79:[0,.68333,0,0],80:[0,.68333,0,0],81:[.19444,.68333,0,0],82:[0,.68333,0,0],83:[0,.68333,0,0],84:[0,.68333,0,0],85:[0,.68333,0,0],86:[0,.68333,.01389,0],87:[0,.68333,.01389,0],88:[0,.68333,0,0],89:[0,.68333,.025,0],90:[0,.68333,0,0],91:[.25,.75,0,0],92:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.31,.12056,.02778,0],96:[0,.69444,0,0],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,0],100:[0,.69444,0,0],101:[0,.43056,0,0],102:[0,.69444,.07778,0],103:[.19444,.43056,.01389,0],104:[0,.69444,0,0],105:[0,.66786,0,0],106:[.19444,.66786,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,0],112:[.19444,.43056,0,0],113:[.19444,.43056,0,0],114:[0,.43056,0,0],115:[0,.43056,0,0],116:[0,.61508,0,0],117:[0,.43056,0,0],118:[0,.43056,.01389,0],119:[0,.43056,.01389,0],120:[0,.43056,0,0],121:[.19444,.43056,.01389,0],122:[0,.43056,0,0],123:[.25,.75,0,0],124:[.25,.75,0,0],125:[.25,.75,0,0],126:[.35,.31786,0,0],160:[0,0,0,0],168:[0,.66786,0,0],172:[0,.43056,0,0],175:[0,.56778,0,0],176:[0,.69444,0,0],177:[.08333,.58333,0,0],180:[0,.69444,0,0],215:[.08333,.58333,0,0],247:[.08333,.58333,0,0],305:[0,.43056,0,0],567:[.19444,.43056,0,0],710:[0,.69444,0,0],711:[0,.62847,0,0],713:[0,.56778,0,0],714:[0,.69444,0,0],715:[0,.69444,0,0],728:[0,.69444,0,0],729:[0,.66786,0,0],730:[0,.69444,0,0],732:[0,.66786,0,0],768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.66786,0,0],772:[0,.56778,0,0],774:[0,.69444,0,0],775:[0,.66786,0,0],776:[0,.66786,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.62847,0,0],824:[.19444,.69444,0,0],915:[0,.68333,0,0],916:[0,.68333,0,0],920:[0,.68333,0,0],923:[0,.68333,0,0],926:[0,.68333,0,0],928:[0,.68333,0,0],931:[0,.68333,0,0],933:[0,.68333,0,0],934:[0,.68333,0,0],936:[0,.68333,0,0],937:[0,.68333,0,0],8211:[0,.43056,.02778,0],8212:[0,.43056,.02778,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0],8224:[.19444,.69444,0,0],8225:[.19444,.69444,0,0],8230:[0,.12,0,0],8242:[0,.55556,0,0],8407:[0,.71444,.15382,0],8463:[0,.68889,0,0],8465:[0,.69444,0,0],8467:[0,.69444,0,.11111],8472:[.19444,.43056,0,.11111],8476:[0,.69444,0,0],8501:[0,.69444,0,0],8592:[-.13313,.36687,0,0],8593:[.19444,.69444,0,0],8594:[-.13313,.36687,0,0],8595:[.19444,.69444,0,0],8596:[-.13313,.36687,0,0],8597:[.25,.75,0,0],8598:[.19444,.69444,0,0],8599:[.19444,.69444,0,0],8600:[.19444,.69444,0,0],8601:[.19444,.69444,0,0],8614:[.011,.511,0,0],8617:[.011,.511,0,0],8618:[.011,.511,0,0],8636:[-.13313,.36687,0,0],8637:[-.13313,.36687,0,0],8640:[-.13313,.36687,0,0],8641:[-.13313,.36687,0,0],8652:[.011,.671,0,0],8656:[-.13313,.36687,0,0],8657:[.19444,.69444,0,0],8658:[-.13313,.36687,0,0],8659:[.19444,.69444,0,0],8660:[-.13313,.36687,0,0],8661:[.25,.75,0,0],8704:[0,.69444,0,0],8706:[0,.69444,.05556,.08334],8707:[0,.69444,0,0],8709:[.05556,.75,0,0],8711:[0,.68333,0,0],8712:[.0391,.5391,0,0],8715:[.0391,.5391,0,0],8722:[.08333,.58333,0,0],8723:[.08333,.58333,0,0],8725:[.25,.75,0,0],8726:[.25,.75,0,0],8727:[-.03472,.46528,0,0],8728:[-.05555,.44445,0,0],8729:[-.05555,.44445,0,0],8730:[.2,.8,0,0],8733:[0,.43056,0,0],8734:[0,.43056,0,0],8736:[0,.69224,0,0],8739:[.25,.75,0,0],8741:[.25,.75,0,0],8743:[0,.55556,0,0],8744:[0,.55556,0,0],8745:[0,.55556,0,0],8746:[0,.55556,0,0],8747:[.19444,.69444,.11111,0],8764:[-.13313,.36687,0,0],8768:[.19444,.69444,0,0],8771:[-.03625,.46375,0,0],8773:[-.022,.589,0,0],8776:[-.01688,.48312,0,0],8781:[-.03625,.46375,0,0],8784:[-.133,.67,0,0],8800:[.215,.716,0,0],8801:[-.03625,.46375,0,0],8804:[.13597,.63597,0,0],8805:[.13597,.63597,0,0],8810:[.0391,.5391,0,0],8811:[.0391,.5391,0,0],8826:[.0391,.5391,0,0],8827:[.0391,.5391,0,0],8834:[.0391,.5391,0,0],8835:[.0391,.5391,0,0],8838:[.13597,.63597,0,0],8839:[.13597,.63597,0,0],8846:[0,.55556,0,0],8849:[.13597,.63597,0,0],8850:[.13597,.63597,0,0],8851:[0,.55556,0,0],8852:[0,.55556,0,0],8853:[.08333,.58333,0,0],8854:[.08333,.58333,0,0],8855:[.08333,.58333,0,0],8856:[.08333,.58333,0,0],8857:[.08333,.58333,0,0],8866:[0,.69444,0,0],8867:[0,.69444,0,0],8868:[0,.69444,0,0],8869:[0,.69444,0,0],8872:[.249,.75,0,0],8900:[-.05555,.44445,0,0],8901:[-.05555,.44445,0,0],8902:[-.03472,.46528,0,0],8904:[.005,.505,0,0],8942:[.03,.9,0,0],8943:[-.19,.31,0,0],8945:[-.1,.82,0,0],8968:[.25,.75,0,0],8969:[.25,.75,0,0],8970:[.25,.75,0,0],8971:[.25,.75,0,0],8994:[-.14236,.35764,0,0],8995:[-.14236,.35764,0,0],9136:[.244,.744,0,0],9137:[.244,.744,0,0],9651:[.19444,.69444,0,0],9657:[-.03472,.46528,0,0],9661:[.19444,.69444,0,0],9667:[-.03472,.46528,0,0],9711:[.19444,.69444,0,0],9824:[.12963,.69444,0,0],9825:[.12963,.69444,0,0],9826:[.12963,.69444,0,0],9827:[.12963,.69444,0,0],9837:[0,.75,0,0],9838:[.19444,.69444,0,0],9839:[.19444,.69444,0,0],10216:[.25,.75,0,0],10217:[.25,.75,0,0],10222:[.244,.744,0,0],10223:[.244,.744,0,0],10229:[.011,.511,0,0],10230:[.011,.511,0,0],10231:[.011,.511,0,0],10232:[.024,.525,0,0],10233:[.024,.525,0,0],10234:[.024,.525,0,0],10236:[.011,.511,0,0],10815:[0,.68333,0,0],10927:[.13597,.63597,0,0],10928:[.13597,.63597,0,0]},"Math-BoldItalic":{47:[.19444,.69444,0,0],65:[0,.68611,0,0],66:[0,.68611,.04835,0],67:[0,.68611,.06979,0],68:[0,.68611,.03194,0],69:[0,.68611,.05451,0],70:[0,.68611,.15972,0],71:[0,.68611,0,0],72:[0,.68611,.08229,0],73:[0,.68611,.07778,0],74:[0,.68611,.10069,0],75:[0,.68611,.06979,0],76:[0,.68611,0,0],77:[0,.68611,.11424,0],78:[0,.68611,.11424,0],79:[0,.68611,.03194,0],80:[0,.68611,.15972,0],81:[.19444,.68611,0,0],82:[0,.68611,.00421,0],83:[0,.68611,.05382,0],84:[0,.68611,.15972,0],85:[0,.68611,.11424,0],86:[0,.68611,.25555,0],87:[0,.68611,.15972,0],88:[0,.68611,.07778,0],89:[0,.68611,.25555,0],90:[0,.68611,.06979,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[.19444,.69444,.11042,0],103:[.19444,.44444,.03704,0],104:[0,.69444,0,0],105:[0,.69326,0,0],106:[.19444,.69326,.0622,0],107:[0,.69444,.01852,0],108:[0,.69444,.0088,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,.03704,0],114:[0,.44444,.03194,0],115:[0,.44444,0,0],116:[0,.63492,0,0],117:[0,.44444,0,0],118:[0,.44444,.03704,0],119:[0,.44444,.02778,0],120:[0,.44444,0,0],121:[.19444,.44444,.03704,0],122:[0,.44444,.04213,0],915:[0,.68611,.15972,0],916:[0,.68611,0,0],920:[0,.68611,.03194,0],923:[0,.68611,0,0],926:[0,.68611,.07458,0],928:[0,.68611,.08229,0],931:[0,.68611,.05451,0],933:[0,.68611,.15972,0],934:[0,.68611,0,0],936:[0,.68611,.11653,0],937:[0,.68611,.04835,0],945:[0,.44444,0,0],946:[.19444,.69444,.03403,0],947:[.19444,.44444,.06389,0],948:[0,.69444,.03819,0],949:[0,.44444,0,0],950:[.19444,.69444,.06215,0],951:[.19444,.44444,.03704,0],952:[0,.69444,.03194,0],953:[0,.44444,0,0],954:[0,.44444,0,0],955:[0,.69444,0,0],956:[.19444,.44444,0,0],957:[0,.44444,.06898,0],958:[.19444,.69444,.03021,0],959:[0,.44444,0,0],960:[0,.44444,.03704,0],961:[.19444,.44444,0,0],962:[.09722,.44444,.07917,0],963:[0,.44444,.03704,0],964:[0,.44444,.13472,0],965:[0,.44444,.03704,0],966:[.19444,.44444,0,0],967:[.19444,.44444,0,0],968:[.19444,.69444,.03704,0],969:[0,.44444,.03704,0],977:[0,.69444,0,0],981:[.19444,.69444,0,0],982:[0,.44444,.03194,0],1009:[.19444,.44444,0,0],1013:[0,.44444,0,0]},"Math-Italic":{47:[.19444,.69444,0,0],65:[0,.68333,0,.13889],66:[0,.68333,.05017,.08334],67:[0,.68333,.07153,.08334],68:[0,.68333,.02778,.05556],69:[0,.68333,.05764,.08334],70:[0,.68333,.13889,.08334],71:[0,.68333,0,.08334],72:[0,.68333,.08125,.05556],73:[0,.68333,.07847,.11111],74:[0,.68333,.09618,.16667],75:[0,.68333,.07153,.05556],76:[0,.68333,0,.02778],77:[0,.68333,.10903,.08334],78:[0,.68333,.10903,.08334],79:[0,.68333,.02778,.08334],80:[0,.68333,.13889,.08334],81:[.19444,.68333,0,.08334],82:[0,.68333,.00773,.08334],83:[0,.68333,.05764,.08334],84:[0,.68333,.13889,.08334],85:[0,.68333,.10903,.02778],86:[0,.68333,.22222,0],87:[0,.68333,.13889,0],88:[0,.68333,.07847,.08334],89:[0,.68333,.22222,0],90:[0,.68333,.07153,.08334],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,.05556],100:[0,.69444,0,.16667],101:[0,.43056,0,.05556],102:[.19444,.69444,.10764,.16667],103:[.19444,.43056,.03588,.02778],104:[0,.69444,0,0],105:[0,.65952,0,0],106:[.19444,.65952,.05724,0],107:[0,.69444,.03148,0],108:[0,.69444,.01968,.08334],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,.05556],112:[.19444,.43056,0,.08334],113:[.19444,.43056,.03588,.08334],114:[0,.43056,.02778,.05556],115:[0,.43056,0,.05556],116:[0,.61508,0,.08334],117:[0,.43056,0,.02778],118:[0,.43056,.03588,.02778],119:[0,.43056,.02691,.08334],120:[0,.43056,0,.02778],121:[.19444,.43056,.03588,.05556],122:[0,.43056,.04398,.05556],915:[0,.68333,.13889,.08334],916:[0,.68333,0,.16667],920:[0,.68333,.02778,.08334],923:[0,.68333,0,.16667],926:[0,.68333,.07569,.08334],928:[0,.68333,.08125,.05556],931:[0,.68333,.05764,.08334],933:[0,.68333,.13889,.05556],934:[0,.68333,0,.08334],936:[0,.68333,.11,.05556],937:[0,.68333,.05017,.08334],945:[0,.43056,.0037,.02778],946:[.19444,.69444,.05278,.08334],947:[.19444,.43056,.05556,0],948:[0,.69444,.03785,.05556],949:[0,.43056,0,.08334],950:[.19444,.69444,.07378,.08334],951:[.19444,.43056,.03588,.05556],952:[0,.69444,.02778,.08334],953:[0,.43056,0,.05556],954:[0,.43056,0,0],955:[0,.69444,0,0],956:[.19444,.43056,0,.02778],957:[0,.43056,.06366,.02778],958:[.19444,.69444,.04601,.11111],959:[0,.43056,0,.05556],960:[0,.43056,.03588,0],961:[.19444,.43056,0,.08334],962:[.09722,.43056,.07986,.08334],963:[0,.43056,.03588,0],964:[0,.43056,.1132,.02778],965:[0,.43056,.03588,.02778],966:[.19444,.43056,0,.08334],967:[.19444,.43056,0,.05556],968:[.19444,.69444,.03588,.11111],969:[0,.43056,.03588,0],977:[0,.69444,0,.08334],981:[.19444,.69444,0,.08334],982:[0,.43056,.02778,0],1009:[.19444,.43056,0,.08334],1013:[0,.43056,0,.05556]},"Math-Regular":{65:[0,.68333,0,.13889],66:[0,.68333,.05017,.08334],67:[0,.68333,.07153,.08334],68:[0,.68333,.02778,.05556],69:[0,.68333,.05764,.08334],70:[0,.68333,.13889,.08334],71:[0,.68333,0,.08334],72:[0,.68333,.08125,.05556],73:[0,.68333,.07847,.11111],74:[0,.68333,.09618,.16667],75:[0,.68333,.07153,.05556],76:[0,.68333,0,.02778],77:[0,.68333,.10903,.08334],78:[0,.68333,.10903,.08334],79:[0,.68333,.02778,.08334],80:[0,.68333,.13889,.08334],81:[.19444,.68333,0,.08334],82:[0,.68333,.00773,.08334],83:[0,.68333,.05764,.08334],84:[0,.68333,.13889,.08334],85:[0,.68333,.10903,.02778],86:[0,.68333,.22222,0],87:[0,.68333,.13889,0],88:[0,.68333,.07847,.08334],89:[0,.68333,.22222,0],90:[0,.68333,.07153,.08334],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,.05556],100:[0,.69444,0,.16667],101:[0,.43056,0,.05556],102:[.19444,.69444,.10764,.16667],103:[.19444,.43056,.03588,.02778],104:[0,.69444,0,0],105:[0,.65952,0,0],106:[.19444,.65952,.05724,0],107:[0,.69444,.03148,0],108:[0,.69444,.01968,.08334],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,.05556],112:[.19444,.43056,0,.08334],113:[.19444,.43056,.03588,.08334],114:[0,.43056,.02778,.05556],115:[0,.43056,0,.05556],116:[0,.61508,0,.08334],117:[0,.43056,0,.02778],118:[0,.43056,.03588,.02778],119:[0,.43056,.02691,.08334],120:[0,.43056,0,.02778],121:[.19444,.43056,.03588,.05556],122:[0,.43056,.04398,.05556],915:[0,.68333,.13889,.08334],916:[0,.68333,0,.16667],920:[0,.68333,.02778,.08334],923:[0,.68333,0,.16667],926:[0,.68333,.07569,.08334],928:[0,.68333,.08125,.05556],931:[0,.68333,.05764,.08334],933:[0,.68333,.13889,.05556],934:[0,.68333,0,.08334],936:[0,.68333,.11,.05556],937:[0,.68333,.05017,.08334],945:[0,.43056,.0037,.02778],946:[.19444,.69444,.05278,.08334],947:[.19444,.43056,.05556,0],948:[0,.69444,.03785,.05556],949:[0,.43056,0,.08334],950:[.19444,.69444,.07378,.08334],951:[.19444,.43056,.03588,.05556],952:[0,.69444,.02778,.08334],953:[0,.43056,0,.05556],954:[0,.43056,0,0],955:[0,.69444,0,0],956:[.19444,.43056,0,.02778],957:[0,.43056,.06366,.02778],958:[.19444,.69444,.04601,.11111],959:[0,.43056,0,.05556],960:[0,.43056,.03588,0],961:[.19444,.43056,0,.08334],962:[.09722,.43056,.07986,.08334],963:[0,.43056,.03588,0],964:[0,.43056,.1132,.02778],965:[0,.43056,.03588,.02778],966:[.19444,.43056,0,.08334],967:[.19444,.43056,0,.05556],968:[.19444,.69444,.03588,.11111],969:[0,.43056,.03588,0],977:[0,.69444,0,.08334],981:[.19444,.69444,0,.08334],982:[0,.43056,.02778,0],1009:[.19444,.43056,0,.08334],1013:[0,.43056,0,.05556]},"SansSerif-Regular":{33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.08333,.58333,0,0],44:[.125,.08333,0,0],45:[0,.44444,0,0],46:[0,.08333,0,0],47:[.25,.75,0,0],48:[0,.65556,0,0],49:[0,.65556,0,0],50:[0,.65556,0,0],51:[0,.65556,0,0],52:[0,.65556,0,0],53:[0,.65556,0,0],54:[0,.65556,0,0],55:[0,.65556,0,0],56:[0,.65556,0,0],57:[0,.65556,0,0],58:[0,.44444,0,0],59:[.125,.44444,0,0],61:[-.13,.37,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.69444,0,0],66:[0,.69444,0,0],67:[0,.69444,0,0],68:[0,.69444,0,0],69:[0,.69444,0,0],70:[0,.69444,0,0],71:[0,.69444,0,0],72:[0,.69444,0,0],73:[0,.69444,0,0],74:[0,.69444,0,0],75:[0,.69444,0,0],76:[0,.69444,0,0],77:[0,.69444,0,0],78:[0,.69444,0,0],79:[0,.69444,0,0],80:[0,.69444,0,0],81:[.125,.69444,0,0],82:[0,.69444,0,0],83:[0,.69444,0,0],84:[0,.69444,0,0],85:[0,.69444,0,0],86:[0,.69444,.01389,0],87:[0,.69444,.01389,0],88:[0,.69444,0,0],89:[0,.69444,.025,0],90:[0,.69444,0,0],91:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.35,.09444,.02778,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[0,.69444,.06944,0],103:[.19444,.44444,.01389,0],104:[0,.69444,0,0],105:[0,.67937,0,0],106:[.19444,.67937,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,0,0],114:[0,.44444,.01389,0],115:[0,.44444,0,0],116:[0,.57143,0,0],117:[0,.44444,0,0],118:[0,.44444,.01389,0],119:[0,.44444,.01389,0],120:[0,.44444,0,0],121:[.19444,.44444,.01389,0],122:[0,.44444,0,0],126:[.35,.32659,0,0],305:[0,.44444,0,0],567:[.19444,.44444,0,0],
768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.67659,0,0],772:[0,.60889,0,0],774:[0,.69444,0,0],775:[0,.67937,0,0],776:[0,.67937,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.63194,0,0],915:[0,.69444,0,0],916:[0,.69444,0,0],920:[0,.69444,0,0],923:[0,.69444,0,0],926:[0,.69444,0,0],928:[0,.69444,0,0],931:[0,.69444,0,0],933:[0,.69444,0,0],934:[0,.69444,0,0],936:[0,.69444,0,0],937:[0,.69444,0,0],8211:[0,.44444,.02778,0],8212:[0,.44444,.02778,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0]},"Script-Regular":{65:[0,.7,.22925,0],66:[0,.7,.04087,0],67:[0,.7,.1689,0],68:[0,.7,.09371,0],69:[0,.7,.18583,0],70:[0,.7,.13634,0],71:[0,.7,.17322,0],72:[0,.7,.29694,0],73:[0,.7,.19189,0],74:[.27778,.7,.19189,0],75:[0,.7,.31259,0],76:[0,.7,.19189,0],77:[0,.7,.15981,0],78:[0,.7,.3525,0],79:[0,.7,.08078,0],80:[0,.7,.08078,0],81:[0,.7,.03305,0],82:[0,.7,.06259,0],83:[0,.7,.19189,0],84:[0,.7,.29087,0],85:[0,.7,.25815,0],86:[0,.7,.27523,0],87:[0,.7,.27523,0],88:[0,.7,.26006,0],89:[0,.7,.2939,0],90:[0,.7,.24037,0]},"Size1-Regular":{40:[.35001,.85,0,0],41:[.35001,.85,0,0],47:[.35001,.85,0,0],91:[.35001,.85,0,0],92:[.35001,.85,0,0],93:[.35001,.85,0,0],123:[.35001,.85,0,0],125:[.35001,.85,0,0],710:[0,.72222,0,0],732:[0,.72222,0,0],770:[0,.72222,0,0],771:[0,.72222,0,0],8214:[-99e-5,.601,0,0],8593:[1e-5,.6,0,0],8595:[1e-5,.6,0,0],8657:[1e-5,.6,0,0],8659:[1e-5,.6,0,0],8719:[.25001,.75,0,0],8720:[.25001,.75,0,0],8721:[.25001,.75,0,0],8730:[.35001,.85,0,0],8739:[-.00599,.606,0,0],8741:[-.00599,.606,0,0],8747:[.30612,.805,.19445,0],8748:[.306,.805,.19445,0],8749:[.306,.805,.19445,0],8750:[.30612,.805,.19445,0],8896:[.25001,.75,0,0],8897:[.25001,.75,0,0],8898:[.25001,.75,0,0],8899:[.25001,.75,0,0],8968:[.35001,.85,0,0],8969:[.35001,.85,0,0],8970:[.35001,.85,0,0],8971:[.35001,.85,0,0],9168:[-99e-5,.601,0,0],10216:[.35001,.85,0,0],10217:[.35001,.85,0,0],10752:[.25001,.75,0,0],10753:[.25001,.75,0,0],10754:[.25001,.75,0,0],10756:[.25001,.75,0,0],10758:[.25001,.75,0,0]},"Size2-Regular":{40:[.65002,1.15,0,0],41:[.65002,1.15,0,0],47:[.65002,1.15,0,0],91:[.65002,1.15,0,0],92:[.65002,1.15,0,0],93:[.65002,1.15,0,0],123:[.65002,1.15,0,0],125:[.65002,1.15,0,0],710:[0,.75,0,0],732:[0,.75,0,0],770:[0,.75,0,0],771:[0,.75,0,0],8719:[.55001,1.05,0,0],8720:[.55001,1.05,0,0],8721:[.55001,1.05,0,0],8730:[.65002,1.15,0,0],8747:[.86225,1.36,.44445,0],8748:[.862,1.36,.44445,0],8749:[.862,1.36,.44445,0],8750:[.86225,1.36,.44445,0],8896:[.55001,1.05,0,0],8897:[.55001,1.05,0,0],8898:[.55001,1.05,0,0],8899:[.55001,1.05,0,0],8968:[.65002,1.15,0,0],8969:[.65002,1.15,0,0],8970:[.65002,1.15,0,0],8971:[.65002,1.15,0,0],10216:[.65002,1.15,0,0],10217:[.65002,1.15,0,0],10752:[.55001,1.05,0,0],10753:[.55001,1.05,0,0],10754:[.55001,1.05,0,0],10756:[.55001,1.05,0,0],10758:[.55001,1.05,0,0]},"Size3-Regular":{40:[.95003,1.45,0,0],41:[.95003,1.45,0,0],47:[.95003,1.45,0,0],91:[.95003,1.45,0,0],92:[.95003,1.45,0,0],93:[.95003,1.45,0,0],123:[.95003,1.45,0,0],125:[.95003,1.45,0,0],710:[0,.75,0,0],732:[0,.75,0,0],770:[0,.75,0,0],771:[0,.75,0,0],8730:[.95003,1.45,0,0],8968:[.95003,1.45,0,0],8969:[.95003,1.45,0,0],8970:[.95003,1.45,0,0],8971:[.95003,1.45,0,0],10216:[.95003,1.45,0,0],10217:[.95003,1.45,0,0]},"Size4-Regular":{40:[1.25003,1.75,0,0],41:[1.25003,1.75,0,0],47:[1.25003,1.75,0,0],91:[1.25003,1.75,0,0],92:[1.25003,1.75,0,0],93:[1.25003,1.75,0,0],123:[1.25003,1.75,0,0],125:[1.25003,1.75,0,0],710:[0,.825,0,0],732:[0,.825,0,0],770:[0,.825,0,0],771:[0,.825,0,0],8730:[1.25003,1.75,0,0],8968:[1.25003,1.75,0,0],8969:[1.25003,1.75,0,0],8970:[1.25003,1.75,0,0],8971:[1.25003,1.75,0,0],9115:[.64502,1.155,0,0],9116:[1e-5,.6,0,0],9117:[.64502,1.155,0,0],9118:[.64502,1.155,0,0],9119:[1e-5,.6,0,0],9120:[.64502,1.155,0,0],9121:[.64502,1.155,0,0],9122:[-99e-5,.601,0,0],9123:[.64502,1.155,0,0],9124:[.64502,1.155,0,0],9125:[-99e-5,.601,0,0],9126:[.64502,1.155,0,0],9127:[1e-5,.9,0,0],9128:[.65002,1.15,0,0],9129:[.90001,0,0,0],9130:[0,.3,0,0],9131:[1e-5,.9,0,0],9132:[.65002,1.15,0,0],9133:[.90001,0,0,0],9143:[.88502,.915,0,0],10216:[1.25003,1.75,0,0],10217:[1.25003,1.75,0,0],57344:[-.00499,.605,0,0],57345:[-.00499,.605,0,0],57680:[0,.12,0,0],57681:[0,.12,0,0],57682:[0,.12,0,0],57683:[0,.12,0,0]},"Typewriter-Regular":{33:[0,.61111,0,0],34:[0,.61111,0,0],35:[0,.61111,0,0],36:[.08333,.69444,0,0],37:[.08333,.69444,0,0],38:[0,.61111,0,0],39:[0,.61111,0,0],40:[.08333,.69444,0,0],41:[.08333,.69444,0,0],42:[0,.52083,0,0],43:[-.08056,.53055,0,0],44:[.13889,.125,0,0],45:[-.08056,.53055,0,0],46:[0,.125,0,0],47:[.08333,.69444,0,0],48:[0,.61111,0,0],49:[0,.61111,0,0],50:[0,.61111,0,0],51:[0,.61111,0,0],52:[0,.61111,0,0],53:[0,.61111,0,0],54:[0,.61111,0,0],55:[0,.61111,0,0],56:[0,.61111,0,0],57:[0,.61111,0,0],58:[0,.43056,0,0],59:[.13889,.43056,0,0],60:[-.05556,.55556,0,0],61:[-.19549,.41562,0,0],62:[-.05556,.55556,0,0],63:[0,.61111,0,0],64:[0,.61111,0,0],65:[0,.61111,0,0],66:[0,.61111,0,0],67:[0,.61111,0,0],68:[0,.61111,0,0],69:[0,.61111,0,0],70:[0,.61111,0,0],71:[0,.61111,0,0],72:[0,.61111,0,0],73:[0,.61111,0,0],74:[0,.61111,0,0],75:[0,.61111,0,0],76:[0,.61111,0,0],77:[0,.61111,0,0],78:[0,.61111,0,0],79:[0,.61111,0,0],80:[0,.61111,0,0],81:[.13889,.61111,0,0],82:[0,.61111,0,0],83:[0,.61111,0,0],84:[0,.61111,0,0],85:[0,.61111,0,0],86:[0,.61111,0,0],87:[0,.61111,0,0],88:[0,.61111,0,0],89:[0,.61111,0,0],90:[0,.61111,0,0],91:[.08333,.69444,0,0],92:[.08333,.69444,0,0],93:[.08333,.69444,0,0],94:[0,.61111,0,0],95:[.09514,0,0,0],96:[0,.61111,0,0],97:[0,.43056,0,0],98:[0,.61111,0,0],99:[0,.43056,0,0],100:[0,.61111,0,0],101:[0,.43056,0,0],102:[0,.61111,0,0],103:[.22222,.43056,0,0],104:[0,.61111,0,0],105:[0,.61111,0,0],106:[.22222,.61111,0,0],107:[0,.61111,0,0],108:[0,.61111,0,0],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,0],112:[.22222,.43056,0,0],113:[.22222,.43056,0,0],114:[0,.43056,0,0],115:[0,.43056,0,0],116:[0,.55358,0,0],117:[0,.43056,0,0],118:[0,.43056,0,0],119:[0,.43056,0,0],120:[0,.43056,0,0],121:[.22222,.43056,0,0],122:[0,.43056,0,0],123:[.08333,.69444,0,0],124:[.08333,.69444,0,0],125:[.08333,.69444,0,0],126:[0,.61111,0,0],127:[0,.61111,0,0],305:[0,.43056,0,0],567:[.22222,.43056,0,0],768:[0,.61111,0,0],769:[0,.61111,0,0],770:[0,.61111,0,0],771:[0,.61111,0,0],772:[0,.56555,0,0],774:[0,.61111,0,0],776:[0,.61111,0,0],778:[0,.61111,0,0],780:[0,.56597,0,0],915:[0,.61111,0,0],916:[0,.61111,0,0],920:[0,.61111,0,0],923:[0,.61111,0,0],926:[0,.61111,0,0],928:[0,.61111,0,0],931:[0,.61111,0,0],933:[0,.61111,0,0],934:[0,.61111,0,0],936:[0,.61111,0,0],937:[0,.61111,0,0],2018:[0,.61111,0,0],2019:[0,.61111,0,0],8242:[0,.61111,0,0]}}},{}],22:[function(e,t,r){"use strict";var a=e("./utils");var i=e("./ParseError");var s=e("./parseData");var n=s.ParseNode;function l(e,r,a){if(typeof e==="string"){e=[e]}if(typeof r==="number"){r={numArgs:r}}var i={numArgs:r.numArgs,argTypes:r.argTypes,greediness:r.greediness===undefined?1:r.greediness,allowedInText:!!r.allowedInText,numOptionalArgs:r.numOptionalArgs||0,infix:!!r.infix,handler:a};for(var s=0;s<e.length;++s){t.exports[e[s]]=i}}var o=function e(t){if(t.type==="ordgroup"){return t.value}else{return[t]}};l("\\sqrt",{numArgs:1,numOptionalArgs:1},function(e,t){var r=t[0];var a=t[1];return{type:"sqrt",body:a,index:r}});var u={"\\text":undefined,"\\textrm":"mathrm","\\textsf":"mathsf","\\texttt":"mathtt","\\textnormal":"mathrm","\\textbf":"mathbf","\\textit":"textit"};l(["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textit"],{numArgs:1,argTypes:["text"],greediness:2,allowedInText:true},function(e,t){var r=t[0];return{type:"text",body:o(r),style:u[e.funcName]}});l("\\xmlClass",{numArgs:2,allowedInText:true,greediness:3,argTypes:["string","original"]},function(e,t){var r=t[0];var a=t[1];var i=void 0;if(a.type==="ordgroup"){i=a.value}else{i=[a]}return{type:"xmlClass",cl:r,value:i}});l("\\color",{numArgs:2,allowedInText:true,greediness:3,argTypes:["color","original"]},function(e,t){var r=t[0];var a=t[1];return{type:"color",color:r.value,value:o(a)}});l("\\overline",{numArgs:1},function(e,t){var r=t[0];return{type:"overline",body:r}});l("\\underline",{numArgs:1},function(e,t){var r=t[0];return{type:"underline",body:r}});l("\\rule",{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},function(e,t){var r=t[0];var a=t[1];var i=t[2];return{type:"rule",shift:r&&r.value,width:a.value,height:i.value}});l("\\cursor",{numArgs:1,numOptionalArgs:1,argTypes:["size","size"]},function(e,t){var r=t[0];var a=t[1];return{type:"cursor",shift:r&&r.value,height:a.value}});l(["\\kern","\\mkern"],{numArgs:1,argTypes:["size"]},function(e,t){return{type:"kern",dimension:t[0].value}});l("\\KaTeX",{numArgs:0},function(e){return{type:"katex"}});l("\\phantom",{numArgs:1},function(e,t){var r=t[0];return{type:"phantom",value:o(r)}});l(["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],{numArgs:1},function(e,t){var r=t[0];return{type:"mclass",mclass:"m"+e.funcName.substr(5),value:o(r)}});l("\\stackrel",{numArgs:2},function(e,t){var r=t[0];var a=t[1];var i=new n("op",{type:"op",limits:true,alwaysHandleSupSub:true,symbol:false,value:o(a)},a.mode);var s=new n("supsub",{base:i,sup:r,sub:null},r.mode);return{type:"mclass",mclass:"mrel",value:[s]}});l("\\bmod",{numArgs:0},function(e,t){return{type:"mod",modType:"bmod",value:null}});l(["\\pod","\\pmod","\\mod"],{numArgs:1},function(e,t){var r=t[0];return{type:"mod",modType:e.funcName.substr(1),value:o(r)}});var p={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}};var h=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","<",">","\\langle","\\rangle","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];var c={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak"};l(["\\blue","\\orange","\\pink","\\red","\\green","\\gray","\\purple","\\blueA","\\blueB","\\blueC","\\blueD","\\blueE","\\tealA","\\tealB","\\tealC","\\tealD","\\tealE","\\greenA","\\greenB","\\greenC","\\greenD","\\greenE","\\goldA","\\goldB","\\goldC","\\goldD","\\goldE","\\redA","\\redB","\\redC","\\redD","\\redE","\\maroonA","\\maroonB","\\maroonC","\\maroonD","\\maroonE","\\purpleA","\\purpleB","\\purpleC","\\purpleD","\\purpleE","\\mintA","\\mintB","\\mintC","\\grayA","\\grayB","\\grayC","\\grayD","\\grayE","\\grayF","\\grayG","\\grayH","\\grayI","\\kaBlue","\\kaGreen"],{numArgs:1,allowedInText:true,greediness:3},function(e,t){var r=t[0];return{type:"color",color:"katex-"+e.funcName.slice(1),value:o(r)}});l(["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],{numArgs:0},function(e){return{type:"op",limits:false,symbol:false,body:e.funcName}});l(["\\det","\\gcd","\\inf","\\lim","\\liminf","\\limsup","\\max","\\min","\\Pr","\\sup"],{numArgs:0},function(e){return{type:"op",limits:true,symbol:false,body:e.funcName}});l(["\\int","\\iint","\\iiint","\\oint"],{numArgs:0},function(e){return{type:"op",limits:false,symbol:true,body:e.funcName}});l(["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint"],{numArgs:0},function(e){return{type:"op",limits:true,symbol:true,body:e.funcName}});l("\\mathop",{numArgs:1},function(e,t){var r=t[0];return{type:"op",limits:false,symbol:false,value:o(r)}});l(["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac"],{numArgs:2,greediness:2},function(e,t){var r=t[0];var a=t[1];var i=void 0;var s=null;var n=null;var l="auto";switch(e.funcName){case"\\dfrac":case"\\frac":case"\\tfrac":i=true;break;case"\\\\atopfrac":i=false;break;case"\\dbinom":case"\\binom":case"\\tbinom":i=false;s="(";n=")";break;default:throw new Error("Unrecognized genfrac command")}switch(e.funcName){case"\\dfrac":case"\\dbinom":l="display";break;case"\\tfrac":case"\\tbinom":l="text";break}return{type:"genfrac",numer:r,denom:a,hasBarLine:i,leftDelim:s,rightDelim:n,size:l}});l(["\\llap","\\rlap"],{numArgs:1,allowedInText:true},function(e,t){var r=t[0];return{type:e.funcName.slice(1),body:r}});var v=function e(t,r){if(a.contains(h,t.value)){return t}else{throw new i("Invalid delimiter: '"+t.value+"' after '"+r.funcName+"'",t)}};l(["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],{numArgs:1},function(e,t){var r=v(t[0],e);return{type:"delimsizing",size:p[e.funcName].size,mclass:p[e.funcName].mclass,value:r.value}});l(["\\left","\\right"],{numArgs:1},function(e,t){var r=v(t[0],e);return{type:"leftright",value:r.value}});l("\\middle",{numArgs:1},function(e,t){var r=v(t[0],e);if(!e.parser.leftrightDepth){throw new i("\\middle without preceding \\left",r)}return{type:"middle",value:r.value}});l(["\\tiny","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"],0,null);l(["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],0,null);l(["\\mathrm","\\mathit","\\mathbf","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],{numArgs:1,greediness:2},function(e,t){var r=t[0];var a=e.funcName;if(a in c){a=c[a]}return{type:"font",font:a.slice(1),body:r}});l(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot"],{numArgs:1},function(e,t){var r=t[0];return{type:"accent",accent:e.funcName,base:r}});l(["\\over","\\choose","\\atop"],{numArgs:0,infix:true},function(e){var t=void 0;switch(e.funcName){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",replaceWith:t,token:e.token}});l(["\\\\","\\cr"],{numArgs:0,numOptionalArgs:1,argTypes:["size"]},function(e,t){var r=t[0];return{type:"cr",size:r}});l(["\\begin","\\end"],{numArgs:1,argTypes:["text"]},function(e,t){var r=t[0];if(r.type!=="ordgroup"){throw new i("Invalid environment name",r)}var a="";for(var s=0;s<r.value.length;++s){a+=r.value[s].value}return{type:"environment",name:a,nameGroup:r}})},{"./ParseError":9,"./parseData":24,"./utils":28}],23:[function(e,t,r){"use strict";var a=e("./utils");function i(e,t){this.type=e;this.attributes={};this.children=t||[]}i.prototype.setAttribute=function(e,t){this.attributes[e]=t};i.prototype.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e.setAttribute(t,this.attributes[t])}}for(var r=0;r<this.children.length;r++){e.appendChild(this.children[r].toNode())}return e};i.prototype.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e+=" "+t+'="';e+=a.escape(this.attributes[t]);e+='"'}}e+=">";for(var r=0;r<this.children.length;r++){e+=this.children[r].toMarkup()}e+="</"+this.type+">";return e};function s(e){this.text=e}s.prototype.toNode=function(){return document.createTextNode(this.text)};s.prototype.toMarkup=function(){return a.escape(this.text)};t.exports={MathNode:i,TextNode:s}},{"./utils":28}],24:[function(e,t,r){"use strict";function a(e,t,r,a,i){this.type=e;this.value=t;this.mode=r;if(a&&(!i||i.lexer===a.lexer)){this.lexer=a.lexer;this.start=a.start;this.end=(i||a).end}}t.exports={ParseNode:a}},{}],25:[function(e,t,r){"use strict";var a=e("./Parser");var i=function e(t,r){if(!(typeof t==="string"||t instanceof String)){throw new TypeError("KaTeX can only parse string typed expression")}var i=new a(t,r);return i.parse()};t.exports=i},{"./Parser":10}],26:[function(e,t,r){"use strict";t.exports={math:{},text:{}};function a(e,r,a,i,s){t.exports[e][s]={font:r,group:a,replace:i}}var i="math";var s="text";var n="main";var l="ams";var o="accent";var u="bin";var p="close";var h="inner";var c="mathord";var v="op";var m="open";var f="punct";var d="rel";var g="spacing";var y="textord";a(i,n,d,"\u2261","\\equiv");a(i,n,d,"\u227a","\\prec");a(i,n,d,"\u227b","\\succ");a(i,n,d,"\u223c","\\sim");a(i,n,d,"\u22a5","\\perp");a(i,n,d,"\u2aaf","\\preceq");a(i,n,d,"\u2ab0","\\succeq");a(i,n,d,"\u2243","\\simeq");a(i,n,d,"\u2223","\\mid");a(i,n,d,"\u226a","\\ll");a(i,n,d,"\u226b","\\gg");a(i,n,d,"\u224d","\\asymp");a(i,n,d,"\u2225","\\parallel");a(i,n,d,"\u22c8","\\bowtie");a(i,n,d,"\u2323","\\smile");a(i,n,d,"\u2291","\\sqsubseteq");a(i,n,d,"\u2292","\\sqsupseteq");a(i,n,d,"\u2250","\\doteq");a(i,n,d,"\u2322","\\frown");a(i,n,d,"\u220b","\\ni");a(i,n,d,"\u221d","\\propto");a(i,n,d,"\u22a2","\\vdash");a(i,n,d,"\u22a3","\\dashv");a(i,n,d,"\u220b","\\owns");a(i,n,f,".","\\ldotp");a(i,n,f,"\u22c5","\\cdotp");a(i,n,y,"#","\\#");a(s,n,y,"#","\\#");a(i,n,y,"&","\\&");a(s,n,y,"&","\\&");a(i,n,y,"\u2135","\\aleph");a(i,n,y,"\u2200","\\forall");a(i,n,y,"\u210f","\\hbar");a(i,n,y,"\u2203","\\exists");a(i,n,y,"\u2207","\\nabla");a(i,n,y,"\u266d","\\flat");a(i,n,y,"\u2113","\\ell");a(i,n,y,"\u266e","\\natural");a(i,n,y,"\u2663","\\clubsuit");a(i,n,y,"\u2118","\\wp");a(i,n,y,"\u266f","\\sharp");a(i,n,y,"\u2662","\\diamondsuit");a(i,n,y,"\u211c","\\Re");a(i,n,y,"\u2661","\\heartsuit");a(i,n,y,"\u2111","\\Im");a(i,n,y,"\u2660","\\spadesuit");a(i,n,y,"\u2020","\\dag");a(i,n,y,"\u2021","\\ddag");a(i,n,p,"\u23b1","\\rmoustache");a(i,n,m,"\u23b0","\\lmoustache");a(i,n,p,"\u27ef","\\rgroup");a(i,n,m,"\u27ee","\\lgroup");a(i,n,u,"\u2213","\\mp");a(i,n,u,"\u2296","\\ominus");a(i,n,u,"\u228e","\\uplus");a(i,n,u,"\u2293","\\sqcap");a(i,n,u,"\u2217","\\ast");a(i,n,u,"\u2294","\\sqcup");a(i,n,u,"\u25ef","\\bigcirc");a(i,n,u,"\u2219","\\bullet");a(i,n,u,"\u2021","\\ddagger");a(i,n,u,"\u2240","\\wr");a(i,n,u,"\u2a3f","\\amalg");a(i,n,d,"\u27f5","\\longleftarrow");a(i,n,d,"\u21d0","\\Leftarrow");a(i,n,d,"\u27f8","\\Longleftarrow");a(i,n,d,"\u27f6","\\longrightarrow");a(i,n,d,"\u21d2","\\Rightarrow");a(i,n,d,"\u27f9","\\Longrightarrow");a(i,n,d,"\u2194","\\leftrightarrow");a(i,n,d,"\u27f7","\\longleftrightarrow");a(i,n,d,"\u21d4","\\Leftrightarrow");a(i,n,d,"\u27fa","\\Longleftrightarrow");a(i,n,d,"\u21a6","\\mapsto");a(i,n,d,"\u27fc","\\longmapsto");a(i,n,d,"\u2197","\\nearrow");a(i,n,d,"\u21a9","\\hookleftarrow");a(i,n,d,"\u21aa","\\hookrightarrow");a(i,n,d,"\u2198","\\searrow");a(i,n,d,"\u21bc","\\leftharpoonup");a(i,n,d,"\u21c0","\\rightharpoonup");a(i,n,d,"\u2199","\\swarrow");a(i,n,d,"\u21bd","\\leftharpoondown");a(i,n,d,"\u21c1","\\rightharpoondown");a(i,n,d,"\u2196","\\nwarrow");a(i,n,d,"\u21cc","\\rightleftharpoons");a(i,l,d,"\u226e","\\nless");a(i,l,d,"\ue010","\\nleqslant");a(i,l,d,"\ue011","\\nleqq");a(i,l,d,"\u2a87","\\lneq");a(i,l,d,"\u2268","\\lneqq");a(i,l,d,"\ue00c","\\lvertneqq");a(i,l,d,"\u22e6","\\lnsim");a(i,l,d,"\u2a89","\\lnapprox");a(i,l,d,"\u2280","\\nprec");a(i,l,d,"\u22e0","\\npreceq");a(i,l,d,"\u22e8","\\precnsim");a(i,l,d,"\u2ab9","\\precnapprox");a(i,l,d,"\u2241","\\nsim");a(i,l,d,"\ue006","\\nshortmid");a(i,l,d,"\u2224","\\nmid");a(i,l,d,"\u22ac","\\nvdash");a(i,l,d,"\u22ad","\\nvDash");a(i,l,d,"\u22ea","\\ntriangleleft");a(i,l,d,"\u22ec","\\ntrianglelefteq");a(i,l,d,"\u228a","\\subsetneq");a(i,l,d,"\ue01a","\\varsubsetneq");a(i,l,d,"\u2acb","\\subsetneqq");a(i,l,d,"\ue017","\\varsubsetneqq");a(i,l,d,"\u226f","\\ngtr");a(i,l,d,"\ue00f","\\ngeqslant");a(i,l,d,"\ue00e","\\ngeqq");a(i,l,d,"\u2a88","\\gneq");a(i,l,d,"\u2269","\\gneqq");a(i,l,d,"\ue00d","\\gvertneqq");a(i,l,d,"\u22e7","\\gnsim");a(i,l,d,"\u2a8a","\\gnapprox");a(i,l,d,"\u2281","\\nsucc");a(i,l,d,"\u22e1","\\nsucceq");a(i,l,d,"\u22e9","\\succnsim");a(i,l,d,"\u2aba","\\succnapprox");a(i,l,d,"\u2246","\\ncong");a(i,l,d,"\ue007","\\nshortparallel");a(i,l,d,"\u2226","\\nparallel");a(i,l,d,"\u22af","\\nVDash");a(i,l,d,"\u22eb","\\ntriangleright");a(i,l,d,"\u22ed","\\ntrianglerighteq");a(i,l,d,"\ue018","\\nsupseteqq");a(i,l,d,"\u228b","\\supsetneq");a(i,l,d,"\ue01b","\\varsupsetneq");a(i,l,d,"\u2acc","\\supsetneqq");a(i,l,d,"\ue019","\\varsupsetneqq");a(i,l,d,"\u22ae","\\nVdash");a(i,l,d,"\u2ab5","\\precneqq");a(i,l,d,"\u2ab6","\\succneqq");a(i,l,d,"\ue016","\\nsubseteqq");a(i,l,u,"\u22b4","\\unlhd");a(i,l,u,"\u22b5","\\unrhd");a(i,l,d,"\u219a","\\nleftarrow");a(i,l,d,"\u219b","\\nrightarrow");a(i,l,d,"\u21cd","\\nLeftarrow");a(i,l,d,"\u21cf","\\nRightarrow");a(i,l,d,"\u21ae","\\nleftrightarrow");a(i,l,d,"\u21ce","\\nLeftrightarrow");a(i,l,d,"\u25b3","\\vartriangle");a(i,l,y,"\u210f","\\hslash");a(i,l,y,"\u25bd","\\triangledown");a(i,l,y,"\u25ca","\\lozenge");a(i,l,y,"\u24c8","\\circledS");a(i,l,y,"\xae","\\circledR");a(i,l,y,"\u2221","\\measuredangle");a(i,l,y,"\u2204","\\nexists");a(i,l,y,"\u2127","\\mho");a(i,l,y,"\u2132","\\Finv");a(i,l,y,"\u2141","\\Game");a(i,l,y,"k","\\Bbbk");a(i,l,y,"\u2035","\\backprime");a(i,l,y,"\u25b2","\\blacktriangle");a(i,l,y,"\u25bc","\\blacktriangledown");a(i,l,y,"\u25a0","\\blacksquare");a(i,l,y,"\u29eb","\\blacklozenge");a(i,l,y,"\u2605","\\bigstar");a(i,l,y,"\u2222","\\sphericalangle");a(i,l,y,"\u2201","\\complement");a(i,l,y,"\xf0","\\eth");a(i,l,y,"\u2571","\\diagup");a(i,l,y,"\u2572","\\diagdown");a(i,l,y,"\u25a1","\\square");a(i,l,y,"\u25a1","\\Box");a(i,l,y,"\u25ca","\\Diamond");a(i,l,y,"\xa5","\\yen");a(i,l,y,"\u2713","\\checkmark");a(i,l,y,"\u2136","\\beth");a(i,l,y,"\u2138","\\daleth");a(i,l,y,"\u2137","\\gimel");a(i,l,y,"\u03dd","\\digamma");a(i,l,y,"\u03f0","\\varkappa");a(i,l,m,"\u250c","\\ulcorner");a(i,l,p,"\u2510","\\urcorner");a(i,l,m,"\u2514","\\llcorner");a(i,l,p,"\u2518","\\lrcorner");a(i,l,d,"\u2266","\\leqq");a(i,l,d,"\u2a7d","\\leqslant");a(i,l,d,"\u2a95","\\eqslantless");a(i,l,d,"\u2272","\\lesssim");a(i,l,d,"\u2a85","\\lessapprox");a(i,l,d,"\u224a","\\approxeq");a(i,l,u,"\u22d6","\\lessdot");a(i,l,d,"\u22d8","\\lll");a(i,l,d,"\u2276","\\lessgtr");a(i,l,d,"\u22da","\\lesseqgtr");a(i,l,d,"\u2a8b","\\lesseqqgtr");a(i,l,d,"\u2251","\\doteqdot");a(i,l,d,"\u2253","\\risingdotseq");a(i,l,d,"\u2252","\\fallingdotseq");a(i,l,d,"\u223d","\\backsim");a(i,l,d,"\u22cd","\\backsimeq");a(i,l,d,"\u2ac5","\\subseteqq");a(i,l,d,"\u22d0","\\Subset");a(i,l,d,"\u228f","\\sqsubset");a(i,l,d,"\u227c","\\preccurlyeq");a(i,l,d,"\u22de","\\curlyeqprec");a(i,l,d,"\u227e","\\precsim");a(i,l,d,"\u2ab7","\\precapprox");a(i,l,d,"\u22b2","\\vartriangleleft");a(i,l,d,"\u22b4","\\trianglelefteq");a(i,l,d,"\u22a8","\\vDash");a(i,l,d,"\u22aa","\\Vvdash");a(i,l,d,"\u2323","\\smallsmile");a(i,l,d,"\u2322","\\smallfrown");a(i,l,d,"\u224f","\\bumpeq");a(i,l,d,"\u224e","\\Bumpeq");a(i,l,d,"\u2267","\\geqq");a(i,l,d,"\u2a7e","\\geqslant");a(i,l,d,"\u2a96","\\eqslantgtr");a(i,l,d,"\u2273","\\gtrsim");a(i,l,d,"\u2a86","\\gtrapprox");a(i,l,u,"\u22d7","\\gtrdot");a(i,l,d,"\u22d9","\\ggg");a(i,l,d,"\u2277","\\gtrless");a(i,l,d,"\u22db","\\gtreqless");a(i,l,d,"\u2a8c","\\gtreqqless");a(i,l,d,"\u2256","\\eqcirc");a(i,l,d,"\u2257","\\circeq");a(i,l,d,"\u225c","\\triangleq");a(i,l,d,"\u223c","\\thicksim");a(i,l,d,"\u2248","\\thickapprox");a(i,l,d,"\u2ac6","\\supseteqq");a(i,l,d,"\u22d1","\\Supset");a(i,l,d,"\u2290","\\sqsupset");a(i,l,d,"\u227d","\\succcurlyeq");a(i,l,d,"\u22df","\\curlyeqsucc");a(i,l,d,"\u227f","\\succsim");a(i,l,d,"\u2ab8","\\succapprox");a(i,l,d,"\u22b3","\\vartriangleright");a(i,l,d,"\u22b5","\\trianglerighteq");a(i,l,d,"\u22a9","\\Vdash");a(i,l,d,"\u2223","\\shortmid");a(i,l,d,"\u2225","\\shortparallel");a(i,l,d,"\u226c","\\between");a(i,l,d,"\u22d4","\\pitchfork");a(i,l,d,"\u221d","\\varpropto");a(i,l,d,"\u25c0","\\blacktriangleleft");a(i,l,d,"\u2234","\\therefore");a(i,l,d,"\u220d","\\backepsilon");a(i,l,d,"\u25b6","\\blacktriangleright");a(i,l,d,"\u2235","\\because");a(i,l,d,"\u22d8","\\llless");a(i,l,d,"\u22d9","\\gggtr");a(i,l,u,"\u22b2","\\lhd");a(i,l,u,"\u22b3","\\rhd");a(i,l,d,"\u2242","\\eqsim");a(i,n,d,"\u22c8","\\Join");a(i,l,d,"\u2251","\\Doteq");a(i,l,u,"\u2214","\\dotplus");a(i,l,u,"\u2216","\\smallsetminus");a(i,l,u,"\u22d2","\\Cap");a(i,l,u,"\u22d3","\\Cup");a(i,l,u,"\u2a5e","\\doublebarwedge");a(i,l,u,"\u229f","\\boxminus");a(i,l,u,"\u229e","\\boxplus");a(i,l,u,"\u22c7","\\divideontimes");a(i,l,u,"\u22c9","\\ltimes");a(i,l,u,"\u22ca","\\rtimes");a(i,l,u,"\u22cb","\\leftthreetimes");a(i,l,u,"\u22cc","\\rightthreetimes");a(i,l,u,"\u22cf","\\curlywedge");a(i,l,u,"\u22ce","\\curlyvee");a(i,l,u,"\u229d","\\circleddash");a(i,l,u,"\u229b","\\circledast");a(i,l,u,"\u22c5","\\centerdot");a(i,l,u,"\u22ba","\\intercal");a(i,l,u,"\u22d2","\\doublecap");a(i,l,u,"\u22d3","\\doublecup");a(i,l,u,"\u22a0","\\boxtimes");a(i,l,d,"\u21e2","\\dashrightarrow");a(i,l,d,"\u21e0","\\dashleftarrow");a(i,l,d,"\u21c7","\\leftleftarrows");a(i,l,d,"\u21c6","\\leftrightarrows");a(i,l,d,"\u21da","\\Lleftarrow");a(i,l,d,"\u219e","\\twoheadleftarrow");a(i,l,d,"\u21a2","\\leftarrowtail");a(i,l,d,"\u21ab","\\looparrowleft");a(i,l,d,"\u21cb","\\leftrightharpoons");a(i,l,d,"\u21b6","\\curvearrowleft");a(i,l,d,"\u21ba","\\circlearrowleft");a(i,l,d,"\u21b0","\\Lsh");a(i,l,d,"\u21c8","\\upuparrows");a(i,l,d,"\u21bf","\\upharpoonleft");a(i,l,d,"\u21c3","\\downharpoonleft");a(i,l,d,"\u22b8","\\multimap");a(i,l,d,"\u21ad","\\leftrightsquigarrow");a(i,l,d,"\u21c9","\\rightrightarrows");a(i,l,d,"\u21c4","\\rightleftarrows");a(i,l,d,"\u21a0","\\twoheadrightarrow");a(i,l,d,"\u21a3","\\rightarrowtail");a(i,l,d,"\u21ac","\\looparrowright");a(i,l,d,"\u21b7","\\curvearrowright");a(i,l,d,"\u21bb","\\circlearrowright");a(i,l,d,"\u21b1","\\Rsh");a(i,l,d,"\u21ca","\\downdownarrows");a(i,l,d,"\u21be","\\upharpoonright");a(i,l,d,"\u21c2","\\downharpoonright");a(i,l,d,"\u21dd","\\rightsquigarrow");a(i,l,d,"\u21dd","\\leadsto");a(i,l,d,"\u21db","\\Rrightarrow");a(i,l,d,"\u21be","\\restriction");a(i,n,y,"\u2018","`");a(i,n,y,"$","\\$");a(s,n,y,"$","\\$");a(i,n,y,"%","\\%");a(s,n,y,"%","\\%");a(i,n,y,"_","\\_");a(s,n,y,"_","\\_");a(i,n,y,"\u2220","\\angle");a(i,n,y,"\u221e","\\infty");a(i,n,y,"\u2032","\\prime");a(i,n,y,"\u25b3","\\triangle");a(i,n,y,"\u0393","\\Gamma");a(i,n,y,"\u0394","\\Delta");a(i,n,y,"\u0398","\\Theta");a(i,n,y,"\u039b","\\Lambda");a(i,n,y,"\u039e","\\Xi");a(i,n,y,"\u03a0","\\Pi");a(i,n,y,"\u03a3","\\Sigma");a(i,n,y,"\u03a5","\\Upsilon");a(i,n,y,"\u03a6","\\Phi");a(i,n,y,"\u03a8","\\Psi");a(i,n,y,"\u03a9","\\Omega");a(i,n,y,"\xac","\\neg");a(i,n,y,"\xac","\\lnot");a(i,n,y,"\u22a4","\\top");a(i,n,y,"\u22a5","\\bot");a(i,n,y,"\u2205","\\emptyset");a(i,l,y,"\u2205","\\varnothing");a(i,n,c,"\u03b1","\\alpha");a(i,n,c,"\u03b2","\\beta");a(i,n,c,"\u03b3","\\gamma");a(i,n,c,"\u03b4","\\delta");a(i,n,c,"\u03f5","\\epsilon");a(i,n,c,"\u03b6","\\zeta");a(i,n,c,"\u03b7","\\eta");a(i,n,c,"\u03b8","\\theta");a(i,n,c,"\u03b9","\\iota");a(i,n,c,"\u03ba","\\kappa");a(i,n,c,"\u03bb","\\lambda");a(i,n,c,"\u03bc","\\mu");a(i,n,c,"\u03bd","\\nu");a(i,n,c,"\u03be","\\xi");a(i,n,c,"o","\\omicron");a(i,n,c,"\u03c0","\\pi");a(i,n,c,"\u03c1","\\rho");a(i,n,c,"\u03c3","\\sigma");a(i,n,c,"\u03c4","\\tau");a(i,n,c,"\u03c5","\\upsilon");a(i,n,c,"\u03d5","\\phi");a(i,n,c,"\u03c7","\\chi");a(i,n,c,"\u03c8","\\psi");a(i,n,c,"\u03c9","\\omega");a(i,n,c,"\u03b5","\\varepsilon");a(i,n,c,"\u03d1","\\vartheta");a(i,n,c,"\u03d6","\\varpi");a(i,n,c,"\u03f1","\\varrho");a(i,n,c,"\u03c2","\\varsigma");a(i,n,c,"\u03c6","\\varphi");a(i,n,u,"\u2217","*");a(i,n,u,"+","+");a(i,n,u,"\u2212","-");a(i,n,u,"\u22c5","\\cdot");a(i,n,u,"\u2218","\\circ");a(i,n,u,"\xf7","\\div");a(i,n,u,"\xb1","\\pm");a(i,n,u,"\xd7","\\times");a(i,n,u,"\u2229","\\cap");a(i,n,u,"\u222a","\\cup");a(i,n,u,"\u2216","\\setminus");a(i,n,u,"\u2227","\\land");a(i,n,u,"\u2228","\\lor");a(i,n,u,"\u2227","\\wedge");a(i,n,u,"\u2228","\\vee");a(i,n,y,"\u221a","\\surd");a(i,n,m,"(","(");a(i,n,m,"[","[");a(i,n,m,"\u27e8","\\langle");a(i,n,m,"\u2223","\\lvert");a(i,n,m,"\u2225","\\lVert");a(i,n,p,")",")");a(i,n,p,"]","]");a(i,n,p,"?","?");a(i,n,p,"!","!");a(i,n,p,"\u27e9","\\rangle");a(i,n,p,"\u2223","\\rvert");a(i,n,p,"\u2225","\\rVert");a(i,n,d,"=","=");a(i,n,d,"<","<");a(i,n,d,">",">");a(i,n,d,":",":");a(i,n,d,"\u2248","\\approx");a(i,n,d,"\u2245","\\cong");a(i,n,d,"\u2265","\\ge");a(i,n,d,"\u2265","\\geq");a(i,n,d,"\u2190","\\gets");a(i,n,d,">","\\gt");a(i,n,d,"\u2208","\\in");a(i,n,d,"\u2209","\\notin");a(i,n,d,"\u2282","\\subset");a(i,n,d,"\u2283","\\supset");a(i,n,d,"\u2286","\\subseteq");a(i,n,d,"\u2287","\\supseteq");a(i,l,d,"\u2288","\\nsubseteq");a(i,l,d,"\u2289","\\nsupseteq");a(i,n,d,"\u22a8","\\models");a(i,n,d,"\u2190","\\leftarrow");a(i,n,d,"\u2264","\\le");a(i,n,d,"\u2264","\\leq");a(i,n,d,"<","\\lt");a(i,n,d,"\u2260","\\ne");a(i,n,d,"\u2260","\\neq");a(i,n,d,"\u2192","\\rightarrow");a(i,n,d,"\u2192","\\to");a(i,l,d,"\u2271","\\ngeq");a(i,l,d,"\u2270","\\nleq");a(i,n,g,null,"\\!");a(i,n,g,"\xa0","\\ ");a(i,n,g,"\xa0","~");a(i,n,g,null,"\\,");a(i,n,g,null,"\\:");a(i,n,g,null,"\\;");a(i,n,g,null,"\\enspace");a(i,n,g,null,"\\qquad");a(i,n,g,null,"\\quad");a(i,n,g,"\xa0","\\space");a(i,n,f,",",",");a(i,n,f,";",";");a(i,n,f,":","\\colon");a(i,l,u,"\u22bc","\\barwedge");a(i,l,u,"\u22bb","\\veebar");a(i,n,u,"\u2299","\\odot");a(i,n,u,"\u2295","\\oplus");a(i,n,u,"\u2297","\\otimes");a(i,n,y,"\u2202","\\partial");a(i,n,u,"\u2298","\\oslash");a(i,l,u,"\u229a","\\circledcirc");a(i,l,u,"\u22a1","\\boxdot");a(i,n,u,"\u25b3","\\bigtriangleup");a(i,n,u,"\u25bd","\\bigtriangledown");a(i,n,u,"\u2020","\\dagger");a(i,n,u,"\u22c4","\\diamond");a(i,n,u,"\u22c6","\\star");a(i,n,u,"\u25c3","\\triangleleft");a(i,n,u,"\u25b9","\\triangleright");a(i,n,m,"{","\\{");a(s,n,y,"{","\\{");a(i,n,p,"}","\\}");a(s,n,y,"}","\\}");a(i,n,m,"{","\\lbrace");a(i,n,p,"}","\\rbrace");a(i,n,m,"[","\\lbrack");a(i,n,p,"]","\\rbrack");a(i,n,m,"\u230a","\\lfloor");a(i,n,p,"\u230b","\\rfloor");a(i,n,m,"\u2308","\\lceil");a(i,n,p,"\u2309","\\rceil");a(i,n,y,"\\","\\backslash");a(i,n,y,"\u2223","|");a(i,n,y,"\u2223","\\vert");a(i,n,y,"\u2225","\\|");a(i,n,y,"\u2225","\\Vert");a(i,n,d,"\u2191","\\uparrow");a(i,n,d,"\u21d1","\\Uparrow");a(i,n,d,"\u2193","\\downarrow");a(i,n,d,"\u21d3","\\Downarrow");a(i,n,d,"\u2195","\\updownarrow");a(i,n,d,"\u21d5","\\Updownarrow");a(i,i,v,"\u2210","\\coprod");a(i,i,v,"\u22c1","\\bigvee");a(i,i,v,"\u22c0","\\bigwedge");a(i,i,v,"\u2a04","\\biguplus");a(i,i,v,"\u22c2","\\bigcap");a(i,i,v,"\u22c3","\\bigcup");a(i,i,v,"\u222b","\\int");a(i,i,v,"\u222b","\\intop");a(i,i,v,"\u222c","\\iint");a(i,i,v,"\u222d","\\iiint");a(i,i,v,"\u220f","\\prod");a(i,i,v,"\u2211","\\sum");a(i,i,v,"\u2a02","\\bigotimes");a(i,i,v,"\u2a01","\\bigoplus");a(i,i,v,"\u2a00","\\bigodot");a(i,i,v,"\u222e","\\oint");a(i,i,v,"\u2a06","\\bigsqcup");a(i,i,v,"\u222b","\\smallint");a(s,n,h,"\u2026","\\textellipsis");a(i,n,h,"\u2026","\\mathellipsis");a(s,n,h,"\u2026","\\ldots");a(i,n,h,"\u2026","\\ldots");a(i,n,h,"\u22ef","\\cdots");a(i,n,h,"\u22f1","\\ddots");a(i,n,y,"\u22ee","\\vdots");a(i,n,o,"\xb4","\\acute");a(i,n,o,"`","\\grave");a(i,n,o,"\xa8","\\ddot");a(i,n,o,"~","\\tilde");a(i,n,o,"\xaf","\\bar");a(i,n,o,"\u02d8","\\breve");a(i,n,o,"\u02c7","\\check");a(i,n,o,"^","\\hat");a(i,n,o,"\u20d7","\\vec");a(i,n,o,"\u02d9","\\dot");a(i,n,c,"\u0131","\\imath");a(i,n,c,"\u0237","\\jmath");a(s,n,y,"\u2013","--");a(s,n,y,"\u2014","---");a(s,n,y,"\u2018","`");a(s,n,y,"\u2019","'");a(s,n,y,"\u201c","``");a(s,n,y,"\u201d","''");a(i,n,y,"\xb0","\\degree");
a(s,n,y,"\xb0","\\degree");a(i,n,c,"\xa3","\\pounds");a(i,l,y,"\u2720","\\maltese");a(s,l,y,"\u2720","\\maltese");a(s,n,g,"\xa0","\\ ");a(s,n,g,"\xa0"," ");a(s,n,g,"\xa0","~");var x='0123456789/@."';for(var b=0;b<x.length;b++){var w=x.charAt(b);a(i,n,y,w,w)}var k='0123456789!@*()-=+[]";:?/.,';for(var z=0;z<k.length;z++){var S=k.charAt(z);a(s,n,y,S,S)}var M="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var T=0;T<M.length;T++){var A=M.charAt(T);a(i,n,c,A,A);a(s,n,y,A,A)}for(var N=192;N<=214;N++){var q=String.fromCharCode(N);a(s,n,y,q,q)}for(var R=216;R<=246;R++){var C=String.fromCharCode(R);a(s,n,y,C,C)}for(var E=248;E<=255;E++){var D=String.fromCharCode(E);a(s,n,y,D,D)}for(var O=1040;O<=1103;O++){var P=String.fromCharCode(O);a(s,n,y,P,P)}a(s,n,y,"\u2013","\u2013");a(s,n,y,"\u2014","\u2014");a(s,n,y,"\u2018","\u2018");a(s,n,y,"\u2019","\u2019");a(s,n,y,"\u201c","\u201c");a(s,n,y,"\u201d","\u201d")},{}],27:[function(e,t,r){"use strict";var a=/[\uAC00-\uD7AF]/;var i=/[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;t.exports={cjkRegex:i,hangulRegex:a}},{}],28:[function(e,t,r){"use strict";var a=Array.prototype.indexOf;var i=function e(t,r){if(t==null){return-1}if(a&&t.indexOf===a){return t.indexOf(r)}var i=t.length;for(var s=0;s<i;s++){if(t[s]===r){return s}}return-1};var s=function e(t,r){return i(t,r)!==-1};var n=function e(t,r){return t===undefined?r:t};var l=/([A-Z])/g;var o=function e(t){return t.replace(l,"-$1").toLowerCase()};var u={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"};var p=/[&><"']/g;function h(e){return u[e]}function c(e){return(""+e).replace(p,h)}var v=void 0;if(typeof document!=="undefined"){var m=document.createElement("span");if("textContent"in m){v=function e(t,r){t.textContent=r}}else{v=function e(t,r){t.innerText=r}}}function f(e){v(e,"")}t.exports={contains:s,deflt:n,escape:c,hyphenate:o,indexOf:i,setTextContent:v,clearNode:f}},{}]},{},[1])(1)});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
/*global define:false */
/**
 * Copyright 2012-2017 Craig Campbell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Mousetrap is a simple keyboard shortcut library for Javascript with
 * no external dependencies
 *
 * @version 1.6.1
 * @url craig.is/killing/mice
 */
(function(window, document, undefined) {

    // Check if mousetrap is used inside browser, if not, return
    if (!window) {
        return;
    }

    /**
     * mapping of special keycodes to their corresponding keys
     *
     * everything in this dictionary cannot use keypress events
     * so it has to be here to map to the correct keycodes for
     * keyup/keydown events
     *
     * @type {Object}
     */
    var _MAP = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        17: 'ctrl',
        18: 'alt',
        20: 'capslock',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'ins',
        46: 'del',
        91: 'meta',
        93: 'meta',
        224: 'meta'
    };

    /**
     * mapping for special characters so they can support
     *
     * this dictionary is only used incase you want to bind a
     * keyup or keydown event to one of these keys
     *
     * @type {Object}
     */
    var _KEYCODE_MAP = {
        106: '*',
        107: '+',
        109: '-',
        110: '.',
        111 : '/',
        186: ';',
        187: '=',
        188: ',',
        189: '-',
        190: '.',
        191: '/',
        192: '`',
        219: '[',
        220: '\\',
        221: ']',
        222: '\''
    };

    /**
     * this is a mapping of keys that require shift on a US keypad
     * back to the non shift equivelents
     *
     * this is so you can use keyup events with these keys
     *
     * note that this will only work reliably on US keyboards
     *
     * @type {Object}
     */
    var _SHIFT_MAP = {
        '~': '`',
        '!': '1',
        '@': '2',
        '#': '3',
        '$': '4',
        '%': '5',
        '^': '6',
        '&': '7',
        '*': '8',
        '(': '9',
        ')': '0',
        '_': '-',
        '+': '=',
        ':': ';',
        '\"': '\'',
        '<': ',',
        '>': '.',
        '?': '/',
        '|': '\\'
    };

    /**
     * this is a list of special strings you can use to map
     * to modifier keys when you specify your keyboard shortcuts
     *
     * @type {Object}
     */
    var _SPECIAL_ALIASES = {
        'option': 'alt',
        'command': 'meta',
        'return': 'enter',
        'escape': 'esc',
        'plus': '+',
        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
    };

    /**
     * variable to store the flipped version of _MAP from above
     * needed to check if we should use keypress or not when no action
     * is specified
     *
     * @type {Object|undefined}
     */
    var _REVERSE_MAP;

    /**
     * loop through the f keys, f1 to f19 and add them to the map
     * programatically
     */
    for (var i = 1; i < 20; ++i) {
        _MAP[111 + i] = 'f' + i;
    }

    /**
     * loop through to map numbers on the numeric keypad
     */
    for (i = 0; i <= 9; ++i) {

        // This needs to use a string cause otherwise since 0 is falsey
        // mousetrap will never fire for numpad 0 pressed as part of a keydown
        // event.
        //
        // @see https://github.com/ccampbell/mousetrap/pull/258
        _MAP[i + 96] = i.toString();
    }

    /**
     * cross browser add event method
     *
     * @param {Element|HTMLDocument} object
     * @param {string} type
     * @param {Function} callback
     * @returns void
     */
    function _addEvent(object, type, callback) {
        if (object.addEventListener) {
            object.addEventListener(type, callback, false);
            return;
        }

        object.attachEvent('on' + type, callback);
    }

    /**
     * takes the event and returns the key character
     *
     * @param {Event} e
     * @return {string}
     */
    function _characterFromEvent(e) {

        // for keypress events we should return the character as is
        if (e.type == 'keypress') {
            var character = String.fromCharCode(e.which);

            // if the shift key is not pressed then it is safe to assume
            // that we want the character to be lowercase.  this means if
            // you accidentally have caps lock on then your key bindings
            // will continue to work
            //
            // the only side effect that might not be desired is if you
            // bind something like 'A' cause you want to trigger an
            // event when capital A is pressed caps lock will no longer
            // trigger the event.  shift+a will though.
            if (!e.shiftKey) {
                character = character.toLowerCase();
            }

            return character;
        }

        // for non keypress events the special maps are needed
        if (_MAP[e.which]) {
            return _MAP[e.which];
        }

        if (_KEYCODE_MAP[e.which]) {
            return _KEYCODE_MAP[e.which];
        }

        // if it is not in the special map

        // with keydown and keyup events the character seems to always
        // come in as an uppercase character whether you are pressing shift
        // or not.  we should make sure it is always lowercase for comparisons
        return String.fromCharCode(e.which).toLowerCase();
    }

    /**
     * checks if two arrays are equal
     *
     * @param {Array} modifiers1
     * @param {Array} modifiers2
     * @returns {boolean}
     */
    function _modifiersMatch(modifiers1, modifiers2) {
        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
    }

    /**
     * takes a key event and figures out what the modifiers are
     *
     * @param {Event} e
     * @returns {Array}
     */
    function _eventModifiers(e) {
        var modifiers = [];

        if (e.shiftKey) {
            modifiers.push('shift');
        }

        if (e.altKey) {
            modifiers.push('alt');
        }

        if (e.ctrlKey) {
            modifiers.push('ctrl');
        }

        if (e.metaKey) {
            modifiers.push('meta');
        }

        return modifiers;
    }

    /**
     * prevents default for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _preventDefault(e) {
        if (e.preventDefault) {
            e.preventDefault();
            return;
        }

        e.returnValue = false;
    }

    /**
     * stops propogation for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _stopPropagation(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
            return;
        }

        e.cancelBubble = true;
    }

    /**
     * determines if the keycode specified is a modifier key or not
     *
     * @param {string} key
     * @returns {boolean}
     */
    function _isModifier(key) {
        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
    }

    /**
     * reverses the map lookup so that we can look for specific keys
     * to see what can and can't use keypress
     *
     * @return {Object}
     */
    function _getReverseMap() {
        if (!_REVERSE_MAP) {
            _REVERSE_MAP = {};
            for (var key in _MAP) {

                // pull out the numeric keypad from here cause keypress should
                // be able to detect the keys from the character
                if (key > 95 && key < 112) {
                    continue;
                }

                if (_MAP.hasOwnProperty(key)) {
                    _REVERSE_MAP[_MAP[key]] = key;
                }
            }
        }
        return _REVERSE_MAP;
    }

    /**
     * picks the best action based on the key combination
     *
     * @param {string} key - character for key
     * @param {Array} modifiers
     * @param {string=} action passed in
     */
    function _pickBestAction(key, modifiers, action) {

        // if no action was picked in we should try to pick the one
        // that we think would work best for this key
        if (!action) {
            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
        }

        // modifier keys don't work as expected with keypress,
        // switch to keydown
        if (action == 'keypress' && modifiers.length) {
            action = 'keydown';
        }

        return action;
    }

    /**
     * Converts from a string key combination to an array
     *
     * @param  {string} combination like "command+shift+l"
     * @return {Array}
     */
    function _keysFromString(combination) {
        if (combination === '+') {
            return ['+'];
        }

        combination = combination.replace(/\+{2}/g, '+plus');
        return combination.split('+');
    }

    /**
     * Gets info for a specific key combination
     *
     * @param  {string} combination key combination ("command+s" or "a" or "*")
     * @param  {string=} action
     * @returns {Object}
     */
    function _getKeyInfo(combination, action) {
        var keys;
        var key;
        var i;
        var modifiers = [];

        // take the keys from this pattern and figure out what the actual
        // pattern is all about
        keys = _keysFromString(combination);

        for (i = 0; i < keys.length; ++i) {
            key = keys[i];

            // normalize key names
            if (_SPECIAL_ALIASES[key]) {
                key = _SPECIAL_ALIASES[key];
            }

            // if this is not a keypress event then we should
            // be smart about using shift keys
            // this will only work for US keyboards however
            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
                key = _SHIFT_MAP[key];
                modifiers.push('shift');
            }

            // if this key is a modifier then add it to the list of modifiers
            if (_isModifier(key)) {
                modifiers.push(key);
            }
        }

        // depending on what the key combination is
        // we will try to pick the best event for it
        action = _pickBestAction(key, modifiers, action);

        return {
            key: key,
            modifiers: modifiers,
            action: action
        };
    }

    function _belongsTo(element, ancestor) {
        if (element === null || element === document) {
            return false;
        }

        if (element === ancestor) {
            return true;
        }

        return _belongsTo(element.parentNode, ancestor);
    }

    function Mousetrap(targetElement) {
        var self = this;

        targetElement = targetElement || document;

        if (!(self instanceof Mousetrap)) {
            return new Mousetrap(targetElement);
        }

        /**
         * element to attach key events to
         *
         * @type {Element}
         */
        self.target = targetElement;

        /**
         * a list of all the callbacks setup via Mousetrap.bind()
         *
         * @type {Object}
         */
        self._callbacks = {};

        /**
         * direct map of string combinations to callbacks used for trigger()
         *
         * @type {Object}
         */
        self._directMap = {};

        /**
         * keeps track of what level each sequence is at since multiple
         * sequences can start out with the same sequence
         *
         * @type {Object}
         */
        var _sequenceLevels = {};

        /**
         * variable to store the setTimeout call
         *
         * @type {null|number}
         */
        var _resetTimer;

        /**
         * temporary state where we will ignore the next keyup
         *
         * @type {boolean|string}
         */
        var _ignoreNextKeyup = false;

        /**
         * temporary state where we will ignore the next keypress
         *
         * @type {boolean}
         */
        var _ignoreNextKeypress = false;

        /**
         * are we currently inside of a sequence?
         * type of action ("keyup" or "keydown" or "keypress") or false
         *
         * @type {boolean|string}
         */
        var _nextExpectedAction = false;

        /**
         * resets all sequence counters except for the ones passed in
         *
         * @param {Object} doNotReset
         * @returns void
         */
        function _resetSequences(doNotReset) {
            doNotReset = doNotReset || {};

            var activeSequences = false,
                key;

            for (key in _sequenceLevels) {
                if (doNotReset[key]) {
                    activeSequences = true;
                    continue;
                }
                _sequenceLevels[key] = 0;
            }

            if (!activeSequences) {
                _nextExpectedAction = false;
            }
        }

        /**
         * finds all callbacks that match based on the keycode, modifiers,
         * and action
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event|Object} e
         * @param {string=} sequenceName - name of the sequence we are looking for
         * @param {string=} combination
         * @param {number=} level
         * @returns {Array}
         */
        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
            var i;
            var callback;
            var matches = [];
            var action = e.type;

            // if there are no events related to this keycode
            if (!self._callbacks[character]) {
                return [];
            }

            // if a modifier key is coming up on its own we should allow it
            if (action == 'keyup' && _isModifier(character)) {
                modifiers = [character];
            }

            // loop through all callbacks for the key that was pressed
            // and see if any of them match
            for (i = 0; i < self._callbacks[character].length; ++i) {
                callback = self._callbacks[character][i];

                // if a sequence name is not specified, but this is a sequence at
                // the wrong level then move onto the next match
                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                    continue;
                }

                // if the action we are looking for doesn't match the action we got
                // then we should keep going
                if (action != callback.action) {
                    continue;
                }

                // if this is a keypress event and the meta key and control key
                // are not pressed that means that we need to only look at the
                // character, otherwise check the modifiers as well
                //
                // chrome will not fire a keypress if meta or control is down
                // safari will fire a keypress if meta or meta+shift is down
                // firefox will fire a keypress if meta or control is down
                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

                    // when you bind a combination or sequence a second time it
                    // should overwrite the first one.  if a sequenceName or
                    // combination is specified in this call it does just that
                    //
                    // @todo make deleting its own method?
                    var deleteCombo = !sequenceName && callback.combo == combination;
                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                    if (deleteCombo || deleteSequence) {
                        self._callbacks[character].splice(i, 1);
                    }

                    matches.push(callback);
                }
            }

            return matches;
        }

        /**
         * actually calls the callback function
         *
         * if your callback function returns false this will use the jquery
         * convention - prevent default and stop propogation on the event
         *
         * @param {Function} callback
         * @param {Event} e
         * @returns void
         */
        function _fireCallback(callback, e, combo, sequence) {

            // if this event should not happen stop here
            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
                return;
            }

            if (callback(e, combo) === false) {
                _preventDefault(e);
                _stopPropagation(e);
            }
        }

        /**
         * handles a character key event
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event} e
         * @returns void
         */
        self._handleKey = function(character, modifiers, e) {
            var callbacks = _getMatches(character, modifiers, e);
            var i;
            var doNotReset = {};
            var maxLevel = 0;
            var processedSequenceCallback = false;

            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
            for (i = 0; i < callbacks.length; ++i) {
                if (callbacks[i].seq) {
                    maxLevel = Math.max(maxLevel, callbacks[i].level);
                }
            }

            // loop through matching callbacks for this key event
            for (i = 0; i < callbacks.length; ++i) {

                // fire for all sequence callbacks
                // this is because if for example you have multiple sequences
                // bound such as "g i" and "g t" they both need to fire the
                // callback for matching g cause otherwise you can only ever
                // match the first one
                if (callbacks[i].seq) {

                    // only fire callbacks for the maxLevel to prevent
                    // subsequences from also firing
                    //
                    // for example 'a option b' should not cause 'option b' to fire
                    // even though 'option b' is part of the other sequence
                    //
                    // any sequences that do not match here will be discarded
                    // below by the _resetSequences call
                    if (callbacks[i].level != maxLevel) {
                        continue;
                    }

                    processedSequenceCallback = true;

                    // keep a list of which sequences were matches for later
                    doNotReset[callbacks[i].seq] = 1;
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                    continue;
                }

                // if there were no sequence matches but we are still here
                // that means this is a regular match so we should fire that
                if (!processedSequenceCallback) {
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
                }
            }

            // if the key you pressed matches the type of sequence without
            // being a modifier (ie "keyup" or "keypress") then we should
            // reset all sequences that were not matched by this event
            //
            // this is so, for example, if you have the sequence "h a t" and you
            // type "h e a r t" it does not match.  in this case the "e" will
            // cause the sequence to reset
            //
            // modifier keys are ignored because you can have a sequence
            // that contains modifiers such as "enter ctrl+space" and in most
            // cases the modifier key will be pressed before the next key
            //
            // also if you have a sequence such as "ctrl+b a" then pressing the
            // "b" key will trigger a "keypress" and a "keydown"
            //
            // the "keydown" is expected when there is a modifier, but the
            // "keypress" ends up matching the _nextExpectedAction since it occurs
            // after and that causes the sequence to reset
            //
            // we ignore keypresses in a sequence that directly follow a keydown
            // for the same character
            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
                _resetSequences(doNotReset);
            }

            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
        };

        /**
         * handles a keydown event
         *
         * @param {Event} e
         * @returns void
         */
        function _handleKeyEvent(e) {

            // normalize e.which for key events
            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
            if (typeof e.which !== 'number') {
                e.which = e.keyCode;
            }

            var character = _characterFromEvent(e);

            // no character found then stop
            if (!character) {
                return;
            }

            // need to use === for the character check because the character can be 0
            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
                _ignoreNextKeyup = false;
                return;
            }

            self.handleKey(character, _eventModifiers(e), e);
        }

        /**
         * called to set a 1 second timeout on the specified sequence
         *
         * this is so after each key press in the sequence you have 1 second
         * to press the next key before you have to start over
         *
         * @returns void
         */
        function _resetSequenceTimer() {
            clearTimeout(_resetTimer);
            _resetTimer = setTimeout(_resetSequences, 1000);
        }

        /**
         * binds a key sequence to an event
         *
         * @param {string} combo - combo specified in bind call
         * @param {Array} keys
         * @param {Function} callback
         * @param {string=} action
         * @returns void
         */
        function _bindSequence(combo, keys, callback, action) {

            // start off by adding a sequence level record for this combination
            // and setting the level to 0
            _sequenceLevels[combo] = 0;

            /**
             * callback to increase the sequence level for this sequence and reset
             * all other sequences that were active
             *
             * @param {string} nextAction
             * @returns {Function}
             */
            function _increaseSequence(nextAction) {
                return function() {
                    _nextExpectedAction = nextAction;
                    ++_sequenceLevels[combo];
                    _resetSequenceTimer();
                };
            }

            /**
             * wraps the specified callback inside of another function in order
             * to reset all sequence counters as soon as this sequence is done
             *
             * @param {Event} e
             * @returns void
             */
            function _callbackAndReset(e) {
                _fireCallback(callback, e, combo);

                // we should ignore the next key up if the action is key down
                // or keypress.  this is so if you finish a sequence and
                // release the key the final key will not trigger a keyup
                if (action !== 'keyup') {
                    _ignoreNextKeyup = _characterFromEvent(e);
                }

                // weird race condition if a sequence ends with the key
                // another sequence begins with
                setTimeout(_resetSequences, 10);
            }

            // loop through keys one at a time and bind the appropriate callback
            // function.  for any key leading up to the final one it should
            // increase the sequence. after the final, it should reset all sequences
            //
            // if an action is specified in the original bind call then that will
            // be used throughout.  otherwise we will pass the action that the
            // next key in the sequence should match.  this allows a sequence
            // to mix and match keypress and keydown events depending on which
            // ones are better suited to the key provided
            for (var i = 0; i < keys.length; ++i) {
                var isFinal = i + 1 === keys.length;
                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
                _bindSingle(keys[i], wrappedCallback, action, combo, i);
            }
        }

        /**
         * binds a single keyboard combination
         *
         * @param {string} combination
         * @param {Function} callback
         * @param {string=} action
         * @param {string=} sequenceName - name of sequence if part of sequence
         * @param {number=} level - what part of the sequence the command is
         * @returns void
         */
        function _bindSingle(combination, callback, action, sequenceName, level) {

            // store a direct mapped reference for use with Mousetrap.trigger
            self._directMap[combination + ':' + action] = callback;

            // make sure multiple spaces in a row become a single space
            combination = combination.replace(/\s+/g, ' ');

            var sequence = combination.split(' ');
            var info;

            // if this pattern is a sequence of keys then run through this method
            // to reprocess each pattern one key at a time
            if (sequence.length > 1) {
                _bindSequence(combination, sequence, callback, action);
                return;
            }

            info = _getKeyInfo(combination, action);

            // make sure to initialize array if this is the first time
            // a callback is added for this key
            self._callbacks[info.key] = self._callbacks[info.key] || [];

            // remove an existing match if there is one
            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

            // add this call back to the array
            // if it is a sequence put it at the beginning
            // if not put it at the end
            //
            // this is important because the way these are processed expects
            // the sequence ones to come first
            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
                callback: callback,
                modifiers: info.modifiers,
                action: info.action,
                seq: sequenceName,
                level: level,
                combo: combination
            });
        }

        /**
         * binds multiple combinations to the same callback
         *
         * @param {Array} combinations
         * @param {Function} callback
         * @param {string|undefined} action
         * @returns void
         */
        self._bindMultiple = function(combinations, callback, action) {
            for (var i = 0; i < combinations.length; ++i) {
                _bindSingle(combinations[i], callback, action);
            }
        };

        // start!
        _addEvent(targetElement, 'keypress', _handleKeyEvent);
        _addEvent(targetElement, 'keydown', _handleKeyEvent);
        _addEvent(targetElement, 'keyup', _handleKeyEvent);
    }

    /**
     * binds an event to mousetrap
     *
     * can be a single key, a combination of keys separated with +,
     * an array of keys, or a sequence of keys separated by spaces
     *
     * be sure to list the modifier keys first to make sure that the
     * correct key ends up getting bound (the last key in the pattern)
     *
     * @param {string|Array} keys
     * @param {Function} callback
     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
     * @returns void
     */
    Mousetrap.prototype.bind = function(keys, callback, action) {
        var self = this;
        keys = keys instanceof Array ? keys : [keys];
        self._bindMultiple.call(self, keys, callback, action);
        return self;
    };

    /**
     * unbinds an event to mousetrap
     *
     * the unbinding sets the callback function of the specified key combo
     * to an empty function and deletes the corresponding key in the
     * _directMap dict.
     *
     * TODO: actually remove this from the _callbacks dictionary instead
     * of binding an empty function
     *
     * the keycombo+action has to be exactly the same as
     * it was defined in the bind method
     *
     * @param {string|Array} keys
     * @param {string} action
     * @returns void
     */
    Mousetrap.prototype.unbind = function(keys, action) {
        var self = this;
        return self.bind.call(self, keys, function() {}, action);
    };

    /**
     * triggers an event that has already been bound
     *
     * @param {string} keys
     * @param {string=} action
     * @returns void
     */
    Mousetrap.prototype.trigger = function(keys, action) {
        var self = this;
        if (self._directMap[keys + ':' + action]) {
            self._directMap[keys + ':' + action]({}, keys);
        }
        return self;
    };

    /**
     * resets the library back to its initial state.  this is useful
     * if you want to clear out the current keyboard shortcuts and bind
     * new ones - for example if you switch to another page
     *
     * @returns void
     */
    Mousetrap.prototype.reset = function() {
        var self = this;
        self._callbacks = {};
        self._directMap = {};
        return self;
    };

    /**
     * should we stop this event before firing off callbacks
     *
     * @param {Event} e
     * @param {Element} element
     * @return {boolean}
     */
    Mousetrap.prototype.stopCallback = function(e, element) {
        var self = this;

        // if the element has the class "mousetrap" then no need to stop
        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
            return false;
        }

        if (_belongsTo(element, self.target)) {
            return false;
        }

        // stop for input, select, and textarea
        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
    };

    /**
     * exposes _handleKey publicly so it can be overwritten by extensions
     */
    Mousetrap.prototype.handleKey = function() {
        var self = this;
        return self._handleKey.apply(self, arguments);
    };

    /**
     * allow custom key mappings
     */
    Mousetrap.addKeycodes = function(object) {
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                _MAP[key] = object[key];
            }
        }
        _REVERSE_MAP = null;
    };

    /**
     * Init the global mousetrap functions
     *
     * This method is needed to allow the global mousetrap functions to work
     * now that mousetrap is a constructor function.
     */
    Mousetrap.init = function() {
        var documentMousetrap = Mousetrap(document);
        for (var method in documentMousetrap) {
            if (method.charAt(0) !== '_') {
                Mousetrap[method] = (function(method) {
                    return function() {
                        return documentMousetrap[method].apply(documentMousetrap, arguments);
                    };
                } (method));
            }
        }
    };

    Mousetrap.init();

    // expose mousetrap to the global object
    window.Mousetrap = Mousetrap;

    // expose as a common js module
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Mousetrap;
    }

    // expose mousetrap as an AMD module
    if (typeof define === 'function' && define.amd) {
        define(function() {
            return Mousetrap;
        });
    }
}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);

},{}],3:[function(require,module,exports){
Mousetrap = require('mousetrap');
katex = require('../lib/katex/katex-modified.min.js');

String.prototype.splice = function(idx, s) { return (this.slice(0,idx) + s + this.slice(idx)); };
String.prototype.splicen = function(idx, s, n) { return (this.slice(0,idx) + s + this.slice(idx+n));};
String.prototype.search_at = function(idx, s) { return (this.substring(idx-s.length,idx) == s); };

var Guppy = function(guppy_div, config) {
    var self = this;
    var config = config || {};
    var events = config['events'] || {}
    var options = config['options'] || {};

    if (typeof guppy_div === 'string' || guppy_div instanceof String)
	    guppy_div = document.getElementById(guppy_div);
    
    // Set the id on the div if it is not currently set.
    if ( ! guppy_div.id ) {
	    var i = Guppy.max_uid || 0;
	    while (document.getElementById("guppy_uid_"+i)) i++;
	    Guppy.max_uid = i;
	    guppy_div.id = "guppy_uid_"+i;
    }
    var i = Guppy.max_tabIndex || 0;
    guppy_div.tabIndex = i;
    Guppy.max_tabIndex = i+1;
    
    this.editor_active = true;
    this.empty_content = "\\color{red}{[?]}"
    this.editor = guppy_div;
    this.blacklist = [];
    this.autoreplace = true;
    this.ready = false;

    this.events = {};
    
    var evts = ["ready", "change", "left_end", "right_end", "done", "completion", "debug", "error", "focus"];
    
    for (var i = 0; i < evts.length; i++) {
	    var e = evts[i];
	    if (e in events) this.events[e] = e in events ? events[e] : null;
    }

    var opts = ["blank_caret", "empty_content", "blacklist", "autoreplace"];
    
    for (var i = 0; i < opts.length; i++) {
	    var p = opts[i];
        if (p in options) this[p] = options[p];
    }
	
    this.base =  (new window.DOMParser()).parseFromString('xml_content' in options ? options.xml_content : "<m><e></e></m>", "text/xml");
    
    Guppy.instances[guppy_div.id] = this;
    
    this.clipboard = null;
    this.current = this.base.documentElement.firstChild;
    this.temp_cursor = {"node":null,"caret":0}
    if ( ! this.current.firstChild ) this.current.appendChild(this.base.createTextNode(""));
    this.caret = 0;
    this.space_caret = 0;
    this.sel_start = null;
    this.sel_end = null;
    this.undo_data = [];
    this.undo_now = -1;
    this.sel_status = Guppy.SEL_NONE;
    this.checkpoint();
    this.editor.addEventListener("keydown",Guppy.key_down, false);
    this.editor.addEventListener("keyup",Guppy.key_up, false);
    this.editor.addEventListener("focus", function(e) { Guppy.kb.alt_down = false; if (self.activate) self.activate();}, false);
    if (Guppy.ready && !this.ready) {
    	this.ready = true;
    	this.fire_event("ready");
	    this.render(true);
    }
    this.deactivate();
    this.recompute_locations_paths();
}

Guppy.prototype.get_content = function(t) {
    if (t != "xml") return Guppy.transform(t,this.base);
    return (new XMLSerializer()).serializeToString(this.base);
}

Guppy.prototype.set_content = function(xml_data) {
    this.base = (new window.DOMParser()).parseFromString(xml_data, "text/xml");
    this.clipboard = null;
    var l = this.base.getElementsByTagName("e");
    for (var i = 0; i < l.length; i++) 
        if (!(l[i].firstChild)) l[i].appendChild(this.base.createTextNode(""));
    
    this.current = this.base.documentElement.firstChild;
    this.caret = 0;
    this.sel_start = null;
    this.sel_end = null;
    this.undo_data = [];
    this.undo_now = -1;
    this.sel_status = Guppy.SEL_NONE;
    this.checkpoint();
}


Guppy.instances = {};
Guppy.ready = false;

Guppy.active_guppy = null;

Guppy.SEL_NONE = 0;
Guppy.SEL_CURSOR_AT_START = 1;
Guppy.SEL_CURSOR_AT_END = 2;

Guppy.is_blank = function(n) {
    return n.firstChild == null || n.firstChild.nodeValue == '';
}

Guppy.get_symbols = function(symbols, callback) {
    var all_ready = function() {
	   Guppy.register_keyboard_handlers();
	   for (var i in Guppy.instances) {
	       Guppy.instances[i].ready = true;
	       Guppy.instances[i].render(true);
	       Guppy.instances[i].fire_event("ready")
	       Guppy.instances[i].events["ready"] = null;
	   }
	   Guppy.ready = true;
       if (callback) callback();
    };
    var get_builtins = function(callback) {
	    var greek_syms = ["alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega"];
	    var raw_syms = ["leq","geq","infty"];
	    var func_syms = ["sin","cos","tan","sec","csc","cot","log","ln"];
	    var other_syms = {"less":["<","<"],"greater":[">",">"]};
	    
	    for (var i = 0; i < greek_syms.length; i++) 
	        Guppy.symb_raw(greek_syms[i],"{\\"+greek_syms[i]+"}"," $"+greek_syms[i]+" ");
	    
	    for (var i = 0; i < raw_syms.length; i++) 
	        Guppy.symb_raw(raw_syms[i],"{\\"+raw_syms[i]+"}"," "+raw_syms[i]+" ");
	    
	    for (var i = 0; i < func_syms.length; i++) 
	        Guppy.symb_func(func_syms[i]);
	    
	    for (var i in other_syms) 
	        Guppy.symb_raw(i, other_syms[i][0], other_syms[i][1]);
        
	    Guppy.symb_raw("*","\\cdot ","*");
        if (callback) callback();
    };

    if ( ! Array.isArray(symbols) )
	    symbols = [symbols];
    
    var answers = [];
    var calls = [];
    var set_symbols = function() {
	    for (var i = 0; i < answers.length; i++) {
	        for (var s in answers[i])
	    	    Guppy.kb.symbols[s] = answers[i][s];
	    }
        if (callback) callback();
    }
    for (var i = 0; i < symbols.length; i++) {
	    answers.push(null);
        if (symbols[i] == "builtins") {
	        calls.push(get_builtins);
	        continue;
	    }
	    var x = function outer(j) {
	        return function(callback) {
	            var req = new XMLHttpRequest();
	            req.onload = function() {
	                var syms = JSON.parse(this.responseText);
	                for (var s in syms) {
	            	Guppy.kb.symbols[s] = syms[s];
	                }
	                callback();
	            };
	            req.open("get", symbols[j], true);
	            req.send();
	        }
	    }(i);
	    calls.push(x);
    }
    calls.push(all_ready);
    var j = 0;
    var cb = function() {
	    j += 1;
        if (j < calls.length) calls[j](cb);
    }
    if (calls.length > 0) calls[0](cb);
}

Guppy.transform = function(t, base, r) {
    return Guppy.manual_render(base,t,base.documentElement,r);
}

Guppy.bracket_xpath = "(count(./*) != 1 and not \
		          ( \
                            count(./e)=2 and \
			    count(./f)=1 and \
			    count(./e[string-length(text())=0])=2 and \
			    ( \
			      (\
                                count(./f/c)=1 and\
			        count(./f/c[@is_bracket='yes'])=1\
			      )\
			      or\
			      (\
			        f/@c='yes' and \
				count(./e[@current='yes'])=0 and \
				count(./e[@temp='yes'])=0 \
			      )\
			    )\
			  )\
			)  \
			or\
		        (\
			  count(./*) = 1 and \
			  string-length(./e/text()) != 1 and \
			  number(./e/text()) != ./e/text() \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@current = 'yes' \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@temp = 'yes' \
			)"

//*///Fix VIM coloring due to comment in mess above
Guppy.manual_render = function(base,t,n,r) {
    var ans = "";
    if (n.nodeName == "e") {
        if (t == "latex" && r)
	        ans = n.getAttribute("render");
	    else
	        ans = n.firstChild.textContent;
    } else if (n.nodeName == "f") {
	    for(var nn = n.firstChild; nn != null; nn = nn.nextSibling) {
	        if (nn.nodeName == "b" && nn.getAttribute("p") == t) {
	    	    ans = Guppy.manual_render(base,t,nn,r);
	    	    break;
	        }
	    }
    } else if (n.nodeName == "b") {
	    var cs = []
	    var i = 1;
	    var par = n.parentNode;
	    for(var nn = par.firstChild; nn != null; nn = nn.nextSibling)
	        if (nn.nodeName == "c" || nn.nodeName == "l") cs[i++] = Guppy.manual_render(base,t,nn,r);
	    for(var nn = n.firstChild; nn != null; nn = nn.nextSibling) {
	        if (nn.nodeType == 3) ans += nn.textContent;
	        else if (nn.nodeType == 1) {
	            if (nn.hasAttribute("d")) {
	    	        var dim = parseInt(nn.getAttribute("d"));
	    	        var joiner = function(d,l) {
	    	            if (d > 1) for (var k = 0; k < l.length; k++) l[k] = joiner(d-1,l[k]);
	    	    	    return l.join(nn.getAttribute('sep'+(d-1)));
	    	        }
	    	        ans += joiner(dim,cs[parseInt(nn.getAttribute("ref"))]);
	    	    }
	    	    else ans += cs[parseInt(nn.getAttribute("ref"))];
	        }
	    }
    } else if (n.nodeName == "l") {
	    ans = [];
	    var i = 0;
	    for(var nn = n.firstChild; nn != null; nn = nn.nextSibling)
	        ans[i++] = Guppy.manual_render(base,t,nn,r);
    } else if (n.nodeName == "c" || n.nodeName == "m") {
	    for(var nn = n.firstChild; nn != null; nn = nn.nextSibling)
	        ans += Guppy.manual_render(base,t,nn,r);
        if (t == "latex" && n.getAttribute("bracket") == "yes" &&
	        base.evaluate(Guppy.bracket_xpath, n, null, XPathResult.BOOLEAN_TYPE, null).booleanValue) { 
	        ans = "\\left("+ans+"\\right)";
	    }
    }
    return ans;
}

Guppy.prototype.fire_event = function(event, args) {
    if (this.events[event]) this.events[event](args);
}

Guppy.prototype.path_to = function(n) {
    var name = n.nodeName;
    if (name == "m") return "guppy_loc_m";
    var ns = 0;
    for (var nn = n; nn != null; nn = nn.previousSibling) if (nn.nodeType == 1 && nn.nodeName == name) ns++;
    return this.path_to(n.parentNode)+"_"+name+""+ns;
}

Guppy.prototype.is_changed = function() {
    var bb = this.editor.getElementsByClassName("katex")[0];
    if (!bb) return;
    var rect = bb.getBoundingClientRect();
    if (this.bounding_box)
	    ans = this.bounding_box.top != rect.top || this.bounding_box.bottom != rect.bottom || this.bounding_box.right != rect.right || this.bounding_box.left != rect.left;
    else
	    ans = true;
    this.bounding_box = rect;
    return ans;
}

Guppy.prototype.recompute_locations_paths = function() {
    ans = [];
    var bb = this.editor.getElementsByClassName("katex")[0];
    if (!bb) return;
    var rect = bb.getBoundingClientRect();
    ans.push({'path':'all',
	      'top':rect.top,
	      'bottom':rect.bottom,
	      'left':rect.left,
	      'right':rect.right});
    var elts = this.editor.getElementsByClassName("guppy_elt");
    for (var i = 0; i < elts.length; i++) {
	    var elt = elts[i];
        if (elt.nodeName == "mstyle") continue;
	    var rect = elt.getBoundingClientRect();
        if (rect.top == 0 && rect.bottom == 0 && rect.left == 0 && rect.right == 0) continue;
	    var cl = elt.classList;
	    for(var j = 0; j < cl.length; j++) {
	        if (cl[j].indexOf("guppy_loc") == 0) {
	    	    ans.push({'path':cl[j],
	    	    	  'top':rect.top,
	    	    	  'bottom':rect.bottom,
	    	    	  'left':rect.left,
	    	    	  'right':rect.right,
	    	    	  'mid_x':(rect.left+rect.right)/2,
	    	    	  'mid_y':(rect.bottom+rect.top)/2,
	    	    	  'blank':(' '+elt.className+' ').indexOf(' guppy_blank ') >= 0});
	    	    break;
	        }
	    }
    }
    this.boxes = ans;
}

Guppy.get_loc = function(x,y,current_node,current_caret) {
    var g = Guppy.active_guppy;
    var min_dist = -1;
    var mid_dist = 0;
    var pos = "";
    var opt = null;
    var cur = null;
    var car = null;
    // check if we go to first or last element
    var bb = g.editor.getElementsByClassName("katex")[0];
    if (!bb) return;
        var rect = bb.getBoundingClientRect();
    if (current_node) {
	    var current_path = g.path_to(current_node);
	    var current_pos = parseInt(current_path.substring(current_path.lastIndexOf("e")+1));
    }

    var boxes = g.boxes;
    if (! boxes) return;
    if (current_node) {
	    current_path = current_path.replace(/e[0-9]+$/,"e");
	    var boxes2 = [];
	    for(var i = 0; i < boxes.length; i++) {
	        if (boxes[i].path == "all") continue;
	        var loc = boxes[i].path.substring(0,boxes[i].path.lastIndexOf("_"));
	        loc = loc.replace(/e[0-9]+$/,"e");
	        if (loc == current_path) {
	    	boxes2.push(boxes[i]);
	        }
	    }
	    boxes = boxes2;
    }
    if (!boxes) return;
    for (var i = 0; i < boxes.length; i++) {
	    var box = boxes[i];
        if (box.path == "all") {
	        if (!opt) opt = {'path':'guppy_loc_m_e1_0'};
	        continue;
	    }
	    var xdist = Math.max(box.left - x, x - box.right, 0)
	    var ydist = Math.max(box.top - y, y - box.bottom, 0)
	    var dist = Math.sqrt(xdist*xdist + ydist*ydist);
        if (min_dist == -1 || dist < min_dist) {
	        min_dist = dist;
	        mid_dist = x - box.mid_x;
	        opt = box;
	    }
    }
    var loc = opt.path.substring("guppy_loc".length);
    loc = loc.replace(/_/g,"/");
    loc = loc.replace(/([0-9]+)(?=.*?\/)/g,"[$1]");
    cur = g.base.evaluate(loc.substring(0,loc.lastIndexOf("/")), 
                          g.base.documentElement, null, 
                          XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    car = parseInt(loc.substring(loc.lastIndexOf("/")+1));
    // Check if we want the cursor before or after the element
    if (mid_dist > 0 && !(opt.blank)) {
	    car++;
    }
    ans = {"current":cur,"caret":car,"pos":pos};
    if (current_node && opt) {
	    var opt_pos = parseInt(opt.path.substring(opt.path.lastIndexOf("e")+1,opt.path.lastIndexOf("_")));
        if (opt_pos < current_pos) pos = "left";
        else if (opt_pos > current_pos) pos = "right";
        else if (car < current_caret) pos = "left";
        else if (car > current_caret) pos = "right";
        if (pos) ans['pos'] = pos;
	    else ans['pos'] = "none";
    }
    return ans;
}

Guppy.prototype.select_to = function(x,y, mouse) {
    var sel_caret = this.caret;
    var sel_cursor = this.current;
    if (this.sel_status == Guppy.SEL_CURSOR_AT_START) {
	    sel_cursor = this.sel_end.node;
	    sel_caret = this.sel_end.caret;
    } else if (this.sel_status == Guppy.SEL_CURSOR_AT_END) {
	    sel_cursor = this.sel_start.node;
	    sel_caret = this.sel_start.caret;
    }
    var loc = Guppy.get_loc(x,y,sel_cursor,sel_caret);
    if (!loc) return;
    if (loc.current == sel_cursor && loc.caret == sel_caret) {
	    this.caret = loc.caret
	    this.sel_status = Guppy.SEL_NONE;
    } else if (loc.pos == "left") {
	    this.sel_end = {"node":sel_cursor,"caret":sel_caret};
	    this.set_sel_boundary(Guppy.SEL_CURSOR_AT_START, mouse);
    } else if (loc.pos == "right") {
	    this.sel_start = {"node":sel_cursor,"caret":sel_caret};
	    this.set_sel_boundary(Guppy.SEL_CURSOR_AT_END, mouse);
    }
    this.current = loc.current;
    this.caret = loc.caret;
}

Guppy.mouse_up = function(e) {
    Guppy.kb.is_mouse_down = false;
    var g = Guppy.active_guppy;
    if (g) g.render(true);
}

Guppy.mouse_down = function(e) {
    var n = e.target;
    Guppy.kb.is_mouse_down = true;
    if (e.target == document.getElementById("toggle_ref")) toggle_div("help_card");
    else while (n != null) {
        if (n.id in Guppy.instances) {
	        e.preventDefault();
	        var prev_active = Guppy.active_guppy;
	        for (var i in Guppy.instances) {
	            if (i != n.id) Guppy.instances[i].deactivate();
	            Guppy.active_guppy = Guppy.instances[n.id];
	            Guppy.active_guppy.activate();
	        }
	        var g = Guppy.active_guppy;
	        g.space_caret = 0;
	        if (prev_active == g) {
	            if (e.shiftKey) {
	               g.select_to(e.clientX, e.clientY, true);
	            } else {
	                var loc = Guppy.get_loc(e.clientX,e.clientY);
	                if (!loc) return;
	                g.current = loc.current;
	                g.caret = loc.caret;
	                g.sel_status = Guppy.SEL_NONE;
	            }
	            g.render(true);
	       }
	       return;
	    }
	    n = n.parentNode;
    }
    Guppy.active_guppy = null;
    for (var i in Guppy.instances) {
	    Guppy.instances[i].deactivate();
    }
}

Guppy.mouse_move = function(e) {
    var g = Guppy.active_guppy;
    if (!g) return;
    if (!Guppy.kb.is_mouse_down) {
	    var bb = g.editor;
	    var rect = bb.getBoundingClientRect();
        if ((e.clientX < rect.left || e.clientX > rect.right) || (e.clientY > rect.bottom || e.clientY < rect.top)) {
	        g.temp_cursor = {"node":null,"caret":0};
	    } else {
	        var loc = Guppy.get_loc(e.clientX,e.clientY);
	        if (!loc) return;
	        g.temp_cursor = {"node":loc.current,"caret":loc.caret};
	    }
	    g.render(g.is_changed());
    } else {
	    g.select_to(e.clientX,e.clientY, true);
	    g.render(g.is_changed());
    }
}

window.addEventListener("mousedown",Guppy.mouse_down, false);
window.addEventListener("mouseup",Guppy.mouse_up, false);
window.addEventListener("mousemove",Guppy.mouse_move, false);

Guppy.prototype.add_paths = function(n,path) {
    if (n.nodeName == "e") {
	n.setAttribute("path",path);
    } else {
	    var es = 1, fs = 1, cs = 1, ls = 1;
	    for(var c = n.firstChild; c != null; c = c.nextSibling) {
	        if (c.nodeName == "c") { this.add_paths(c, path+"_c"+cs); cs++; }
	        else if (c.nodeName == "f") { this.add_paths(c, path+"_f"+fs); fs++; }
	        else if (c.nodeName == "l") { this.add_paths(c, path+"_l"+ls); ls++; }
	        else if (c.nodeName == "e") { this.add_paths(c, path+"_e"+es); es++; }
	    }
    }
}

Guppy.prototype.add_classes_cursors = function(n,path) {
    if (n.nodeName == "e") {
	    var text = n.firstChild.nodeValue;
	    ans = "";
	    var sel_cursor;
	    var text_node = this.is_text(n);
        if (this.sel_status == Guppy.SEL_CURSOR_AT_START) sel_cursor = this.sel_end;
        if (this.sel_status == Guppy.SEL_CURSOR_AT_END) sel_cursor = this.sel_start;
        if (this.sel_status != Guppy.SEL_NONE) {
	        var sel_caret_text = this.is_small(sel_cursor.node) ? Guppy.kb.SMALL_SEL_CARET : Guppy.kb.SEL_CARET;
	        if (!text_node && text.length == 0 && n.parentNode.childElementCount > 1) {
	    	    sel_caret_text = "\\color{blue}{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+sel_caret_text+"}}";
	        } else {
	    	    sel_caret_text = "\\color{blue}{"+sel_caret_text+"}";
	        }
	        if (this.sel_status == Guppy.SEL_CURSOR_AT_END) 
                sel_caret_text = text_node ? "[" : sel_caret_text + "\\color{"+Guppy.kb.SEL_COLOR+"}{";
	        if (this.sel_status == Guppy.SEL_CURSOR_AT_START) 
                sel_caret_text = text_node ? "]" : "}" + sel_caret_text;
	    }
	    var caret_text = "";
	    var temp_caret_text = "";
        if (text.length == 0) {
	        if (text_node) caret_text = "\\_";
	        else if (n.parentNode.childElementCount == 1) {
	            if (this.current == n) {
	    	        var blank_caret = this.blank_caret || (this.is_small(this.current) ? Guppy.kb.SMALL_CARET : Guppy.kb.CARET);
	    	        ans = "\\color{red}{\\xmlClass{main_cursor guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{"+blank_caret+"}}";
	    	    }
	    	    else if (this.temp_cursor.node == n)
	    	        ans = "\\color{gray}{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{[?]}}";
	    	    else
	    	        ans = "\\color{blue}{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{[?]}}";
	        } else if (this.temp_cursor.node != n && this.current != n && (!(sel_cursor) || sel_cursor.node != n)) {
	    	    // These are the empty e elements at either end of
	    	    // a c or m node, such as the space before and
	    	    // after both the sin and x^2 in sin(x^2)
	    	    //
	    	    // Here, we add in a small element so that we can
	    	    // use the mouse to select these areas
	    	    ans = "\\phantom{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{\\cursor[0.1ex]{1ex}}}";
	        }
	    }
	    for(var i = 0; i < text.length+1; i++) {
	        if (n == this.current && i == this.caret && (text.length > 0 || n.parentNode.childElementCount > 1)) {
	            if (text_node) {
	    	        if (this.sel_status == Guppy.SEL_CURSOR_AT_START)
	    		        caret_text = "[";
	    	        else if (this.sel_status == Guppy.SEL_CURSOR_AT_END)
	    		        caret_text = "]";
	    	        else
	    		        caret_text = "\\_";
	    	        }
	    	else{
	    	    caret_text = this.is_small(this.current) ? Guppy.kb.SMALL_CARET : Guppy.kb.CARET;
	    	    if (text.length == 0)
	    		caret_text = "\\color{red}{\\xmlClass{main_cursor guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+caret_text+"}}";
	    	    else {
	    		caret_text = "\\color{red}{\\xmlClass{main_cursor}{"+caret_text+"}}"
	    	    }
	    	    if (this.sel_status == Guppy.SEL_CURSOR_AT_START)
	    		caret_text = caret_text + "\\color{"+Guppy.kb.SEL_COLOR+"}{";
	    	    else if (this.sel_status == Guppy.SEL_CURSOR_AT_END)
	    		caret_text = "}" + caret_text;
	    	}
	    	ans += caret_text;
	        }
	        else if (n == this.current && i == this.caret && text_node) {
	    	ans += caret_text;
	        }
	        else if (this.sel_status != Guppy.SEL_NONE && sel_cursor.node == n && i == sel_cursor.caret) {
	    	ans += sel_caret_text;
	        }
	        else if (this.temp_cursor.node == n && i == this.temp_cursor.caret && (text.length > 0 || n.parentNode.childElementCount > 1)) {
	     if (text_node) 
	    	    temp_caret_text = ".";
	    	else{
	    	    temp_caret_text = this.is_small(this.current) ? Guppy.kb.TEMP_SMALL_CARET : Guppy.kb.TEMP_CARET;
	    	    if (text.length == 0) {
	    		temp_caret_text = "\\color{gray}{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+temp_caret_text+"}}";
	    	    }
	    	    else
	    		temp_caret_text = "\\color{gray}{"+temp_caret_text+"}";
	    	}
	    	ans += temp_caret_text;
	        }
	        if (i < text.length) ans += "\\xmlClass{guppy_elt guppy_loc_"+n.getAttribute("path")+"_"+i+"}{"+text[i]+"}";
	    }
	    n.setAttribute("render", ans);
	    n.removeAttribute("path");
    } //Node == e - LONG
    else {
	    for(var c = n.firstChild; c != null; c = c.nextSibling) {
	        if (c.nodeName == "c" || c.nodeName == "l" || c.nodeName == "f" || c.nodeName == "e") { this.add_classes_cursors(c); }
	    }
    }
}

Guppy.prototype.post_render_cleanup = function(n) {
    if (n.nodeName == "e") {
	    n.removeAttribute("path");
	    n.removeAttribute("render");
	    n.removeAttribute("current");
	    n.removeAttribute("temp");
    } else {
	    for(var c = n.firstChild; c != null; c = c.nextSibling)
	        if (c.nodeType == 1) this.post_render_cleanup(c);
    }
}

Guppy.prototype.render_node = function(n,t) {
    // All the interesting work is done by transform.  This function just adds in the cursor and selection-start cursor
    var output = "";
    if (t == "latex") {
	    this.add_paths(this.base.documentElement,"m");
	    this.add_classes_cursors(this.base.documentElement);
	    this.current.setAttribute("current","yes");
        if (this.temp_cursor.node) this.temp_cursor.node.setAttribute("temp","yes");
	    output = Guppy.transform(t, this.base, true);
	    this.post_render_cleanup(this.base.documentElement);
	    output = output.replace(new RegExp('&amp;','g'), '&');
	    return output;
    }
    return Guppy.transform(t, this.base);
}

Guppy.prototype.set_sel_start = function() {
    this.sel_start = {"node":this.current, "caret":this.caret};
}

Guppy.prototype.set_sel_end = function() {
    this.sel_end = {"node":this.current, "caret":this.caret};
}

Guppy.prototype.next_sibling = function(n) {
    if (n == null) return null;
    var c = n.parentNode.nextSibling;
    while (c != null && c.nodeName != "e") c = c.nextSibling;
    if (c == null) return null;
    else return c.firstChild;
}

Guppy.prototype.prev_sibling = function(n) {
    if (n == null) return null;
    var c = n.parentNode.previousSibling;
    while (c != null && c.nodeName != "e") c = c.previousSibling;
    if (c == null) return null
    else return c.firstChild;
}

Guppy.prototype.down_from_f = function() {
    var nn = this.current.firstChild;
    while (nn != null && nn.nodeName != 'c' && nn.nodeName != 'l') nn = nn.nextSibling;
    if (nn != null) {
	    while (nn.nodeName == 'l') nn = nn.firstChild;
	    this.current = nn.firstChild;
    }
}

Guppy.prototype.down_from_f_to_blank = function() {
    var nn = this.current.firstChild;
    while (nn != null && !(nn.nodeName == 'c' && nn.children.length == 1 && nn.firstChild.firstChild.nodeValue == "")) {
	nn = nn.nextSibling;
    }
    if (nn != null) {
	//Sanity check:
	    while (nn.nodeName == 'l') nn = nn.firstChild;
        if (nn.nodeName != 'c' || nn.firstChild.nodeName != 'e') {
	        this.problem('dfftb');
	        return;
	    }
	    this.current = nn.firstChild;
    }
    else this.down_from_f();
}

Guppy.prototype.delete_from_f = function(to_insert) {
    var n = this.current;
    var p = n.parentNode;
    var prev = n.previousSibling;
    var next = n.nextSibling;
    var middle = to_insert || "";
    var new_node = this.make_e(prev.firstChild.textContent + middle + next.firstChild.textContent);
    this.current = new_node;
    this.caret = prev.firstChild.textContent.length;
    p.insertBefore(new_node, prev);
    p.removeChild(prev);
    p.removeChild(n);
    p.removeChild(next);
}

Guppy.prototype.symbol_to_node = function(sym_name, content) {
    // sym_name is a key in the symbols dictionary
    //
    // content is a list of nodes to insert
    
    var s = Guppy.kb.symbols[sym_name];
    var f = this.base.createElement("f");
    if ("type" in s) f.setAttribute("type",s["type"])
    if (s['char']) f.setAttribute("c","yes");
    
    var first_ref = -1;
    var refs_count = 0;
    var lists = {}
    var first;

    // Make the b nodes for rendering each output    
    for (var t in s["output"]) {
	    var b = this.base.createElement("b");
	    b.setAttribute("p",t);

	    var out = s["output"][t];
        if (typeof out == 'string') {
	        out = out.split(/(\{\$[0-9]+(?:\{[^}]+\})*\})/g);
	        for (var i = 0; i < out.length; i++) {
	    	    m = out[i].match(/^\{\$([0-9]+)((?:\{[^}]+\})*)\}$/);
	            if (m) {
	    	        //console.log("O",out);
	    	        out[i] = {'ref':parseInt(m[1])};
	    	        if (m[2].length > 0) {
	    	    	    mm = m[2].match(/\{[^}]*\}/g);
	    	    	    out[i]['d'] = mm.length;
	    	    	    for(var j = 0; j < mm.length; j++) {
	    	    	        out[i]['sep'+j] = mm[j].substring(1,mm[j].length-1);
	    	    	    }
	    	        }
	    	    }
	        }
	    }
	    for(var i = 0; i < out.length; i++) {
	        if (typeof out[i] == 'string' || out[i] instanceof String) {
	    	    var nt = this.base.createTextNode(out[i]);
	    	    b.appendChild(nt);
	        } else {
	    	    var nt = this.base.createElement("r");
	    	    for(var attr in out[i]) {
	    	        nt.setAttribute(attr,out[i][attr]);
	    	    }
	            if (t == 'latex') {
	    	        if (first_ref == -1) first_ref = out[i]['ref'];
	    	        if ('d' in out[i]) lists[refs_count] = out[i]['d']
	    	        refs_count++;
	    	    }
	    	    b.appendChild(nt);
	        }
	    }
	    f.appendChild(b);
    }
    // Now make the c nodes for storing the content
    for (var i = 0; i < refs_count; i++) {
	    var nc = this.base.createElement("c");
        if (i in content) {
	        var node_list = content[i];
	        for (var se = 0; se < node_list.length; se++)
		        nc.appendChild(node_list[se].cloneNode(true));
	    } else nc.appendChild(this.make_e(""));
        if (i+1 == first_ref) first = nc.lastChild;
	    for(var a in s['attrs'])
	        if (s['attrs'][a][i] != 0) nc.setAttribute(a,s['attrs'][a][i]);
        if (i in lists) {
	        var par = f;
	        for (var j = 0; j < lists[i]; j++) {
	    	    var nl = this.base.createElement("l");
	    	    nl.setAttribute("s","1");
	    	    par.appendChild(nl);
	    	    par = nl;
	            if (j == lists[i]-1) nl.appendChild(nc);
	        }
	    } else f.appendChild(nc);
    }
    return {"f":f, "first":first};
}

Guppy.prototype.is_text = function(nn) {
    return nn.parentNode.getAttribute("mode") && (nn.parentNode.getAttribute("mode") == "text" || nn.parentNode.getAttribute("mode") == "symbol");
}

Guppy.prototype.is_symbol = function(nn) {
    return nn.parentNode.getAttribute("mode") && nn.parentNode.getAttribute("mode") == "symbol";
}

Guppy.prototype.is_small = function(nn) {
    var n = nn.parentNode;
    while (n != null && n.nodeName != 'm') {
        if (n.getAttribute("size") == "s")
	        return true;
	    n = n.parentNode
	    while (n != null && n.nodeName != 'c')
	        n = n.parentNode;
    }
    return false;
}

Guppy.prototype.insert_symbol = function(sym_name) {
    var s = Guppy.kb.symbols[sym_name];
    if (this.is_blacklisted(s['type'])) return false;
    var node_list = {};
    var content = {};
    var left_piece,right_piece;
    var cur = s['current'] == null ? 0 : parseInt(s['current']);
    var to_remove = [];
    var to_replace = null;
    var replace_f = false;
    
    if (cur > 0) {
	    cur--;
        if (this.sel_status != Guppy.SEL_NONE) {
	        var sel = this.sel_get();
	        sel_parent = sel.involved[0].parentNode;
	        to_remove = sel.involved;
	        left_piece = this.make_e(sel.remnant.firstChild.nodeValue.slice(0,this.sel_start.caret));
	        right_piece = this.make_e(sel.remnant.firstChild.nodeValue.slice(this.sel_start.caret));
	        content[cur] = sel.node_list;
	    } else if (s['current_type'] == 'token') {
	        // If we're at the beginning, then the token is the previous f node
	        if (this.caret == 0 && this.current.previousSibling != null) {
	    	    content[cur] = [this.make_e(""), this.current.previousSibling, this.make_e("")];
	    	    to_replace = this.current.previousSibling;
	    	    replace_f = true;
	        } else {
	    	    // look for [0-9.]+|[a-zA-Z] immediately preceeding the caret and use that as token
	    	    var prev = this.current.firstChild.nodeValue.substring(0,this.caret);
	    	    var token = prev.match(/[0-9.]+$|[a-zA-Z]$/);
	            if (token != null && token.length > 0) {
	    	        token = token[0];
	    	        left_piece = this.make_e(this.current.firstChild.nodeValue.slice(0,this.caret-token.length));
	    	        right_piece = this.make_e(this.current.firstChild.nodeValue.slice(this.caret));
	    	        content[cur] = [this.make_e(token)];
	    	    }
	        }
	    }
    }
    if (!replace_f && (left_piece == null || right_piece == null)) {
	    left_piece = this.make_e(this.current.firstChild.nodeValue.slice(0,this.caret));
	    right_piece = this.make_e(this.current.firstChild.nodeValue.slice(this.caret));
	    to_remove = [this.current];
    }

    // By now:
    // 
    // content contains whatever we want to pre-populate the 'current' field with (if any)
    //
    // right_piece contains whatever content was in an involved node
    // to the right of the cursor but is not part of the insertion.
    // Analogously for left_piece
    //
    // Thus all we should have to do now is symbol_to_node(sym_type,
    // content) and then add the left_piece, resulting node, and
    // right_piece in that order.
    
    var new_current = null;
    var current_parent = this.current.parentNode;
    
    var sym = this.symbol_to_node(sym_name,content);
    var f = sym.f;
    var new_current = sym.first;

    var next = this.current.nextSibling;

    if (replace_f) {
	    current_parent.replaceChild(f,to_replace);
    } else {
        if (to_remove.length == 0) this.current.parentNode.removeChild(this.current);
	
	    for(var i = 0; i < to_remove.length; i++) {
	        if (next == to_remove[i]) next = next.nextSibling;
	        current_parent.removeChild(to_remove[i]);
	    }
	    current_parent.insertBefore(left_piece, next);
	    current_parent.insertBefore(f, next);
	    current_parent.insertBefore(right_piece, next);
    }
    
    this.caret = 0;
    this.current = f;
    if (s['char']) {
	    this.current = this.current.nextSibling;
    } else this.down_from_f_to_blank();

    this.sel_clear();
    this.checkpoint();
    this.render(true);
    return true;
}

Guppy.prototype.sel_get = function() {
    if (this.sel_status == Guppy.SEL_NONE) return null;
    var involved = [];
    var node_list = [];
    var remnant = null;

    if (this.sel_start.node == this.sel_end.node)
	    return {"node_list":[this.make_e(this.sel_start.node.firstChild.nodeValue.substring(this.sel_start.caret, this.sel_end.caret))],
		        "remnant":this.make_e(this.sel_start.node.firstChild.nodeValue.substring(0, this.sel_start.caret) + this.sel_end.node.firstChild.nodeValue.substring(this.sel_end.caret)),
		        "involved":[this.sel_start.node]};
    
    node_list.push(this.make_e(this.sel_start.node.firstChild.nodeValue.substring(this.sel_start.caret)));
    involved.push(this.sel_start.node);
    involved.push(this.sel_end.node);
    remnant = this.make_e(this.sel_start.node.firstChild.nodeValue.substring(0, this.sel_start.caret) + this.sel_end.node.firstChild.nodeValue.substring(this.sel_end.caret));
    var n = this.sel_start.node.nextSibling;
    while (n != null && n != this.sel_end.node) {
	    involved.push(n);
	    node_list.push(n);
	    n = n.nextSibling;
    }
    node_list.push(this.make_e(this.sel_end.node.firstChild.nodeValue.substring(0, this.sel_end.caret)));
    return {"node_list":node_list,
	    "remnant":remnant,
	    "involved":involved,
	    "cursor":0};
}

Guppy.prototype.print_selection = function() {
    var sel = this.sel_get();
    if (sel == null) return "[none]";
    var ans = "";
    ans += "node_list: \n";
    for (var i = 0; i < sel.node_list.length; i++) {
	    var n = sel.node_list[i];
	    ans += (new XMLSerializer()).serializeToString(n) + "\n";
    }
    ans += "\ninvolved: \n";
    for (var i = 0; i < sel.involved.length; i++) {
	    var n = sel.involved[i];
	    ans += (new XMLSerializer()).serializeToString(n) + "\n";
    }
}

Guppy.prototype.make_e = function(text) {
    var new_node = this.base.createElement("e");
    new_node.appendChild(this.base.createTextNode(text));
    return new_node;
}

Guppy.prototype.is_blank = function() {
    return this.base.documentElement.firstChild == this.base.documentElement.lastChild && this.base.documentElement.firstChild.firstChild.textContent == "";
}

Guppy.prototype.insert_string = function(s) {
    if (this.sel_status != Guppy.SEL_NONE) {
	    this.sel_delete();
	    this.sel_clear();
    }
    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splice(this.caret,s)
    this.caret += s.length;
    this.checkpoint();
    if (this.autoreplace) this.check_for_symbol();
    this.render(true);
}

Guppy.prototype.render = function(updated) {
    if (!this.editor_active && this.is_blank()) {
	    katex.render(this.empty_content,this.editor);
	    return;
    }
    var tex = this.render_node(this.base,"latex");
    this.fire_event("debug",{"message":"RENDERING: " + tex})
    katex.render(tex,this.editor);
    if (updated) {
	    this.recompute_locations_paths();
    }
}

Guppy.prototype.activate = function() {
    Guppy.active_guppy = this;
    this.editor_active = true;
    this.editor.className = this.editor.className.replace(new RegExp('(\\s|^)guppy_inactive(\\s|$)'),' guppy_active ');
    this.editor.focus();
    if (this.ready) {
	this.render(true);
	this.fire_event("focus",{"focused":true});
    }
}

Guppy.prototype.deactivate = function() {
    this.editor_active = false;
    var r1 = new RegExp('(?:\\s|^)guppy_active(?:\\s|$)');
    var r2 = new RegExp('(?:\\s|^)guppy_inactive(?:\\s|$)');
    if (this.editor.className.match(r1)) {
	    this.editor.className = this.editor.className.replace(r1,' guppy_inactive ');
    } else if (!this.editor.className.match(r2)) {
	    this.editor.className += ' guppy_inactive ';
    }
    Guppy.kb.shift_down = false;
    Guppy.kb.ctrl_down = false;
    Guppy.kb.alt_down = false;
    if (this.ready) {
	    this.render();
	    this.fire_event("focus",{"focused":false});
    }
}

Guppy.prototype.sel_copy = function() {
    var sel = this.sel_get();
    if (!sel) return;
    this.clipboard = [];
    for (var i = 0; i < sel.node_list.length; i++)
	    this.clipboard.push(sel.node_list[i].cloneNode(true));
    this.sel_clear();
}

Guppy.prototype.sel_cut = function() {
    var node_list = this.sel_delete();
    this.clipboard = [];
    for (var i = 0; i < node_list.length; i++)
	    this.clipboard.push(node_list[i].cloneNode(true));
    this.sel_clear();
    this.checkpoint();
}

Guppy.prototype.insert_nodes = function(node_list, move_cursor) {
    var real_clipboard = [];
    for (var i = 0; i < node_list.length; i++)
	    real_clipboard.push(node_list[i].cloneNode(true));

    if (real_clipboard.length == 1) {
	    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.substring(0,this.caret) + real_clipboard[0].firstChild.nodeValue + this.current.firstChild.nodeValue.substring(this.caret);
        if (move_cursor) this.caret += real_clipboard[0].firstChild.nodeValue.length;
    }
    else {
	    var nn = this.make_e(real_clipboard[real_clipboard.length-1].firstChild.nodeValue + this.current.firstChild.nodeValue.substring(this.caret));
	    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.substring(0,this.caret) + real_clipboard[0].firstChild.nodeValue;
        if (this.current.nextSibling == null)
	        this.current.parentNode.appendChild(nn)
	    else
	        this.current.parentNode.insertBefore(nn, this.current.nextSibling)
	    for(var i = 1; i < real_clipboard.length - 1; i++)
	        this.current.parentNode.insertBefore(real_clipboard[i], nn);
        if (move_cursor) {
	        this.current = nn;
	        this.caret = real_clipboard[real_clipboard.length-1].firstChild.nodeValue.length
	    }
    }
}

Guppy.prototype.sel_paste = function() {
    this.sel_delete();
    this.sel_clear();
    if (!(this.clipboard) || this.clipboard.length == 0) return;
    this.insert_nodes(this.clipboard, true);
    this.checkpoint();
    return;
}

Guppy.prototype.sel_clear = function() {
    this.sel_start = null;    
    this.sel_end = null;
    this.sel_status = Guppy.SEL_NONE;
}

Guppy.prototype.sel_delete = function() {
    var sel = this.sel_get();
    if (!sel) return;
    sel_parent = sel.involved[0].parentNode;
    sel_prev = sel.involved[0].previousSibling;
    for (var i = 0; i < sel.involved.length; i++) {
	    var n = sel.involved[i];
	    sel_parent.removeChild(n);
    }
    if (sel_prev == null) {
        if (sel_parent.firstChild == null)
	        sel_parent.appendChild(sel.remnant);
	    else
	        sel_parent.insertBefore(sel.remnant, sel_parent.firstChild);
    }
    else if (sel_prev.nodeName == 'f') {
        if (sel_prev.nextSibling == null)
	        sel_parent.appendChild(sel.remnant);
	    else
	        sel_parent.insertBefore(sel.remnant, sel_prev.nextSibling);
    }
    this.current = sel.remnant
    this.caret = this.sel_start.caret;
    return sel.node_list;
}

//Functions for handling navigation and editing commands: 

Guppy.prototype.sel_all = function() {
    this.home();
    this.set_sel_start();
    this.end();
    this.set_sel_end();
    if (this.sel_start.node != this.sel_end.node || this.sel_start.caret != this.sel_end.caret)
	this.sel_status = Guppy.SEL_CURSOR_AT_END;
}

Guppy.prototype.sel_right = function() {
    if (this.sel_status == Guppy.SEL_NONE) {
	    this.set_sel_start();
	    this.sel_status = Guppy.SEL_CURSOR_AT_END;
    }
    if (this.caret >= this.get_length(this.current)) {
	    var nn = this.current.nextSibling;
        if (nn != null) {
	        this.current = nn.nextSibling;
	        this.caret = 0;
	        this.set_sel_boundary(Guppy.SEL_CURSOR_AT_END);
	    } else {
	        this.set_sel_boundary(Guppy.SEL_CURSOR_AT_END);
	    }
    } else {
	    this.caret += 1;
	    this.set_sel_boundary(Guppy.SEL_CURSOR_AT_END);
    }
    if (this.sel_start.node == this.sel_end.node && this.sel_start.caret == this.sel_end.caret) 
	    this.sel_status = Guppy.SEL_NONE;
}

Guppy.prototype.set_sel_boundary = function(sstatus, mouse) {
    if (this.sel_status == Guppy.SEL_NONE || mouse) this.sel_status = sstatus;
    if (this.sel_status == Guppy.SEL_CURSOR_AT_START)
	    this.set_sel_start();
    else if (this.sel_status == Guppy.SEL_CURSOR_AT_END)
	    this.set_sel_end();
}

Guppy.prototype.sel_left = function() {
    if (this.sel_status == Guppy.SEL_NONE) {
	    this.set_sel_end();
	    this.sel_status = Guppy.SEL_CURSOR_AT_START;
    }
    if (this.caret <= 0) {
	    var nn = this.current.previousSibling;
        if (nn != null) {
	        this.current = nn.previousSibling;
	        this.caret = this.current.firstChild.nodeValue.length;
	        this.set_sel_boundary(Guppy.SEL_CURSOR_AT_START);
	    } else {
	        this.set_sel_boundary(Guppy.SEL_CURSOR_AT_START);
	    }
    } else {
	    this.caret -= 1;
	    this.set_sel_boundary(Guppy.SEL_CURSOR_AT_START);
    }
    if (this.sel_start.node == this.sel_end.node && this.sel_start.caret == this.sel_end.caret) 
	    this.sel_status = Guppy.SEL_NONE;
}

Guppy.prototype.list_extend_copy_right = function() {this.list_extend("right", true);}
Guppy.prototype.list_extend_copy_left = function() {this.list_extend("left", true);}
Guppy.prototype.list_extend_right = function() {this.list_extend("right", false);}
Guppy.prototype.list_extend_left = function() {this.list_extend("left", false);}
Guppy.prototype.list_extend_up = function() {this.list_extend("up", false);}
Guppy.prototype.list_extend_down = function() {this.list_extend("down", false);}
Guppy.prototype.list_extend_copy_up = function() {this.list_extend("up", true);}
Guppy.prototype.list_extend_copy_down = function() {this.list_extend("down", true);}

Guppy.prototype.list_vertical_move = function(down) {
    var n = this.current;
    while (n.parentNode && n.parentNode.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l' && n.parentNode.parentNode.nodeName == 'l')) {
	    n = n.parentNode;
    }
    if (!n.parentNode) return;
    var pos = 1;
    var cc = n;
    while (cc.previousSibling != null) {
	    pos++;
	    cc = cc.previousSibling;
    }
    var new_l = down ? n.parentNode.nextSibling : n.parentNode.previousSibling
    if (!new_l) return;
    var idx = 1;
    var nn = new_l.firstChild;
    while (idx < pos) {
	    idx++;
	    nn = nn.nextSibling;
    }
    this.current = nn.firstChild;
    this.caret = down ? 0 : this.current.firstChild.textContent.length;
}

Guppy.prototype.list_extend = function(direction, copy) {
    var vertical = direction == "up" || direction == "down";
    var before = direction == "up" || direction == "left";
    var this_name = vertical ? "l" : "c";
    var n = this.current;
    while (n.parentNode && !(n.nodeName == this_name && n.parentNode.nodeName == 'l')) {
	n = n.parentNode;
    }
    if (!n.parentNode) return;
    var to_insert;
    
    // check if 2D and horizontal and extend all the other rows if so 
    if (!vertical && n.parentNode.parentNode.nodeName == "l") {
	    to_insert = this.base.createElement("c");
	    to_insert.appendChild(this.make_e(""));
	    var pos = 1;
	    var cc = n;
	    while (cc.previousSibling != null) {
	        pos++;
	        cc = cc.previousSibling;
	    }
	    var to_modify = [];
	    var iterator = this.base.evaluate("./l/c[position()="+pos+"]", n.parentNode.parentNode, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
	    try { 
            for (var nn = iterator.iterateNext(); nn != null; nn = iterator.iterateNext()) to_modify.push(nn);
        } catch(e) { 
            this.fire_event("error",{"message":'XML modified during iteration? ' + e});
        }
	    for(var j = 0; j < to_modify.length; j++) {
	        var nn = to_modify[j];
	        if (copy) nn.parentNode.insertBefore(nn.cloneNode(true), before ? nn : nn.nextSibling);
	        else nn.parentNode.insertBefore(to_insert.cloneNode(true), before ? nn : nn.nextSibling);
	        nn.parentNode.setAttribute("s",parseInt(nn.parentNode.getAttribute("s"))+1);
	    }
	    this.current = before ? n.previousSibling.lastChild : n.nextSibling.firstChild;
	    this.caret = this.current.firstChild.textContent.length;
	    return;
    }
    
    if (copy) {
	    to_insert = n.cloneNode(true);
    } else {
        if (vertical) {
	        to_insert = this.base.createElement("l");
	        to_insert.setAttribute("s",n.getAttribute("s"))
	        for (var i = 0; i < parseInt(n.getAttribute("s")); i++) {
	    	var c = this.base.createElement("c");
	    	c.appendChild(this.make_e(""));
	    	to_insert.appendChild(c);
	        }
	    } else{
	        to_insert = this.base.createElement("c");
	        to_insert.appendChild(this.make_e(""));
	    }
    }
    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))+1);
    n.parentNode.insertBefore(to_insert, before ? n : n.nextSibling);
    if (vertical) this.current = to_insert.firstChild.firstChild;
    else this.current = to_insert.firstChild;
    this.caret = 0;
    this.checkpoint();
}

Guppy.prototype.list_remove_col = function() {
    var n = this.current;
    while (n.parentNode && n.parentNode.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l' && n.parentNode.parentNode.nodeName == 'l')) {
	    n = n.parentNode;
    }
    if (!n.parentNode) return;
    
    // Don't remove if there is only a single column:
    if (n.previousSibling != null) {
	    this.current = n.previousSibling.lastChild;
	    this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    }
    else if (n.nextSibling != null) {
	    this.current = n.nextSibling.firstChild;
	    this.caret = 0;
    }
    else return;
    
    var pos = 1;
    var cc = n;
    
    // Find position of column
    while (cc.previousSibling != null) {
	    pos++;
	    cc = cc.previousSibling;
    }
    var to_modify = [];
    var iterator = this.base.evaluate("./l/c[position()="+pos+"]", n.parentNode.parentNode, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
    try{ 
        for (var nn = iterator.iterateNext(); nn != null; nn = iterator.iterateNext()) to_modify.push(nn); 
    } catch(e) { 
        this.fire_event("error",{"message":'XML modified during iteration? ' + e}); 
    }
    for (var j = 0; j < to_modify.length; j++) {
	    var nn = to_modify[j];
	    nn.parentNode.setAttribute("s",parseInt(nn.parentNode.getAttribute("s"))-1);
	    nn.parentNode.removeChild(nn);
    }
}

Guppy.prototype.list_remove_row = function() {
    var n = this.current;
    while (n.parentNode && !(n.nodeName == 'l' && n.parentNode.nodeName == 'l'))
	    n = n.parentNode;
    if (!n.parentNode) return;
    // Don't remove if there is only a single row:
    if (n.previousSibling != null) {
	    this.current = n.previousSibling.firstChild.lastChild;
	    this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    } else if (n.nextSibling != null) {
	    this.current = n.nextSibling.firstChild.firstChild;
	    this.caret = 0;
    }
    else return;

    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))-1);
    n.parentNode.removeChild(n);
}

Guppy.prototype.list_remove = function() {
    var n = this.current;
    while (n.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l'))
	    n = n.parentNode;
    if (!n.parentNode) return;
    if (n.parentNode.parentNode && n.parentNode.parentNode.nodeName == "l") {
	    this.list_remove_col();
	    return;
    }
    if (n.previousSibling != null) {
	    this.current = n.previousSibling.lastChild;
	    this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    }
    else if (n.nextSibling != null) {
	    this.current = n.nextSibling.firstChild;
	    this.caret = 0;
    }
    else return;
    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))-1);
    n.parentNode.removeChild(n);
}

Guppy.prototype.right = function() {
    this.sel_clear();
    if (this.caret >= this.get_length(this.current)) {
	    var nn = this.base.evaluate("following::e[1]", this.current, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (nn != null) {
	        this.current = nn;
	        this.caret = 0;
	    } else{
	        this.fire_event("right_end");
	    }
    } else {
	    this.caret += 1;
    }
}

Guppy.prototype.spacebar = function() {
    this.space_caret = this.caret;
}

Guppy.prototype.get_length = function(n) {
    if (Guppy.is_blank(n) || n.nodeName == 'f') return 0
    return n.firstChild.nodeValue.length;
}

Guppy.prototype.left = function() {
    this.sel_clear();
    if (this.caret <= 0) {
	    var pn = this.base.evaluate("preceding::e[1]", this.current, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (pn != null) {
	        this.current = pn;
	        this.caret = this.current.firstChild.nodeValue.length;
	    } else {
	        this.fire_event("left_end");
	    }
    } else {
	    this.caret -= 1;
    }
}

Guppy.prototype.delete_from_c = function() {
    var pos = 0;
    var c = this.current.parentNode;
    while (c && c.nodeName == "c") {
	    pos++;
	    c = c.previousSibling;
    }
    var idx = this.current.parentNode.getAttribute("delete");
    var survivor_node = this.base.evaluate("./c[position()="+idx+"]", this.current.parentNode.parentNode, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    var survivor_nodes = [];
    for (var n = survivor_node.firstChild; n != null; n = n.nextSibling)
	    survivor_nodes.push(n);
    this.current = this.current.parentNode.parentNode;
    this.delete_from_f();
    this.insert_nodes(survivor_nodes, pos > idx);
}

Guppy.prototype.delete_from_e = function() {
    // return false if we deleted something, and true otherwise.
    if (this.caret > 0) {
	    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splicen(this.caret-1,"",1);
	    this.caret--;
    } else {
	    // The order of these is important
        if (this.current.previousSibling != null && this.current.previousSibling.getAttribute("c") == "yes") {
	        // The previous node is an f node but is really just a character.  Delete it.
	        this.current = this.current.previousSibling;
	        this.delete_from_f();
	    } else if (this.current.previousSibling != null && this.current.previousSibling.nodeName == 'f') {
	        // We're in an e node just after an f node.  Move back into the f node (delete it?)
	        this.left();
	        return false;
	    } else if (this.current.parentNode.previousSibling != null && this.current.parentNode.previousSibling.nodeName == 'c') {
	        // We're in a c child of an f node, but not the first one.  Go to the previous c
	        if (this.current.parentNode.hasAttribute("delete")) {
	    	    this.delete_from_c();
	        } else {
	    	    this.left();
	    	    return false;
	        }
	    } else if (this.current.previousSibling == null && this.current.parentNode.nodeName == 'c' && (this.current.parentNode.previousSibling == null || this.current.parentNode.previousSibling.nodeName != 'c')) {
	        // We're in the first c child of an f node and at the beginning--delete the f node
	        var par = this.current.parentNode;
	        while (par.parentNode.nodeName == 'l' || par.parentNode.nodeName == 'c')
	    	    par = par.parentNode;
	        if (par.hasAttribute("delete")) {
	    	    this.delete_from_c();
	        } else {
	    	    this.current = par.parentNode;
	    	    this.delete_from_f();
	        }
	    } else {
	        // We're at the beginning (hopefully!) 
	        return false;
	    }
    }
    return true;
}

Guppy.prototype.delete_forward_from_e = function() {
    // return false if we deleted something, and true otherwise.
    if (this.caret < this.current.firstChild.nodeValue.length) {
	    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splicen(this.caret,"",1);
    } else {
	    //We're at the end
        if (this.current.nextSibling != null) {
	        // The next node is an f node.  Delete it.
	        this.current = this.current.nextSibling;
	        this.delete_from_f();
	    }
	    else if (this.current.parentNode.nodeName == 'c') {
	        // We're in a c child of an f node.  Do nothing
	        return false;
	    }
    }
    return true;
}

Guppy.prototype.backspace = function() {
    if (this.sel_status != Guppy.SEL_NONE) {
	    this.sel_delete();
	    this.sel_status = Guppy.SEL_NONE;
	    this.checkpoint();
    } else if (this.delete_from_e()) {
	    this.checkpoint();
    }
}

Guppy.prototype.delete_key = function() {
    if (this.sel_status != Guppy.SEL_NONE) {
	    this.sel_delete();
	    this.sel_status = Guppy.SEL_NONE;
	    this.checkpoint();
    } else if (this.delete_forward_from_e()) {
	    this.checkpoint();
    }
}

Guppy.prototype.backslash = function() {
    if (this.is_text(this.current)) return;
    this.insert_symbol("sym_name");
}

Guppy.prototype.tab = function() {
    if (!this.is_symbol(this.current)) {
	    this.check_for_symbol();
	    return;
    }
    var sym_name = this.current.firstChild.textContent;
    var candidates = [];
    for (var n in Guppy.kb.symbols) {
        if (n.startsWith(sym_name)) candidates.push(n);
    }
    if (candidates.length == 1) {
	    this.current.firstChild.textContent = candidates[0];
	    this.caret = candidates[0].length;
    }
    else {
	    this.fire_event("completion",{"candidates":candidates});
    }
}

Guppy.prototype.right_paren = function() {
    if (this.current.nodeName == 'e' && this.caret < this.current.firstChild.nodeValue.length - 1) return;
    else this.right();
}

Guppy.prototype.up = function() {
    this.sel_clear();
    if (this.current.parentNode.hasAttribute("up")) {
	    var t = parseInt(this.current.parentNode.getAttribute("up"));
	    var f = this.current.parentNode.parentNode;
	    var n = f.firstChild;
	    while (n != null && t > 0) {
	        if (n.nodeName == 'c') t--;
	        if (t > 0) n = n.nextSibling;
	    }
	    this.current = n.lastChild;
	    this.caret = this.current.firstChild.nodeValue.length;
    } else this.list_vertical_move(false);
}

Guppy.prototype.down = function() {
    this.sel_clear();
    if (this.current.parentNode.hasAttribute("down")) {
	    var t = parseInt(this.current.parentNode.getAttribute("down"));
	    var f = this.current.parentNode.parentNode;
	    var n = f.firstChild;
	    while (n != null && t > 0) {
	        if (n.nodeName == 'c') t--;
	        if (t > 0) n = n.nextSibling;
	    }
	    this.current = n.lastChild;
	    this.caret = this.current.firstChild.nodeValue.length;
    }
    else this.list_vertical_move(true);
}

Guppy.prototype.home = function() {
    while (this.current.previousSibling != null)
	    this.current = this.current.previousSibling;
    this.caret = 0;
}

Guppy.prototype.end = function() {
    while (this.current.nextSibling != null)
	    this.current = this.current.nextSibling;
    this.caret = this.current.firstChild.nodeValue.length;
}

Guppy.prototype.checkpoint = function() {
    this.current.setAttribute("current","yes");
    this.current.setAttribute("caret",this.caret.toString());
    this.undo_now++;
    this.undo_data[this.undo_now] = this.base.cloneNode(true);
    this.undo_data.splice(this.undo_now+1, this.undo_data.length);
    this.fire_event("change",{"old":this.undo_data[this.undo_now-1],"new":this.undo_data[this.undo_now]});
    this.current.removeAttribute("current");
    this.current.removeAttribute("caret");
}

Guppy.prototype.restore = function(t) {
    this.base = this.undo_data[t].cloneNode(true);
    this.find_current();
    this.current.removeAttribute("current");
    this.current.removeAttribute("caret");
}

Guppy.prototype.find_current = function() {
    this.current = this.base.evaluate("//*[@current='yes']", this.base.documentElement, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    this.caret = parseInt(this.current.getAttribute("caret"));
}

Guppy.prototype.undo = function() {
    if (this.undo_now <= 0) return;
    this.undo_now--;
    this.restore(this.undo_now);
}

Guppy.prototype.redo = function() {
    if (this.undo_now >= this.undo_data.length-1) return;
    this.undo_now++;
    this.restore(this.undo_now);
}

Guppy.prototype.done = function(s) {
    if (this.is_symbol(this.current)) this.complete_symbol();
    else this.fire_event("done");
}

Guppy.prototype.complete_symbol = function() {
    var sym_name = this.current.firstChild.textContent;
    if (!(Guppy.kb.symbols[sym_name])) return;
    this.current = this.current.parentNode.parentNode;
    this.delete_from_f();
    this.insert_symbol(sym_name);
}

Guppy.prototype.problem = function(message) {
    this.fire_event("error",{"message":message});
}


// Keyboard stuff

Guppy.kb = {};

Guppy.kb.is_mouse_down = false;

Guppy.kb.CARET = "\\cursor[-0.2ex]{0.7em}"
Guppy.kb.TEMP_SMALL_CARET = "\\cursor[0em]{0.6em}"
Guppy.kb.TEMP_CARET = "\\cursor[-0.2ex]{0.7em}"
Guppy.kb.SMALL_CARET = "\\cursor[-0.05em]{0.5em}"
Guppy.kb.SEL_CARET = "\\cursor[-0.2ex]{0.7em}"
Guppy.kb.SMALL_SEL_CARET = "\\cursor[-0.05em]{0.5em}"
Guppy.kb.SEL_COLOR = "red"

Guppy.kb.symbols = {};

Guppy.prototype.is_blacklisted = function(symb_type) {
    for (var i = 0; i < this.blacklist.length; i++)
        if (symb_type == this.blacklist[i]) return true;
            return false;
}

Guppy.symb_raw = function(symb_name,latex_symb,text_symb) {
    Guppy.kb.symbols[symb_name] = {"output":{"latex":[latex_symb],
					     "text":[text_symb]},
				   "char":true,
				   "type":symb_name};
}

Guppy.symb_func = function(func_name) {
    Guppy.kb.symbols[func_name] = {"output":{"latex":"\\"+func_name+"\\left({$1}\\right)",
					     "text":func_name+"({$1})"},
				   "type":func_name,
				   "attrs":{
				       "delete":[1]
				   }
				  };
}

Guppy.prototype.check_for_symbol = function() {
    var instance = this;
    if (this.is_text(this.current)) return;
    for (var s in Guppy.kb.symbols) {
        if (instance.current.nodeName == 'e' && s.length <= (instance.caret - instance.space_caret) && !(Guppy.is_blank(instance.current)) && instance.current.firstChild.nodeValue.search_at(instance.caret,s)) {
	        var temp = instance.current.firstChild.nodeValue;
	        var temp_caret = instance.caret;
	        instance.current.firstChild.nodeValue = instance.current.firstChild.nodeValue.slice(0,instance.caret-s.length)+instance.current.firstChild.nodeValue.slice(instance.caret);
	        instance.caret -= s.length;
	        var success = instance.insert_symbol(s);
	        if (!success) {
	    	    instance.current.firstChild.nodeValue = temp;
	    	    instance.caret = temp_caret;
	        }
	        break;
	    }
    }
}

/* keyboard behaviour definitions */

// keys aside from 0-9,a-z,A-Z
Guppy.kb.k_chars = {
    "=":"=",
    "+":"+",
    "-":"-",
    "*":"*",
    ".":".",
    ",":",",
    "shift+/":"/",
    "shift+=":"+",
    "!":"!"
};
Guppy.kb.k_syms = {
    "/":"slash",
    "^":"exp",
    "*":"*",
    "(":"paren",
    "<":"less",
    ">":"greater",
    "_":"sub",
    "|":"abs",
    "shift+up":"exp",
    "shift+down":"sub"
};
Guppy.kb.k_controls = {
    "up":"up",
    "down":"down",
    "right":"right",
    "left":"left",
    "alt+k":"up",
    "alt+j":"down",
    "alt+l":"right",
    "alt+h":"left",
    "space":"spacebar",
    "home":"home",
    "end":"end",
    "backspace":"backspace",
    "del":"delete_key",
    "mod+a":"sel_all",
    "mod+c":"sel_copy",
    "mod+x":"sel_cut",
    "mod+v":"sel_paste",
    "mod+z":"undo",
    "mod+y":"redo",
    "enter":"done",
    "mod+shift+right":"list_extend_copy_right",
    "mod+shift+left":"list_extend_copy_left",
    "mod+right":"list_extend_right",
    "mod+left":"list_extend_left",
    "mod+up":"list_extend_up",
    "mod+down":"list_extend_down",
    "mod+shift+up":"list_extend_copy_up",
    "mod+shift+down":"list_extend_copy_down",
    "mod+backspace":"list_remove",
    "mod+shift+backspace":"list_remove_row",
    "shift+left":"sel_left",
    "shift+right":"sel_right",
    ")":"right_paren",
    "\\":"backslash",
    "tab":"tab"
};

// letters

for(var i = 65; i <= 90; i++) {
    Guppy.kb.k_chars[String.fromCharCode(i).toLowerCase()] = String.fromCharCode(i).toLowerCase();
    Guppy.kb.k_chars['shift+'+String.fromCharCode(i).toLowerCase()] = String.fromCharCode(i).toUpperCase();
}

// numbers

for(var i = 48; i <= 57; i++)
    Guppy.kb.k_chars[String.fromCharCode(i)] = String.fromCharCode(i);

Guppy.register_keyboard_handlers = function() {
    Mousetrap.addKeycodes({173: '-'}); // Firefox's special minus (needed for _ = sub binding)
    for (var i in Guppy.kb.k_chars)
    	Mousetrap.bind(i,function(i) { return function() {
	    if (!Guppy.active_guppy) return true;
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.insert_string(Guppy.kb.k_chars[i]);
	    return false;
	}}(i));  
    for (var i in Guppy.kb.k_syms)
    	Mousetrap.bind(i,function(i) { return function() {
	    if (!Guppy.active_guppy) return true;
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.space_caret = 0;
	    Guppy.active_guppy.insert_symbol(Guppy.kb.k_syms[i]);
	    return false;
	}}(i));
    for (var i in Guppy.kb.k_controls)
    	Mousetrap.bind(i,function(i) { return function() {
	    if (!Guppy.active_guppy) return true;
	    Guppy.active_guppy.space_caret = 0;
	    Guppy.active_guppy[Guppy.kb.k_controls[i]]();
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.render(["up","down","right","left","home","end","sel_left","sel_right"].indexOf(i) < 0);
	    return false;
	}}(i));
    
}

module.exports = Guppy;


},{"../lib/katex/katex-modified.min.js":1,"mousetrap":2}]},{},[3])(3)
});